<?xml version="1.0" encoding="US-ASCII"?>
<?xml-styleshet type='text/xsl' href='http://xml2rfc.tools.ietf.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml2rfc.tools.ietf.org/authoring/rfc2629.dtd">
<rfc category="std" docName="oauth-resource-reg" id="kantara" ipr="kantara"
     target="draft" version="2.0">
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc='yes' ?>

  <?rfc tocdepth='4' ?>

  <?rfc symrefs='yes' ?>

  <?rfc sortrefs='yes' ?>

  <?rfc compact='yes' ?>

  <?rfc subcompact='no' ?>

  <front>
    <title abbrev="OAuth RReg">OAuth 2.0 Resource Registration</title>

    <author fullname="Eve Maler" initials="E." role="editor" surname="Maler">
      <organization>ForgeRock</organization>

      <address>
        <email>eve.maler@forgerock.com</email>
      </address>
    </author>

    <author fullname="Maciej Machulak" initials="M." surname="Machulak">
      <organization>Self</organization>

      <address>
        <email>maciej.machulak@gmail.com</email>
      </address>
    </author>

    <author fullname="Justin Richer" initials="J." surname="Richer">
      <organization>Bespoke Engineering</organization>

      <address>
        <email>justin@bspk.io</email>
      </address>
    </author>

    <date day="24" month="January" year="2017" />

    <abstract>
      <t>This specification defines a method for an OAuth 2.0 resource server
      to register resources with an authorization server to put them under
      protection.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="introduction" title="Introduction">
      <t>This specification defines a method for an OAuth 2.0 <xref
      target="RFC6749" /> resource server to register resources with an
      authorization server to put them under protection.</t>

      <t>There are various circumstances under which a resource server may
      need to communicate information about its resources to its authorization
      server:<list style="symbols">
          <t>In some deployments of OAuth 2.0, many resource servers share a
          single authorization server for resource protection (a role often
          filled by a security token service (STS) component). Thus, whether
          or not the trust between these two is tightly bound, there is value
          in defining a single standardized and automatable communications
          interface for enabling resource protection between the authorization
          server and each of the resource servers.</t>

          <t>In some deployments of OpenID Connect <xref
          target="OpenIDConnect" />, which has a dependency on OAuth 2.0, the
          OpenID Provider (OP) component is a specialized version of an OAuth
          authorization server that brokers availability of user attributes by
          dealing with an ecosystem of attribute providers (APs). These APs
          effectively function as third-party resource servers. Thus, there is
          value in defining a consistent method by which the third-party APs
          can enable resources to be protected by the central OP, as well as
          enabling trust establishment between the APs and OP in a dynamic,
          loosely coupled fashion.</t>

          <t>User-Managed Access <xref target="UMA" />, which has a dependency
          on OAuth 2.0, uses the resource registration method defined in this
          specification so that an end-user or organizational resource owner
          can use any number of resource servers that outsource resource
          protection to a central authorization server. UMA also defines how
          to use the method so as to let the resource owner establish trust
          between the authorization server and each resource server in a
          dynamic, loosely coupled fashion.</t>
        </list></t>

      <section title="Notational Conventions">
        <t>The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT',
        'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this
        document are to be interpreted as described in <xref
        target="RFC2119" />.</t>

        <t>Unless otherwise noted, all protocol properties and values are case
        sensitive. JSON <xref target="RFC7159" /> data structures defined by
        this specification MAY contain extension properties that are not
        defined in this specification. Any entity receiving or retrieving a
        JSON data structure SHOULD ignore extension properties it is unable to
        understand. Extension names that are unprotected from collisions are
        outside the scope of this specification.</t>
      </section>

      <section anchor="terminology" title="Terminology">
        <t>This specification introduces the following new terms and
        enhancements of OAuth term definitions.<list hangIndent="6"
            style="hanging">
            <t hangText="resource">A digital resource available through an
            HTTP service.</t>

            <t hangText="protected resource">A resource for which an
            authorization server manages access grants. Protection begins on
            successful registration and ends on successful deregistration.</t>

            <t hangText="scope">A bounded extent of access to a protected
            resource. Scopes are associated with particular resources.</t>
          </list></t>
      </section>

      <section anchor="am-endpoints"
               title="Authorization Server Configuration">
        <t>If the authorization server declares its endpoints and any other
        configuration information in a machine-readable form, it SHOULD convey
        its resource registration endpoint in this fashion as well.</t>
      </section>
    </section>

    <section anchor="protecting-a-resource" title="Resource Registration">
      <t>This specification defines a resource registration API. The
      authorization server MUST use TLS protection over this endpoint, as
      governed by <xref target="BCP195" />, which discusses deployment and
      adoption characteristics of different TLS versions. The endpoint for
      this API SHOULD require some form of authentication to access this
      endpoint, such as Client Authentication as described in <xref
      target="RFC6749" /> or a separate OAuth access token. The methods of
      managing and validating these authentication credentials are out of
      scope of this specification.</t>

      <t>The resource server MAY register for protection a single resource
      that, from its perspective, has multiple parts, or has dynamic elements
      such as the capacity for querying or filtering, or otherwise has
      internal complexity. Note: The resource server alone is responsible for
      maintaining the necessary mappings between any such complexity (which
      might result, for example, in different requests coming from the client)
      and a single resource identifier known to the authorization server.</t>

      <t>Note: When a client attempts access to a presumptively protected
      resource without an access token, as occurs in <xref target="UMA" />,
      the resource server needs to derive the authorization server and
      resource identifier associated with that resource from some other aspect
      of the client's request. This effectively means that the resource
      server&rsquo;s API needs to be structured in such a way that the
      client's request without an access token uniquely identifies the
      resource. In practice, this information likely needs to be passed
      through the URI, headers, or body of the request.</t>

      <section anchor="resource-set-desc" title="Resource Descriptions">
        <t>A resource description is a JSON document that describes the
        characteristics of a resource sufficiently for an authorization server
        to protect it. A resource description has the following
        properties:<list style="hanging">
            <t hangText="name">OPTIONAL. A human-readable string describing
            the resource. The authorization server MAY use this name in any
            user interface it presents to a resource owner, for example, for
            resource protection monitoring or policy setting.</t>

            <t hangText="uri">OPTIONAL. A URI that provides the network
            location for the resource being registered. For example, if the
            resource corresponds to a digital photo, the value of this
            property could be an HTTP-based URI identifying the location of
            the photo on the web. The authorization server MAY use this
            information in various ways, for example, to inform clients about
            a resource's location as a discovery function. Note: When a client
            attempts access to a presumptively protected resource without an
            access token, the resource server needs to ascertain the
            authorization server and resource identifier associated with that
            resource without any context to guide it. In practice, this likely
            means that the URI reference used by the client needs to be unique
            per resource.</t>

            <t hangText="type">OPTIONAL. A string identifying the semantics of
            the resource. For example, if the resource is an identity claim
            that leverages standardized claim semantics for "verified email
            address", the value of this property could be an identifying URI
            for this claim. The authorization server MAY use this information
            in processing information about the resource or displaying
            information about it in any user interface it presents to a
            resource owner.</t>

            <t hangText="scopes">REQUIRED. An array of strings, serving as
            scope identifiers, indicating the available scopes for this
            resource. Any of the strings MAY be either a plain string or a URI
            (see <xref target="scope-interpretation" />). If a scope is a URI,
            then it MUST resolve to a scope description document (see <xref
            target="action-desc" />).</t>

            <t hangText="icon_uri">OPTIONAL. A URI for a graphic icon
            representing the resource. The authorization server MAY use the
            referenced icon in any user interface it presents to a resource
            owner, for example, for resource protection monitoring or policy
            setting.</t>
          </list></t>

        <figure>
          <preamble>For example, this description characterizes a resource (a
          photo album) that can potentially be viewed or printed; the scope
          URI points to a scope description as defined in <xref
          target="action-desc" />:</preamble>

          <artwork><![CDATA[{  
   "name":"Photo Album",
   "icon_uri":"http://www.example.com/icons/flower.png",
   "scopes":[  
      "view",
      "http://photoz.example.com/dev/scopes/print"
   ],
   "type":"http://www.example.com/rsrcs/photoalbum"
}
]]></artwork>
        </figure>

        <t>See <xref target="reg-api" /> for how the resource server registers
        resource descriptions with the authorization server in order to put
        resources under protection. See <xref target="resource-reg-example" />
        for a long-form example of resource descriptions used in resource
        registration.</t>

        <section anchor="action-desc" title="Scope Descriptions">
          <t>A scope description is a JSON document that describes the
          characteristics of a scope sufficiently for an authorization server
          to protect the resource with this scope. A scope description has the
          following properties:<list style="hanging">
              <t hangText="name">OPTIONAL. A human-readable string describing
              the scope. The authorization server MAY use this name in any
              user interface it presents to a resource owner, for example, for
              resource protection monitoring or policy setting.</t>

              <t hangText="icon_uri">OPTIONAL. A URI for a graphic icon
              representing the scope. The authorization server MAY use the
              referenced icon in any user interface it presents to a resource
              owner, for example, for resource protection monitoring or policy
              setting.</t>
            </list></t>

          <figure>
            <preamble>For example, this scope description characterizes a
            scope that involves viewing (vs., say, creating or editing in some
            fashion):</preamble>

            <artwork><![CDATA[{  
   "name":"View",
   "icon_uri":"http://www.example.com/icons/reading-glasses"
}
]]></artwork>
          </figure>

          <t>See <xref target="resource-reg-example" /> for a long-form
          example of scope descriptions used in resource registration.</t>
        </section>

        <section anchor="scope-interpretation" title="Scope Interpretation">
          <t>If the resource server uses a plain string for a scope, then the
          resource server and authorization server are presumed to have
          negotiated any required interpretation of scope handling out of
          band.</t>

          <t>If the resource server uses a URI for a scope, the scope's
          published scope description MAY reside anywhere on the web; a
          resource server is not required to self-host scope descriptions and
          may wish to point to standardized scope descriptions residing
          elsewhere. It is the resource server's responsibility to ensure that
          scope descriptions are accessible to authorization servers through
          GET calls to support any user interface requirements.</t>
        </section>
      </section>

      <section anchor="reg-api" title="Resource Registration API">
        <t>The resource server uses a RESTful API at the authorization
        server's resource registration endpoint to create, read, update, and
        delete resource descriptions, along with retrieving lists of such
        descriptions.</t>

        <t>Note carefully the similar but distinct senses in which the word
        "resource" is used in this section. The resource descriptions are
        themselves managed as web resources at the authorization server
        through this API. The initial registration process results in a unique
        identifier for the web resource that the resource server can later use
        for managing its description over time and for mapping .</t>

        <t>The authorization server MUST present an API for registering
        resource descriptions as a set of URIs whose first set of path
        components is the authorization server's resource registration
        endpoint.</t>

        <t>The authorization server is REQUIRED to support the following five
        registration options; any other operations are undefined by this
        specification. Here, <spanx style="emph">rreguri</spanx> stands for
        the resource registration endpoint and <spanx style="emph">_id</spanx>
        stands for the authorization server-assigned identifier for the web
        resource corresponding to the resource at the time it was created,
        included within the URL returned in the Location header. Each
        operation is defined in its own section below.<list style="symbols">
            <t>Create resource description: POST <spanx
            style="emph">rreguri</spanx>/</t>

            <t>Read resource description: GET <spanx
            style="emph">rreguri</spanx>/<spanx style="emph">_id</spanx></t>

            <t>Update resource description: PUT <spanx
            style="emph">rreguri</spanx>/<spanx style="emph">_id</spanx></t>

            <t>Delete resource description: DELETE <spanx
            style="emph">rreguri</spanx>/<spanx style="emph">_id</spanx></t>

            <t>List resource descriptions: GET <spanx
            style="emph">rreguri</spanx>/</t>
          </list></t>

        <t>Within the JSON body of a successful response, the authorization
        server includes common properties, possibly in addition to
        method-specific properties, as follows:<list style="hanging">
            <t hangText="_id">REQUIRED (except for the List method). A string
            value repeating the authorization server-defined identifier for
            the web resource corresponding to the resource. Its appearance in
            the body makes it readily available as an object identifier for
            various resource management tasks.</t>

            <t hangText="user_access_policy_uri">OPTIONAL. A URI that allows
            the resource server to redirect an end-user resource owner to a
            specific user interface within the authorization server where the
            resource owner can immediately set or modify access policies
            subsequent to the resource registration action just completed. The
            authorization server is free to choose the targeted user
            interface, for example, in the case of a deletion action, enabling
            the resource server to direct the end-user to a policy-setting
            interface for an overall "folder" of resources where the deleted
            resource once resided.</t>
          </list></t>

        <t>If the request to the resource registration endpoint is incorrect,
        then the authorization server instead responds with an error message
        by including one of the following error codes with the response (see
        <xref target="errors" />):<list style="hanging">
            <t hangText="unsupported_method_type">The resource server request
            used an unsupported HTTP method. The authorization server MUST
            respond with the HTTP 405 (Method Not Allowed) status code.</t>

            <t hangText="not_found">The resource requested from the
            authorization server cannot be found. The authorization server
            MUST respond with HTTP 404 (Not Found) status code.</t>
          </list></t>

        <section anchor="create-resource-set"
                 title="Create Resource Description">
          <t>Adds a new resource description to the authorization server using
          the POST method. If the request is successful, the resource is
          thereby registered and the authorization server MUST respond with a
          status message that includes an <spanx style="verb">_id</spanx>
          property.</t>

          <figure>
            <preamble>Form of a create request, with an access token in the
            header:</preamble>

            <artwork><![CDATA[POST /rs/ HTTP/1.1 Content-Type: application/json
Authorization: Bearer MHg3OUZEQkZBMjcx
...
{  
   "name":"Tweedl Social Service",
   "icon_uri":"http://www.example.com/icons/sharesocial.png",
   "scopes":[  
      "read-public",
      "post-updates",
      "read-private",
      "http://www.example.com/scopes/all"
   ],
   "type":"http://www.example.com/rsrcs/socialstream/140-compatible"
}
]]></artwork>
          </figure>

          <figure>
            <preamble>Form of a successful response:</preamble>

            <artwork><![CDATA[HTTP/1.1 201 Created
Content-Type: application/json
Location: /rs/KX3A-39WE
...
{  
   "_id":"KX3A-39WE",
   "user_access_policy_uri":"http://as.example.com/rs/222/resource/KX3A-39WE/policy"
}
]]></artwork>
          </figure>
        </section>

        <section anchor="read-resource-set" title="Read Resource Description">
          <t>Reads a previously registered resource description using the GET
          method. If the request is successful, the authorization server MUST
          respond with a status message that includes a body containing the
          referenced resource description, along with an <spanx
          style="verb">_id</spanx> property.</t>

          <figure>
            <preamble>Form of a read request, with an access token in the
            header:</preamble>

            <artwork><![CDATA[GET /rs/KX3A-39WE HTTP/1.1
Authorization: Bearer MHg3OUZEQkZBMjcx
...
]]></artwork>
          </figure>

          <figure>
            <preamble>Form of a successful response:</preamble>

            <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
...
{  
   "_id":"KX3A-39WE",
   "name":"Tweedl Social Service",
   "icon_uri":"http://www.example.com/icons/sharesocial.png",
   "scopes":[  
      "read-public",
      "post-updates",
      "read-private",
      "http://www.example.com/scopes/all"
   ],
   "type":"http://www.example.com/rsrcs/socialstream/140-compatible"
}
]]></artwork>
          </figure>

          <t>If the referenced resource does not exist, the authorization
          server MUST produce an error response with an error property value
          of <spanx style="verb">not_found</spanx>, as defined in <xref
          target="reg-api" />.</t>
        </section>

        <section anchor="update-resource-set"
                 title="Update Resource Description">
          <t>Updates a previously registered resource description, by means of
          a complete replacement of the previous resource description, using
          the PUT method. If the request is successful, the authorization
          server MUST respond with a status message that includes an <spanx
          style="verb">_id</spanx> property.</t>

          <figure>
            <preamble>Form of an update request, with an access token in the
            header:</preamble>

            <artwork><![CDATA[PUT /rs/9UQU-DUWW HTTP/1.1
Content-Type: application/json
Authorization: Bearer 204c69636b6c69
...
{  
   "name":"Photo Album",
   "icon_uri":"http://www.example.com/icons/sky.png",
   "scopes":[  
      "http://photoz.example.com/dev/scopes/view",
      "public-read"
   ],
   "type":"http://www.example.com/rsrcs/photoalbum"
}
]]></artwork>
          </figure>

          <figure>
            <preamble>Form of a successful response:</preamble>

            <artwork><![CDATA[HTTP/1.1 200 OK
...
{  
   "_id":"9UQU-DUWW"
}
]]></artwork>
          </figure>
        </section>

        <section anchor="delete-resource-set"
                 title="Delete Resource Description">
          <t>Deletes a previously registered resource description using the
          DELETE method. If the request is successful, the resource is thereby
          deregistered.</t>

          <figure>
            <preamble>Form of a delete request, with an access token in the
            header:</preamble>

            <artwork><![CDATA[DELETE /rs/9UQU-DUWW
Authorization: Bearer 204c69636b6c69
...
]]></artwork>
          </figure>

          <figure>
            <preamble>Form of a successful response:</preamble>

            <artwork><![CDATA[HTTP/1.1 204 No content
...
]]></artwork>
          </figure>

          <t>If the referenced resource does not exist, the authorization
          server MUST produce an error response with an error property value
          of <spanx style="verb">not_found</spanx>, as defined in <xref
          target="reg-api" />.</t>
        </section>

        <section anchor="list-resource-sets"
                 title="List Resource Descriptions">
          <t>Lists all previously registered resource identifiers for this
          user using the GET method. The authorization server MUST return the
          list in the form of a JSON array of <spanx
          style="verb">{_id}</spanx> string values.</t>

          <t>The resource server uses this method as a first step in checking
          whether its understanding of protected resources is in full
          synchronization with the authorization server's understanding.</t>

          <figure>
            <preamble>Form of a list request, with an access token in the
            header:</preamble>

            <artwork><![CDATA[GET /rs/ HTTP/1.1
Authorization: Bearer 204c69636b6c69
...
]]></artwork>
          </figure>

          <figure>
            <preamble>Form of a successful response:</preamble>

            <artwork><![CDATA[HTTP/1.1 200 OK
...
[  
   "KX3A-39WE",
   "9UQU-DUWW"
]
]]></artwork>
          </figure>
        </section>
      </section>
    </section>

    <section anchor="errors" title="Error Messages">
      <t>When a resource server attempts to access the resource registration
      endpoint at the authorization server, if the request is successfully
      authenticated, but is invalid for another reason, the authorization
      server produces an error response by adding the following properties to
      the entity body of the HTTP response:<list style="hanging">
          <t hangText="error">REQUIRED. A single error code. Values for this
          property are defined throughout this specification.</t>

          <t hangText="error_description">OPTIONAL. Human-readable text
          providing additional information.</t>

          <t hangText="error_uri">OPTIONAL. A URI identifying a human-readable
          web page with information about the error.</t>
        </list></t>
    </section>

    <section title="Security Considerations">
      <t>This specification largely relies on the base API security method,
      such as OAuth, for API security and shares its security and
      vulnerability considerations.</t>

      <t>Some form of trust relationship between the authorization server and
      resource server is presumed. However, where this pairwise trust
      relationship is weak or loosely coupled, for example, if dynamic client
      registration is supported for resource servers as OAuth clients of the
      resource registration API, the authorization server must be extremely
      careful with any information supplied during resource registration that
      may be displayed to a resource owner in a user interface or be used to
      drive authorization server-based workflows.</t>

      <t>For example, a rogue resource server could register a resource or
      scope with a reference to a drive-by download in icons returned by the
      <spanx style="verb">icon_uri</spanx>, enticing the resource owner to
      click on the icon during the policy setting process. The authorization
      server SHOULD check to see if all URIs defined in the <spanx
      style="verb">icon_uri</spanx> resolve to valid web pages. Since these
      are URI values that are intended to be displayed to the resource owner
      in a policy-setting interface, the authorization server SHOULD protect
      the resource owner from malicious content hosted at the URIs where
      possible.</t>

      <t>Additionally, a rogue resource server could supply misleading names
      for a resource or scope, or mislabel the type of a resource, leading a
      resource owner to set policy incorrectly.</t>

      <t>One approach to mitigating the threat of bad URIs is that, before
      presenting clickable icons, the authorization server could download the
      content hosted at the linked URIs, check the content against a malware
      scanner and blacklist filter, determine whether or not there is mixed
      secure and non-secure content at the URL, and other possible server-side
      mitigations. Note that the content in these URIs can change at any time
      and the authorization server cannot provide complete confidence in the
      safety of the URIs, but these practices could help. To further mitigate
      this kind of threat, the authorization server can also warn the user
      that the links have been provided by a third party, should be treated
      with caution, and are not hosted by the authorization server itself. For
      instance, instead of providing the links directly in an HTML anchor, the
      authorization server can direct the user to an interstitial warning page
      before allowing the user to continue to the target URI.</t>

      <t>An alternative approach may be available in deployment ecosystems
      where trust relationships with resource servers may be weak but APIs,
      resource semantics, and scopes have been standardized. A resource server
      could potentially increase the likelihood of an authorization server
      trusting the URIs it registers by using well-known and
      third-party-standardized URIs. This may benefit resource type values as
      well, if these are represented as URIs.</t>

      <t>In many ways, the resource server depends more heavily on elements of
      the pairwise trust relationship than does the authorization server.
      Since the resource server needs to outsource a variety of resource
      protection-related processes to the authorization server, a rogue or
      impersonated authorization server would present great risk. Using OAuth
      with its attendant channel security requirements for API authentication
      would mitigate the risk of impersonation.</t>

      <t>A small example of the risk posed by a rogue authorization server is
      the <spanx style="verb">user_access_policy_uri</spanx> property, which
      is the one case of a URI passed from authorization server to resource
      server rather than the reverse. The resource server, in taking advantage
      of this URI, could redirect a resource owner to a third-party web page
      infected with malware or similar. To mitigate this specific risk, the
      resource server could check that the URI is fully qualified and matches
      the host and scheme of the authorization server.</t>
    </section>

    <section title="Privacy Considerations">
      <t>The communication between the authorization server and resource
      server may expose personally identifiable information of a resource
      owner. The context in which this API is used SHOULD account for its own
      unique privacy considerations.</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document makes no request of IANA.</t>
    </section>

    <section anchor="resource-reg-example"
             title="Example of Registering Resources">
      <t>The following non-normative example illustrates the intent and usage
      of resource descriptions and scope descriptions as part of resource
      registration in the context of <xref target="UMA" />.</t>

      <t>This example contains some steps that are exclusively in the realm of
      user experience rather than web protocol, to achieve realistic
      illustration. These steps are labeled "user experience only". Some other
      steps are exclusively internal to the operation of the entity being
      discussed. These are labeled "internal only".</t>

      <t>This example also does not contain any information regarding the
      mechanism that is used to authenticate the resource server at the
      authorization server, and mechanisms such as OAuth can be used for this
      purpose.</t>

      <t>A resource owner, Alice Adams, has just uploaded a photo of her new
      puppy to a resource server, Photoz.example.com, and wants to ensure that
      this specific photo is not publicly accessible.</t>

      <t>Alice has already introduced this resource server to her
      authorization server, CopMonkey.example.com. However, Alice has not
      previously instructed Photoz to use CopMonkey to protect any photos of
      hers.</t>

      <t>CopMonkey has a "default-deny" setup, so until such time as Alice
      maps some other more permissive policies to any resources registered by
      Photoz, the policy is not to share them. Policies she may eventually map
      to particular photos or albums might be "Share only with
      husband@email.example.net" or "Share only with people in my 'family'
      group".</t>

      <t>Photoz has a publicly documented application-specific API that offers
      two dozen different methods that apply to single photos, such as <spanx
      style="verb">addTags</spanx> and <spanx style="verb">getSizes</spanx>,
      but rolls them up into two photo-related scopes of access: "view"
      (consisting of various read-only operations) and "print" (consisting of
      various printing operations). It defines two scope descriptions that
      represent these scopes, which it is able to reuse for all of its users
      (not just Alice), and ensures that these scope description documents are
      available through HTTP GET requests that may be made by authorization
      servers.</t>

      <t>Photoz constructs scope description documents for the scopes in order
      to provide data that will help them be displayed in user interfaces.
      (This means that any scope strings it supplies in resource registration
      descriptions will need to be URIs referring to these documents. The
      alternative would have been simple scope strings without the additional
      user interface data.)</t>

      <t>The "name" property values in the scope descriptions are intended to
      be seen by Alice when she maps authorization constraints to specific
      resources and scopes while visiting CopMonkey, such that Alice would see
      the strings "View Photo and Related Info" and "Print Photo", likely
      accompanied by the referenced icons, in the CopMonkey interface. (Other
      users of Photoz might similarly see the same labels at CopMonkey or
      whatever other authorization server they use. Photoz could distinguish
      natural-language labels per user if it wishes, by pointing to scopes
      with differently translated names.)</t>

      <t>Example of the viewing-related scope description document available
      at http://photoz.example.com/dev/scopes/view:</t>

      <figure>
        <artwork><![CDATA[{  
   "name":"View Photo and Related Info",
   "icon_uri":"http://www.example.com/icons/reading-glasses.png"
}
]]></artwork>
      </figure>

      <t>Example of the scope description document available at
      http://photoz.example.com/dev/scopes/print:</t>

      <figure>
        <artwork><![CDATA[{  
   "name":"Print Photo",
   "icon_uri":"http://www.example.com/icons/printer.png"
}
]]></artwork>
      </figure>

      <t>While visiting Photoz, Alice selects a link or button that instructs
      the site to "Protect" or "Share" this single photo (user experience
      only; Photoz could have made this a default or preference setting).</t>

      <t>As a result, Photoz defines for itself a resource that represents
      this photo (internal only; Photoz is the only application that knows how
      to map a particular photo to a particular resource). Photoz also
      prepares the following resource description, which is specific to Alice
      and her photo. The "name" property value is intended to be seen by Alice
      in mapping authorization policies to specific resources and scopes when
      she visits CopMonkey. Alice would see the string "Steve the puppy!",
      likely accompanied by the referenced icon, in the CopMonkey interface.
      The possible scopes of access on this resource are indicated with URI
      references to the scope descriptions, as shown just above.</t>

      <figure>
        <artwork><![CDATA[{  
   "name":"Steve the puppy!",
   "icon_uri":"http://www.example.com/icons/flower.png",
   "scopes":[  
      "http://photoz.example.com/dev/scopes/view",
      "http://photoz.example.com/dev/scopes/print"
   ]
}
]]></artwork>
      </figure>

      <t>Photoz uses the Create method of CopMonkey's standard OAuth resource
      registration API, presenting its Alice-specific access token to use the
      API to register and assign an identifier to the resource
      description.</t>

      <figure>
        <artwork><![CDATA[POST /rs/ HTTP/1.1
Content-Type: application/json
...
{  
   "name":"Steve the puppy!",
   "icon_uri":"http://www.example.com/icons/flower.png",
   "scopes":[  
      "http://photoz.example.com/dev/scopes/view",
      "http://photoz.example.com/dev/scopes/print"
   ]
}
]]></artwork>
      </figure>

      <t>If the registration attempt succeeds, CopMonkey responds in the
      following fashion.</t>

      <figure>
        <artwork><![CDATA[HTTP/1.1 201 Created
Content-Type: application/json
...
{  
   "_id":"112210f47de98100",
   "user_access_policy_uri":"http://as.example.com/rs/222/resource/112210f47de98100/policy"
}
]]></artwork>
      </figure>

      <t>At the time Alice indicates she would like this photo protected,
      Photoz can choose to redirect Alice to CopMonkey for further policy
      setting, access auditing, and other authorization server-related tasks
      (user experience only).</t>

      <t>Once it has successfully registered this description, Photoz is
      responsible for outsourcing protection to CopMonkey for access attempts
      made to this photo.</t>

      <t>Over time, as Alice uploads other photos and creates and organizes
      photo albums, Photoz can use additional methods of the resource
      registration API to ensure that CopMonkey's understanding of Alice's
      protected resources matches its own.</t>

      <t>For example, if Photoz suspects that somehow its understanding of the
      resource has gotten out of sync with CopMonkey's, it can ask to read the
      resource description as follows.</t>

      <figure>
        <artwork><![CDATA[GET /rs/112210f47de98100 HTTP/1.1
Host: as.example.com
...
]]></artwork>
      </figure>

      <t>CopMonkey responds with the full content of the resource description,
      including its <spanx style="verb">_id</spanx>, as follows:</t>

      <figure>
        <preamble>Example of an HTTP response to a "read resource description"
        request, containing a resource description from the authorization
        server:</preamble>

        <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
...
{  
   "_id":"112210f47de98100",
   "name":"Steve the puppy!",
   "icon_uri":"http://www.example.com/icons/flower.png",
   "scopes":[  
      "http://photoz.example.com/dev/scopes/view",
      "http://photoz.example.com/dev/scopes/print"
   ]
}
]]></artwork>
      </figure>

      <t>If for some reason Photoz and CopMonkey have gotten dramatically out
      of sync, Photoz can ask for the list of resource identifiers CopMonkey
      currently knows about:</t>

      <figure>
        <artwork><![CDATA[GET /rs/ HTTP/1.1
Host: as.example.com
...
]]></artwork>
      </figure>

      <t>CopMonkey's response might look as follows:</t>

      <figure>
        <artwork><![CDATA[HTTP/1.1 200 OK
...
[  
   "112210f47de98100",
   "34234df47eL95300"
]
]]></artwork>
      </figure>

      <t>If Alice later changes the photo's title (user experience only) on
      Photoz from "Steve the puppy!" to "Steve on October 14, 2011", Photoz
      would use the Update method to ensure that Alice's experience of
      policy-setting at CopMonkey remains consistent with what she sees at
      Photoz. Following is an example of this request. Note that the entire
      updated resource description has to be included in the PUT request.</t>

      <figure>
        <artwork><![CDATA[PUT /rs/112210f47de98100 HTTP/1.1
Content-Type: application/json
Host: as.example.com
...
{  
   "name":"Steve on October 14, 2011",
   "icon_uri":"http://www.example.com/icons/flower.png",
   "scopes":[  
      "http://photoz.example.com/dev/scopes/view",
      "http://photoz.example.com/dev/scopes/print"
   ]
}
]]></artwork>
      </figure>

      <t>CopMonkey would respond as follows.</t>

      <figure>
        <artwork><![CDATA[HTTP/1.1 201 Created
Content-Type: application/json
...
{  
   "_id":"112210f47de98100"
}
]]></artwork>
      </figure>

      <t>There are other reasons Photoz might want to update resource
      descriptions, having nothing to do with Alice's actions or wishes. For
      example, it might extend its API to include new features such as photo
      resizing, and want to add new scopes to all of Alice's and other users'
      resource descriptions.</t>

      <t>if Alice later decides to entirely remove sharing protection (user
      experience only) on this photo while visiting Photoz, ensuring that the
      public can get access without any protection, Photoz is responsible for
      deleting the relevant resource registration, as follows:</t>

      <figure>
        <artwork><![CDATA[DELETE /rs/112210f47de98100 HTTP/1.1
Host: as.example.com
...]]></artwork>
      </figure>

      <t>CopMonkey would respond as follows.</t>

      <figure>
        <artwork><![CDATA[HTTP/1.1 204 No content
...
]]></artwork>
      </figure>
    </section>

    <section anchor="Acknowledgments" title="Acknowledgments">
      <t>The following people made significant text contributions to the
      specification:<list style="symbols">
          <t>Paul C. Bryan, ForgeRock US, Inc. (former editor)</t>

          <t>Domenico Catalano, Oracle (former author)</t>

          <t>Mark Dobrinic, Cozmanova</t>

          <t>George Fletcher, AOL</t>

          <t>Thomas Hardjono, MIT (former editor)</t>

          <t>Lukasz Moren, Cloud Identity Ltd</t>

          <t>Christian Scholz, COMlounge GmbH (former editor)</t>

          <t>Mike Schwartz, Gluu</t>

          <t>Jacek Szpot, Newcastle University</t>
        </list></t>

      <t>Additional contributors to this specification include the Kantara UMA
      Work Group participants, a list of whom can be found at <xref
      target="UMAnitarians" />.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <reference anchor="BCP195" target="https://tools.ietf.org/html/bcp195">
        <front>
          <title>Recommendations for Secure Use of Transport Layer Security
          (TLS) and Datagram Transport Layer Security (DTLS)</title>

          <author initials="Y." surname="Sheffer">
            <organization />
          </author>

          <date day="" month="May" year="2015" />
        </front>
      </reference>
    </references>

    <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119"?>

    <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749"?>

    <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7159"?>

    <references title="Informative References">
      <reference anchor="OpenIDConnect"
                 target="http://openid.net/specs/openid-connect-core-1_0.html">
        <front>
          <title>OpenID Connect Core 1.0 incorporating errata set 1</title>

          <author initials="N." surname="Sakimura">
            <organization />
          </author>

          <date day="8" month="November" year="2014" />
        </front>
      </reference>

      <reference anchor="UMA"
                 target="https://docs.kantarainitiative.org/uma/rec-uma-core-v1_0_1.html">
        <front>
          <title>User-Managed Access (UMA) Profile of OAuth 2.0</title>

          <author initials="E." surname="Maler">
            <organization>MIT</organization>
          </author>

          <date day="9" month="August" year="2016" />
        </front>
      </reference>

      <reference anchor="UMAnitarians"
                 target="https://kantarainitiative.org/confluence/display/uma/Participant+Roster">
        <front>
          <title>UMA Participant Roster</title>

          <author initials="E." surname="Maler">
            <organization>Maler</organization>
          </author>

          <date day="" month="" year="2016" />
        </front>
      </reference>
    </references>
  </back>
</rfc>
