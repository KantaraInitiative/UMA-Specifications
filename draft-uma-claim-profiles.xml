<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml.resource.org/authoring/rfc2629.dtd" [
<!ENTITY RFC2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2617 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2617.xml">
<!ENTITY UMA PUBLIC "" "http://kantarainitiative.org/confluence/display/uma/Home">
<!ENTITY UMAreqs PUBLIC "" "http://kantarainitiative.org/confluence/display/uma/UMA+Requirements">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC4627 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml">
]>
<rfc category="std" docName="draft-catalano-uma-claim-framework-00a"
     ipr="trust200902">
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc='yes' ?>

  <?rfc tocdepth='4' ?>

  <?rfc symrefs='yes' ?>

  <?rfc sortrefs='yes' ?>

  <?rfc compact='yes' ?>

  <?rfc subcompact='no' ?>

  <front>
    <title abbrev="UMA Core">Generic Framework for UMA Claim Profiles</title>

    <author fullname="Domenico Catalano" initials="D" role="editor"
            surname="Catalano">
      <organization>Oracle</organization>

      <address>
        <email>domenico.catalano@oracle.com</email>
      </address>
    </author>

    <author fullname="Maciej Machulak" initials="M" surname="Machulak">
      <organization>Cloud Identity</organization>

      <address>
        <email>maciej.machulak@cloudidentity.co.uk</email>
      </address>
    </author>

    <date day="4" month="March" year="2014" />

    <abstract>
      <t>User-Managed Access (UMA) is a profile of OAuth 2.0. UMA defines how
      resource owners can control protected-resource access by clients
      operated by arbitrary requesting parties, where the resources reside on
      any number of resource servers, and where a centralized authorization
      server governs access based on resource owner policy. This specification
      defines a generic framework for building UMA claim profiles that can be
      used by client applications to obtain the necessary authorization from
      authorization servers to access protected resources on resource
      servers.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="introduction" title="Introduction">
      <t>User-Managed Access <xref target="UMA"></xref> is a profile of OAuth
      2.0. UMA defines how resource owners can control protected-resource
      access by clients operated by arbitrary requesting parties, where the
      resources reside on any number of resource servers, and where a
      centralized authorization server governs access based on resource owner
      policy. This specification defines a generic framework for building UMA
      claim profiles that can be used by client applications to obtain the
      necessary authorization from authorization servers to access protected
      resources on resource servers.</t>

      <t>Using this framework, new profiles can be easily added to meet
      requirements of particular deployments of UMA. Profiles built on this
      framework will share certain interoperability and ease of development
      properties (of both authorization servers and clients). This
      specification also provides some profiles that build on the framework.
      Third-party profiles can build on the framework directly or on these
      sample profiles, as they wish.</t>

      <t>The framework introduces different interaction patterns that the
      client and authorization server can use, and different roles they can
      play, in order to gather claims about the requesting party:<list
          style="symbols">
          <t>The <spanx style="bold">delivery</spanx> interaction pattern
          leverages a <spanx style="bold">claims-aware client</spanx> that is
          able to deliver claims about the requesting party (or information
          about how to get claims) directly to the authorization server. The
          information delivered can be an identity or claims token, data that
          aids in discovery of a claims endpoint, etc. The authorization
          server then plays the role of a <spanx style="bold">claims receiver</spanx>
          (and/or activates a <spanx style="bold">claims connector</spanx>
          based on the information, for gathering claims itself without
          requesting party involvement).</t>

          <t>The <spanx style="bold">redirect</spanx> pattern assumes a <spanx
          style="bold">claims-unaware client</spanx> whose only option (other
          than failing entirely) is to redirect the end-user requesting party
          to the authorization server. On receiving the end user, the
          authorization server activates a <spanx style="bold">claims connector</spanx>
          for gathering the necessary claims with the user's involvement,
          using any method or combination of methods. In this role, the
          authorization server may be a relying party in a federated identity
          interaction, or it may connect to a directory or other user
          repository. After the claims-gathering process, the authorization
          server redirects the user back to the client.</t>
        </list></t>

      <t>The profiles defined on these interaction patterns are as
      follows:<list style="symbols">
          <t>Delivery:<list style="symbols">
              <t>Client delivers a SAML assertion to the authorization
              server</t>

              <t>Client delivers OpenID Connect user claims to the
              authorization server</t>
            </list></t>

          <t>Redirect:<list style="symbols">
              <t>Client redirects end-user requesting party to the
              authorization server (ISSUE: We think this shouldn't specify
              that the AS is (say) an OpenID Connect RP, because it might want
              to be "all of the above" simultaneously: allow options for local
              user login, user form-fill, social sign-in, other IdP sign-in,
              etc. Does this make sense? It would change the original single
              profile quite a bit, making it more general.)</t>
            </list></t>
        </list></t>

      <t>In all cases, it is assumed that the authorization server evaluates
      the resource owner's policy for a particular resource set based, at
      least in part, on the supplied claims. Third parties have the
      opportunity to further profile the profiles for greater interoperability
      in particular deployments. An authorization server MAY support any claim
      profiles, and SHOULD advertise its conformance to those profiles in its
      configuration data. </t>

      <section title="Notational Conventions">
        <t>The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT',
        'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this
        document are to be interpreted as described in <xref
        target="RFC2119"></xref>.</t>

        <t>Unless otherwise noted, all the protocol properties and values are
        case sensitive.</t>
      </section>
    </section>

    <section title="Generic Framework for Claim Profiling">
      <t>(ISSUE: Put stuff about how need_claims returns significant hints
      here.)</t>

      <t>An authorization server has an opportunity, when it returns a
      "need_claims" response to a client asking for authorization, to provide
      further instructions and hints to the client in this response. </t>
    </section>

    <section anchor="delivery-framework"
             title="Delivery Framework for Claim Profiling">
      <t>In order to support delivery-pattern claim profiles, the
      authorization request endpoint in the authorization API presented by the
      authorization server is extended to accept JSON-encoded claims-related
      data in the body of the request. Along with the "rpt" and "ticket"
      properties that already need to be provided, a "claims" property appears
      in addition.</t>

      <t>Common message flow:</t>

      <figure>
        <preamble>1. The client sends the claims type and its claims directly
        to the AS</preamble>

        <artwork><![CDATA[POST /rpt_authorization HTTP/1.1
        Host: www.nuveam.com
        Authorization: Bearer jwfLG53^sad$#f
        ...
            
{
    "rpt": "sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
    "ticket": "016f84e8-f9b9-11e0-bd6f-0021cc6004de",
    "claims": [
        {
            "type": "CLAIM_TYPE_AS_STRING",
            "value": {SPECIFIC_SET_OF_CLAIMS_AS_JSON_OBJECT}
        }
    ]
}
        ]]></artwork>
      </figure>

      <t>Importantly, the claims MUST be an array of JSON objects. The type
      field MUST have a String value indicating the type of claims-related
      data, while the value field MUST be a JSON object specific to that type
      of claims-related data.</t>

      <figure>
        <preamble>2. The authorization server informs the client that
        authorization data has been added</preamble>

        <artwork><![CDATA[HTTP/1.1 201 Created
    Content-Type: application/json;charset=UTF-8
        
    {
        "rpt":"e6b09a4f434a6a47a65a198652df381a"
    }
    ]]></artwork>
      </figure>

      <figure>
        <preamble>3. The authorization server informs the client that further
        claims should be provided to the authorization request
        endpoint:</preamble>

        <artwork><![CDATA[HTTP/1.1 403 Forbidden
Content-Type: application/json
        
{
    "need_claims":[
    {
        "type":"redirect_required",
        "name":"",
        "value":""
    }]
}
    ]]></artwork>
      </figure>

      <figure>
        <preamble>4. The authorization server informs the client that further
        claims should be provided (the example below is for SAML
        assertion)</preamble>

        <artwork><![CDATA[HTTP/1.1 403 Forbidden
Content-Type: application/json
        
{
    "need_claims":[
    {
        "type":"claim-client-assertion-saml-1.0",
        "name":"",
        "value":""
    }
    ]
}
    ]]></artwork>
      </figure>

      <figure>
        <preamble>5. The authorization server informs the client that the
        authorization data cannot be added.</preamble>

        <artwork><![CDATA[HTTP/1.1 403 Forbidden
Content-Type: application/json;charset=UTF-8
        
{
    "error":"not_authorized_permission",
    "error_description":"Authorization data cannot be added"
}
    ]]></artwork>
      </figure>

      <section anchor="client-pull-custom-attr"
               title="Client provides custom user attributes">
        <t>TYPE = "custom"</t>

        <t>VALUE = {custom defined}</t>

        <t>In the most trivial setting where the AS and the Client are
        collocated and have an established trust relationship (in particular,
        the AS trusts information obtained from the client), then the client
        can be preconfigured to provide the required information to the AS
        based on a custom schema. We provide the most trivial example below,
        where the client application provides a user's identifier (in this
        case email) to the AS and such identifier is used for policy
        evaluation.</t>

        <figure>
          <preamble>Example:</preamble>

          <artwork><![CDATA[POST /rpt_authorization HTTP/1.1
Host: www.nuveam.com
Authorization: Bearer jwfLG53^sad$#f
...
           
{
    "rpt": "sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
    "ticket": "016f84e8-f9b9-11e0-bd6f-0021cc6004de",
    "claims": [
    {
        "type": "ci-nuveam-claims",
        "value": { "email": "bob@company.examle.com" }
    }
    ]
}
       ]]></artwork>
        </figure>

        <t>Another example is where the client provides a richer set of
        attributes directly to the AS and these attributes may be used for
        policy evaluation. Importantly, it is the AS that decides which
        attributes are used for policy evaluation and which are not.</t>

        <figure>
          <preamble>Example:</preamble>

          <artwork><![CDATA[POST /rpt_authorization HTTP/1.1
Host: www.nuveam.com
Authorization: Bearer jwfLG53^sad$#f
...
        
{
    "rpt": "sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
    "ticket": "016f84e8-f9b9-11e0-bd6f-0021cc6004de",
    "claims": [
        {
        "type": "ci-nuveam-claims",
        "value": { "email": "bob@gmail.com", "roles": [ "manager", "admin" ] }
        }
    ]
    
}
    ]]></artwork>
        </figure>

        <t>We provide an example of a reply below (standard UMA reply):</t>

        <figure>
          <preamble>Example:</preamble>

          <artwork><![CDATA[HTTP/1.1 201 Created
Content-Type: application/json
        
{
    "rpt": "sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv2"
}
    ]]></artwork>
        </figure>

        <t>In case of custom attributes, the client does not necessarily uses
        any specific protocol for obtaining user attributes. It can use a
        pre-established relationship with the AS to provide the required set
        of these attributes.</t>
      </section>

      <section anchor="claims-as-saml-conveyor"
               title="Client Acts as SAML Assertion Conveyor">
        <t>TYPE = "claim-client-assertion-saml-1.0"</t>

        <t>VALUE = {base64-encoded SAML assertion}</t>

        <t>In this setting the AS and the Client have a pre-established trust
        relationship. The client may provide the AS with a SAML assertion that
        can be used for policy evaluation. We provide an example of the
        request below.</t>

        <figure>
          <preamble>Example:</preamble>

          <artwork><![CDATA[POST /rpt_authorization HTTP/1.1
Host: www.nuveam.com
Authorization: Bearer jwfLG53^sad$#f
...
            
{
    "rpt": "sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
    "ticket": "016f84e8-f9b9-11e0-bd6f-0021cc6004de",
    "claims": [
    {
        "type": "claim-client-assertion-saml-1.0",
        "value": {
        "saml_assertion": "PHNhbWxwOl...[omitted for brevity]...ZT"
        }
    }
    ]
    
}
        ]]></artwork>
        </figure>
      </section>

      <section anchor="claims-as-oidc-conveyor"
               title="Client Acts as OpenID Connect ID Token Conveyor">
        <t>TYPE = "claim-client-idtoken-oidc-1.0"</t>

        <t>VALUE = {set of oidc reserved claims}</t>

        <t>In this setting the AS and the Client have a pre-established trust
        relationship. The client may provide the AS with a OpenID Connect
        claims that can be used for policy evaluation. We provide an example
        of the request made by the client to the Authorization Server
        below.</t>

        <figure>
          <preamble>Example:</preamble>

          <artwork><![CDATA[POST /rpt_authorization HTTP/1.1
Host: www.nuveam.com
Authorization: Bearer jwfLG53^sad$#f
...
            
{
    "rpt": "sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
    "ticket": "016f84e8-f9b9-11e0-bd6f-0021cc6004de",
    "claims": [
    {
        "type": "claim-client-idtoken-oidc-1.0",
        "value": {
        "sub": "248289761001"
        "name": "Jane Doe",
        "given_name": "Jane",
        "family_name": "Doe",
        "email": "joedoe@example.com"
        "email_verified": true,
        }
    }
    ]
    
}
        ]]></artwork>
        </figure>
      </section>

      <section anchor="claims-as-custom-conveyor"
               title="Hybrid Approach: Client Acts as Custom Claims Conveyor and OpenID Connect ID Token Conveyor">
        <t>TYPE = "custom"</t>

        <t>VALUE = {custom defined}</t>

        <t>TYPE = "claim-client-idtoken-oidc-1.0"</t>

        <t>VALUE = {set of oidc reserved claims}</t>

        <t>In this setting the AS and the Client have a pre-established trust
        relationship. The client may provide the AS with custom claims as well
        as with OpenID Connect claims that can be used for policy evaluation.
        We provide an example of the request below.</t>

        <figure>
          <preamble>Example:</preamble>

          <artwork><![CDATA[POST /rpt_authorization HTTP/1.1
Host: www.nuveam.com
Authorization: Bearer jwfLG53^sad$#f
...
{
    "rpt": "sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
    "ticket": "016f84e8-f9b9-11e0-bd6f-0021cc6004de",
    "claims": [
    {
        "type": "ci-nuveam-claims",
        "value": { "roles": ["manager", "admin" }
            },
    {
        "type": "claim-client-idtoken-oidc-1.0",
        "value": { "email": "bob@gmail.com" }
            }
    ]
}
    ]]></artwork>
        </figure>
      </section>
    </section>

    <section anchor="redirect-framework"
             title="Redirect Framework for Claim Profiling">
      <t>In order to support redirect type UMA profiles, the Authorization
      Server has to be extended to provide a User Claims Endpoint. The user
      claims endpoint is used by the Authorization Server to interact with the
      requesting party and not with the client. The authorization server can
      first verify the identity of the requesting party or it may engage the
      requesting party in claims gathering flow. For example, the AS may
      decide based on the authentication process that it has enough
      information to evaluate a policy or it may require the user to provide
      further claims using an existing identity federation protocol. For
      example, after landing at this endpoint the requesting party may be
      further redirected to the source of claims (e.g. SAML IDP or the OpenID
      Connect Identity Provider). In this document, we discuss three
      examples:<list style="numbers">
          <t>User's authentication is sufficient for policy evalutation;</t>

          <t>User is redirected to an OIDC Provider</t>

          <t>User is redirected to a SAML IDP</t>
        </list></t>

      <t>Message flow:</t>

      <figure>
        <preamble>1. Client asks for new authorization data to be added to an
        existing RPT</preamble>

        <artwork><![CDATA[POST /rpt_authorization HTTP/1.1
        Host: www.nuveam.com
        Authorization: Bearer jwfLG53^sad$#f
        ...
                
        {
        "rpt": "sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
        "ticket": "016f84e8-f9b9-11e0-bd6f-0021cc6004de"
        }
            ]]></artwork>
      </figure>

      <figure>
        <preamble>2. AS tells the client to redirect the user to the User
        Claims Endpoint</preamble>

        <artwork><![CDATA[HTTP/1.1 403 Forbidden
    Content-Type: application/json
            
    {
    "need_claims":[
    {
    "claim_type":"redirect_required",
    "claim_name":"Redirect Required",
    "claim_value":"https://www.nuveam.com/uma/user_claims?scope=699faf5bf28698
            38e992d57756bc6f&redirect_uri=http%3A%2F%2Fwww.umahostapp.com
            %2Fg%2Foauth%2Fredirect&client_id=ca4453936fa5fda2110b9e589d61ab37"
            }
        ]
    }
        ]]></artwork>
      </figure>

      <figure>
        <preamble>3. Client redirects the user to the User Claims
        Endpoint</preamble>

        <artwork><![CDATA[HTTP/1.1 302 Found
    Location: https://www.nuveam.com/uma/user_claims?scope=699faf5bf2869838e992
    d57756bc6f& redirect_uri=http%3A%2F%2Fwww.umaapp.com%%2Fredirect&client_id=
    ca4453936fa5fda2110b9e589d61ab37&state=32455ddsafas
    ]]></artwork>
      </figure>

      <t>After the user is redirected to the AS, the claims for the user are
      gathered according to one of the defined protocols, such as SAML, OpenID
      Connect or any other protocol implemented by an UMA-compliant
      Authorisation Server. Furthermore, the AS is free to obtain the
      information from a local or remote LDAP, Active Directory or any other
      user datastore (e.g. SQL or NoSQL-based datastore).</t>

      <figure>
        <preamble>4. AS informs the client that new authorization can be added
        and the client is free to request a new RPT</preamble>

        <artwork><![CDATA[HTTP/1.1 302 Found
    Location: https://www.umaapp.com/redirect?access=granted&state=32455ddsafas
          ]]></artwork>
      </figure>

      <figure>
        <preamble>5. AS informs the client that authorization data cannot be
        added</preamble>

        <artwork><![CDATA[HTTP/1.1 302 Found
    Location: https://www.umaapp.com/redirect?access=denied&state=32455ddsafas
          ]]></artwork>
      </figure>

      <t>The message flow presented above can be provided for the following
      set of profiles.</t>

      <section anchor="claims-as-rp-oidc"
               title="Authorization Server Acts as OpenID Connect Relying Party">
        <t>In this claim profile, During this flow, the Authorisation Server
        acts as an OIDC compliant RP. This flow is used in case the policies
        for a particular resource set use any of the existing reserved OIDC
        claims. Importantly, it is the AS that determines if OIDC claims
        should be used for policy evaluation. This information is not shared
        with the client application.</t>

        <t>During this flow the AS acts according to the OpenID Connect
        protocol and this is outside of the UMA specification.</t>
      </section>

      <section anchor="claims-as-rp-saml"
               title="Authorization Server Acts as SAML Relying Party">
        <t>During this flow, the Authorisation Server acts as an SAML
        compliant Service Provider. This flow is used in case the policies for
        a particular resource set require the use of the SAML protocol.
        Importantly, it is the AS that determines if the SAML protocol should
        be used for policy evaluation. This information is not shared with the
        client application.</t>

        <t>During this flow the AS acts according to the SAML protocol and
        this is outside of the UMA specification.</t>
      </section>

      <section anchor="claims-from-local-datastore"
               title="Authorization Server pulls Claim from local user store">
        <t>During this flow and after successful authentication of the RP, the
        AS can pull the required user attributes from a local user datastore
        (e.g. LDAP, Active Directory, and other SQL and NoSQL-datastores).
        This information can be used for policy evaluation.</t>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document makes no request of IANA.</t>
    </section>

    <section anchor="Acknowledgments" title="Acknowledgments">
      <t>The current editor of this specification is Domenico Catalano of
      Oracle. The following people are co-authors:<list style="symbols">
          <t>Maciej Machulak</t>

          <t>Thomas Hardjono</t>

          <t>Eve Maler</t>
        </list></t>

      <t>Additional contributors to this specification include the Kantara UMA
      Work Group participants, a list of whom can be found at <xref
      target="UMAnitarians"></xref>.</t>
    </section>

    <section title="Issues">
      <t>Issues are captured at the project's GitHub site (<eref
      target="https://github.com/xmlgrrl/UMA-Specifications/issues"></eref>).</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      &RFC2119;

      <reference anchor="OAuth2" target="http://tools.ietf.org/html/rfc6749">
        <front>
          <title>The OAuth 2.0 Authorization Framework</title>

          <author initials="D." surname="Hardt">
            <organization>IETF</organization>
          </author>

          <date day="" month="October" year="2012" />
        </front>
      </reference>

      <reference anchor="UMA"
                 target="http://tools.ietf.org/html/draft-hardjono-oauth-umacore">
        <front>
          <title>User-Managed Access (UMA) Profile of OAuth 2.0</title>

          <author initials="T." role="editor" surname="Hardjono">
            <organization>IETF</organization>
          </author>

          <date day="11" month="December" year="2013" />
        </front>
      </reference>

      <reference anchor="OIDCCore"
                 target="http://openid.net/specs/openid-connect-core-1_0.html">
        <front>
          <title>OpenID Connect Core 1.0</title>

          <author initials="N." surname="Sakimura">
            <organization></organization>
          </author>

          <date day="19" month="December" year="2013" />
        </front>
      </reference>

      <reference anchor="UMA-obligations"
                 target="http://kantarainitiative.org/confluence/display/uma/UMA+Trust+Model">
        <front>
          <title>Binding Obligations on UMA Participants</title>

          <author initials="E." surname="Maler">
            <organization></organization>
          </author>

          <date day="25" month="January" year="2013" />
        </front>
      </reference>

      <reference anchor="OAuth-threat"
                 target="http://tools.ietf.org/html/rfc6819">
        <front>
          <title>OAuth 2.0 Threat Model and Security Considerations</title>

          <author initials="T." surname="Lodderstedt">
            <organization></organization>
          </author>

          <date day="" month="January" year="2013" />
        </front>
      </reference>
    </references>

    <references title="Informative References">
      <reference anchor="UMAnitarians"
                 target="http://kantarainitiative.org/confluence/display/uma/Participant+Roster">
        <front>
          <title>UMA Participant Roster</title>

          <author initials="E." surname="Maler">
            <organization>Maler</organization>
          </author>

          <date day="1" month="April" year="2013" />
        </front>
      </reference>
    </references>

    <section anchor="History" title="Document History">
      <t>NOTE: To be removed by RFC editor before publication as an RFC.</t>

      <t>See <eref
      target="http://kantarainitiative.org/confluence/display/uma/UMA+1.0+Core+Protocol"></eref>
      for a list of code-breaking and other major changes made to this
      specification at various revision points.</t>
    </section>
  </back>
</rfc>
