<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='http://xml2rfc.tools.ietf.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml2rfc.tools.ietf.org/authoring/rfc2629.dtd" [
<!ENTITY RFC6749 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC2119 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7159 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7159.xml">
<!ENTITY RFC7591 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7591.xml">
<!ENTITY RFC5785 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5785.xml">
<!ENTITY RFC3986 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC6750 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml">
<!ENTITY RFC6819 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC7009 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7009.xml">
]>
<rfc category="std" docName="oauth-uma-ticket" id="kantara" ipr="kantara"
     target="draft" version="2.0">
  <?xml-stylesheet texttype='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc='yes' ?>

  <?rfc tocdepth='4' ?>

  <?rfc symrefs='yes' ?>

  <?rfc sortrefs='yes' ?>

  <?rfc compact='yes' ?>

  <?rfc subcompact='no' ?>

  <front>
    <title abbrev="UMA Core">User-Managed Access (UMA) Grant for OAuth 2.0
    Authorization</title>

    <author fullname="Eve Maler" initials="E." role="editor" surname="Maler">
      <organization>ForgeRock</organization>

      <address>
        <email>eve.maler@forgerock.com</email>
      </address>
    </author>

    <date day="19" month="April" year="2017" />

    <abstract>
      <t>This specification defines a means for a client, representing a
      requesting party, to use a permission ticket to request an OAuth 2.0
      access token to gain access to a protected resource asynchronously from
      the time a resource owner grants access.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="introduction" title="Introduction">
      <t>This specification defines an extension OAuth 2.0 <xref
      target="RFC6749" /> grant to enable the following two aims of
      User-Managed Access (UMA) 2.0:<list style="symbols">
          <t>The resource owner grants protected-resource access to clients
          used by entities that are in a <spanx>requesting party</spanx> role.
          This enables party-to-party authorization, rather than authorization
          of application access alone.</t>

          <t>The authorization server and resource server interact with the
          client and requesting party in a way that is
          <spanx>asynchronous</spanx> with respect to resource owner
          interactions. This lets a resource owner configure an authorization
          server with access grant rules (policy conditions) at will, rather
          than authorizing access token issuance synchronously just after
          authenticating.</t>
        </list></t>

      <t>For example, a bank customer (resource owner) named Alice with a bank
      account service (resource server) can use a dedicated sharing management
      service (authorization server) hosted by the bank to manage access by a
      spouse Bob, an accounting professional Charline, a tax professional
      David, and an account aggregation company ExplanAccount (requesting
      parties), all using different client applications, to view account data
      and even to give each of them differential access to payment and
      withdrawal functions.</t>

      <t>A third aim of UMA outside the scope of this specification involves
      loosely coupling the interactions of the authorization server and
      resource server to let the resource owner monitor and control access
      grant rules at a central service location over time and at a fine
      grain.</t>

      <section title="Notational Conventions">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
        "OPTIONAL" in this document are to be interpreted as described in
        <xref target="RFC2119" />.</t>

        <t>Unless otherwise noted, all protocol properties and values are case
        sensitive. JSON <xref target="RFC7159" /> data structures defined by
        this specification MAY contain extension properties that are not
        defined in this specification. Any entity receiving or retrieving a
        JSON data structure SHOULD ignore extension properties it is unable to
        understand. Extension names that are unprotected from collisions are
        outside the scope of this specification.</t>
      </section>

      <section anchor="roles" title="Roles">
        <t>The UMA grant enhances the OAuth definitions of entities in order
        to accommodate the requesting party role.<list style="hanging">
            <t hangText="resource owner"><vspace />An entity capable of
            granting access to a protected resource, the "user" in
            User-Managed Access. This is typically an end-user (a natural
            person) but it can also be non-human entity that is treated as a
            person for limited legal purposes (a legal person), such as a
            corporation.</t>

            <t hangText="requesting party"><vspace />A natural or legal person
            that uses a client to seek access to a protected resource. The
            requesting party may or may not be the same party as the resource
            owner.</t>

            <t hangText="client"><vspace />An application that is capable of
            making requests for protected resources with the resource owner's
            authorization and on the requesting party's behalf.</t>

            <t hangText="resource server"><vspace />A server that hosts
            resources on a resource owner's behalf, registers resources for
            protection at an authorization server, and is capable of accepting
            and responding to requests for protected resources.</t>

            <t hangText="authorization server"><vspace />A server that
            protects, on a resource owner's behalf, resources managed at a
            resource server.</t>
          </list></t>
      </section>

      <section anchor="high-level-flow" title="High-Level Flow">
        <t><xref target="protocol-flow" /> shows a sample high-level flow.</t>

        <figure anchor="protocol-flow" title="Protocol Flow Summary">
          <artwork><![CDATA[resource resource        authorization             client requesting
 owner    server             server                   |      party
   |        |     Attempt resource access w/no token 1|        |
   |        |<----------------------------------------|        |
   |        |2 Return AS location, permission ticket  |        |
   |        |---------------------------------------->|        |
   |        |           Request RPT, send permission 3|        |
   |        |                  |   ticket, push claims|        |
   |        |                  |<---------------------|        |
   |        |   Authorization 4|-------+              |        |
   |        |        assessment|<------+              |        |
   |        |                  |5 Return need_info w/ |        |
   |        |                  |redirect_user, permission ticket
   |        |                  |--------------------->|        |
   |        |                  |                      |6       |
   |        |                  |                    Redirect...|
   |        |      for interactive claims gathering...|        |
   |        |                  |     and redirect back|        |
   |        |                  |<---------------------|------->|
   |        |                  |   Request RPT, send 7|        |
   |        |                  |     permission ticket|        |
   |        |                  |<---------------------|        |
   |        |   Authorization 4|-------+              |        |
   |        |        assessment|<------+              |        |
   |        |                  |8 Issue RPT w/PCT (opt)        |
   |        |                  |--------------------->|        |
   |        |          Attempt resource access w/RPT 9|        |
   |        |<----------------------------------------|        |
   |        |10 Protected resource                    |        |
   |        |---------------------------------------->|        |
]]></artwork>
        </figure>

        <t>Following are concepts introduced in the figure:<list
            style="hanging">
            <t hangText="requesting party token (RPT)">An access token
            associated with the UMA grant. An RPT resulting from successful
            issuance is unique to a requesting party, client, authorization
            server, resource server, and resource owner.</t>

            <t hangText="permission ticket">A correlation handle that the
            client provides to the authorization server to enable the latter
            to correlate the current authorization process in which the client
            is seeking an access token.</t>

            <t hangText="permission">Authorized access to a protected resource
            with one or more scopes.</t>

            <t hangText="persisted claims token (PCT)">A correlation handle
            issued by an authorization server that represents a set of claims
            collected during one authorization process, available for a client
            to use in attempting to optimize a future authorization
            process.</t>

            <t hangText="claim">A statement of the value or values of one or
            more attributes of an entity. An authorization server typically
            needs to collect and assess one or more claims of a requesting
            party or client against the policy conditions of a resource owner
            as part of protecting a resource.</t>

            <t hangText="authorization process">The process through which the
            client attempts to obtain an RPT from the authorization server.
            </t>
          </list></t>

        <t>Note: The following aspects of the resource server-client
        relationship are outside the scope of this specification:<list
            style="symbols">
            <t>How the client acquired knowledge of the resource server's
            interface and the specific endpoint of the desired protected
            resource. For example, the resource server might have a
            programmatic API or it might serve up simple web pages, and the
            resource owner might have advertised the endpoint publicly on a
            blog or other website, listed it in a discovery service, or
            emailed a link to a particular intended requesting party.</t>

            <t>The impetus for the client's access attempt. For example, an
            end-user requesting party might have clicked on a publicly
            available thumbnail representation of a graphics-based resource to
            retrieve a protected higher-resolution version.</t>
          </list></t>

        <section anchor="endpoints" title="Endpoints">
          <t>The UMA grant uses the OAuth endpoints in some special ways and
          defines some new endpoints:<list style="symbols">
              <t>The OAuth token endpoint handles client requests for, and
              issues, RPTs. The UMA grant type is defined for use on the
              requesting party's behalf rather than the resource owner's
              behalf.</t>

              <t>The OPTIONAL claims interaction endpoint, defined in <xref
              target="seek-authorization" />, plays a role somewhat similar to
              OAuth's authorization endpoint, but for use by the requesting
              party rather than the resource owner. For interactive
              claims-gathering, the client SHOULD register a <spanx
              style="verb">claims_redirect_uri</spanx> with the authorization
              server (as defined in <xref target="claim-redirect" />).</t>

              <t>The configuration document discovery endpoint, defined in
              <xref target="config-doc-discovery-endpoint" />, enables the
              client to discover other relevant endpoints. The authorization
              server MUST declare all of its endpoints, other than the
              configuration document discovery endpoint itself, in the
              configuration document (see <xref target="as-config" />).</t>
            </list></t>

          <t>Different choices of phase order, claim collection style, and use
          of the <spanx style="verb">error_details</spanx> hints inside <spanx
          style="verb">need_info</spanx> might be best suited for different
          deployment ecosystems. For example, where no pre-established
          relationship is expected between the resource owner's authorization
          server and the requesting party, initial requesting party
          redirection and a <spanx style="verb">redirect_user</spanx> hint may
          be a useful pattern, at which point the authorization server might
          either authenticate the requesting party locally or serve as a
          relying party for a remote identity provider. Where a common
          authorization server also functions as an identity provider for all
          resource owners and requesting parties, having the client push claim
          tokens sourced from that central server itself with a pre-negotiated
          format and contents may be an alternate useful pattern.</t>
        </section>

        <section anchor="authorization-process"
                 title="The Authorization Process">
          <t>Depending on the deployment ecosystem and the sufficiency of
          claims initially provided, the authorization process can be simple
          or complex. The client has several options for influencing the token
          request, as defined in <xref target="uma-grant-type" />.</t>

          <t>The authorization server conducts the authorization process in
          three phases, with some potential variation in order and looping as
          follows:<list style="symbols">
              <t>A claims collection phase. Two kinds of claims collection
              involving the UMA grant are possible: claims pushing by a client
              and interactive claims gathering with an end-user requesting
              party. This phase occurs first in the authorization process in
              the following circumstances:<list style="symbols">
                  <t>When the client redirects an end-user requesting party to
                  the authorization server for interactive claims gathering as
                  its first step after receiving a permission ticket. For this
                  to happen, the client needs the authorization server to have
                  statically declared a claims interaction endpoint in its
                  configuration document.</t>

                  <t>When the client requests an RPT at the token endpoint
                  with pushed claims as its first step after receiving a
                  permission ticket.</t>
                </list></t>

              <t>An authorization assessment phase (as defined in <xref
              target="authorization-assessment" />). This phase involves the
              authorization server assembling and evaluating policy
              conditions, scopes, claims, and other relevant information in
              evidence in order to mitigate access authorization risk. This
              phase occurs first in the authorization process when the client
              requests an RPT at the token endpoint as its first step after
              receiving a permission ticket without pushing any claims.</t>

              <t>An authorization result phase (as defined in <xref
              target="authorization-assessment" />). In this phase, the
              authorization server either returns a success code (as defined
              in <xref target="give-rpt" />), an RPT, and an optional PCT, or
              an error code (as defined in <xref
              target="authorization-failure" />). If the error code is <spanx
              style="verb">need_info</spanx> or <spanx
              style="verb">request_submitted</spanx>, the authorization server
              provides a permission ticket, giving the client an opportunity
              to continue within the same authorization process.</t>
            </list></t>

          <t>The flow in <xref target="high-level-flow" /> illustrates an
          authorization process that starts with claims collection
          (client-pushed claims), followed by authorization assessment
          resulting in a need for more claims, followed by claims collection
          again (interactive claims gathering with the requesting party),
          followed by a second round of authorization assessment resulting in
          RPT issuance.</t>
        </section>
      </section>
    </section>

    <section anchor="as-config" title="Authorization Server Configuration">
      <t>The authorization server supplies configuration information in order
      to document its endpoints and the major conformance options it
      supports.</t>

      <t>Where this specification does not already require optional features
      to be documented, it is RECOMMENDED that authorization server deployers
      document any profiled or extended features explicitly, ideally by
      supplying the URI identifying each UMA profile and extension in its
      <spanx style="verb">uma_profiles_supported</spanx> configuration
      property, and by using extension configuration properties to indicate
      specific usage details as necessary.</t>

      <section anchor="config-properties" title="Configuration Properties">
        <t>The authorization server has configuration properties as follows.
        <list hangIndent="6" style="hanging">
            <t hangText="issuer"><vspace />REQUIRED. A URI with no query or
            fragment component that the authorization server asserts as its
            issuer identifier. This value MUST be identical to the web
            location of the configuration document minus the <spanx
            style="verb">.well-known/uma2-configuration</spanx> path
            components.</t>

            <t hangText="uma_profiles_supported"><vspace />OPTIONAL. UMA
            profiles supported by this authorization server. The property
            value is an array of string values, where each string value is a
            URI identifying an UMA profile.</t>

            <t hangText="registration_endpoint"><vspace />OPTIONAL. The
            endpoint to use for performing dynamic client registration in the
            case of the use of <xref target="RFC7591" /> or <xref
            target="OIDCDynClientReg" />. The presence of this property
            indicates authorization server support for dynamic client
            registration feature; its absence indicates a lack of support. If
            the authorization server supports dynamic client registration, it
            MUST allow client applications to register a <spanx
            style="verb">claims_redirect_uri</spanx> metadata field, as
            defined in <xref target="claim-redirect" />.</t>

            <t hangText="claims_interaction_endpoint"><vspace />OPTIONAL. A
            static endpoint URI at which the authorization server declares
            that it interacts with end-user requesting parties to gather
            claims. If the authorization server also provides a claims
            interaction endpoint URI as part of its <spanx
            style="verb">redirect_user</spanx> hint in a <spanx
            style="verb">need_info</spanx> response to a client on
            authorization failure (see <xref
            target="authorization-failure" />), that value overrides the one
            provided in this configuration property. Providing the static
            endpoint URI is useful for enabling interactive claims gathering
            prior to any pushed-claims flows taking place, so that, for
            example, it is possible to gather requesting party authorization
            interactively for collecting all other claims in a "silent"
            fashion.</t>
          </list></t>
      </section>

      <section anchor="config-doc-discovery-endpoint"
               title="Configuration Document and Discovery Endpoint">
        <t>The authorization server MUST make its configuration properties
        available in a JSON document at a discovery endpoint formed by
        concatenating the string <spanx
        style="verb">/.well-known/uma2-configuration</spanx> to the <spanx
        style="verb">issuer</spanx> configuration property value as defined in
        <xref target="config-properties" />. The syntax and semantics of
        <spanx style="verb">/.well-known</spanx> are defined in <xref
        target="RFC5785" /> and apply to the <spanx
        style="verb">issuer</spanx> value when it contains no path
        component.</t>
      </section>

      <section title="Requests to Authorization Server for Configuration Document">
        <t>Any entity, such as a resource server or client, seeking an
        authorization server configuration document MUST query it using an
        HTTP GET request.</t>

        <figure>
          <preamble>Example:</preamble>

          <artwork><![CDATA[GET /.well-known/uma2-configuration HTTP/1.1
Host: example.com

]]></artwork>
        </figure>

        <t>If the <spanx style="verb">issuer</spanx> value contains a path
        component, the caller MUST remove any terminating slash before
        appending <spanx
        style="verb">/.well-known/uma2-configuration</spanx>.</t>

        <figure>
          <preamble>For example, the caller would make the following request
          to the issuer <spanx
          style="verb">https://example.com/issuer1</spanx>, since the <spanx
          style="verb">issuer</spanx> value contains a path
          component:</preamble>

          <artwork><![CDATA[GET /issuer1/.well-known/uma2-configuration HTTP/1.1
Host: example.com

]]></artwork>
        </figure>
      </section>

      <section title="Authorization Server Response Containing Configuration Document">
        <t>A successful authorization server response to a configuration
        document query MUST use the HTTP 200 (OK) status code and return a
        JSON object using the <spanx style="verb">application/json</spanx>
        content type containing the configuration properties as defined in
        <xref target="config-properties" />.</t>

        <figure>
          <preamble>Example of a configuration document returned in response
          to a query (note the use of <spanx style="verb">https:</spanx> for
          endpoints throughout):</preamble>

          <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
...

{  
   "issuer":"https://example.com",
   "registration_endpoint":"https://as.example.com/dyn_client_reg",
   "claims_interaction_endpoint":"https://as.example.com/claims",
}
]]></artwork>
        </figure>

        <figure>
          <preamble>Example of a configuration document response containing
          the <spanx style="verb">uma_profiles_supported</spanx> configuration
          property indicating that the authorization server supports an UMA
          profile related to the OpenID Connect-based claim token
          format:</preamble>

          <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
...

{  
   "issuer":"https://example.com",
   "uma_profiles_supported":"http://openid.net/specs/openid-connect-core-1_0.html#IDToken",
   "registration_endpoint":"https://as.example.com/dyn_client_reg",
   "claims_interaction_endpoint":"https://as.example.com/claims",
}
]]></artwork>
        </figure>
      </section>
    </section>

    <section anchor="protocol-flow-details-sec" title="Flow Details">
      <t>The recipient of each request message SHOULD respond unless it
      detects a security concern, such as a suspected denial of service attack
      that can be mitigated by rate limiting.</t>

      <section anchor="client-attempts-tokenless-access"
               title="Client Attempts Access to Protected Resource With No Token">
        <t>The client attempts access to a resource that the resource server
        considers protected, without having presented a token for authorized
        access.</t>

        <t>Note: This process does not assume that any policy conditions have
        already been defined at the authorization server. A variety of
        combinations of access attempt flows and resource owner policy
        condition-setting interfaces are possible.</t>

        <figure>
          <preamble>Example of a client request at a protected resource
          carrying no token:</preamble>

          <artwork><![CDATA[GET /users/alice/album/photo.jpg HTTP/1.1
Host: photoz.example.com
...
]]></artwork>
        </figure>
      </section>

      <section anchor="rs-tokenless-response"
               title="Resource Server Responds to Client's Tokenless Access Attempt">
        <t>The resource server responds to the client's tokenless access
        attempt on a protected resource.</t>

        <section anchor="permission-success-to-client"
                 title="Resource Server Response to Client on Permission Request Success">
          <t>If the resource server is able to provide a permission ticket
          from the authorization server, it responds to the client by
          providing a <spanx style="verb">WWW-Authenticate</spanx> header with
          the authentication scheme <spanx style="verb">UMA</spanx>, with the
          <spanx style="verb">issuer</spanx> URI from the authorization
          server's configuration document in an <spanx
          style="verb">as_uri</spanx> parameter and the permission ticket in a
          <spanx style="verb">ticket</spanx> parameter.</t>

          <figure>
            <preamble>For example:</preamble>

            <artwork><![CDATA[HTTP/1.1 401 Unauthorized
WWW-Authenticate: UMA realm="example",
  as_uri="https://as.example.com",
  ticket="016f84e8-f9b9-11e0-bd6f-0021cc6004de"
...
]]></artwork>
          </figure>
        </section>

        <section anchor="permission-failure-to-client"
                 title="Resource Server Response to Client on Permission Request Failure">
          <t>If the resource server is unable to provide a permission ticket
          from the authorization server, then it includes a header of the
          following form in its response to the client: <spanx
          style="verb">Warning: 199 - "UMA Authorization Server
          Unreachable"</spanx>.</t>

          <figure>
            <preamble>For example:</preamble>

            <artwork><![CDATA[HTTP/1.1 403 Forbidden
Warning: 199 - "UMA Authorization Server Unreachable"
...
]]></artwork>
          </figure>

          <t>Without an authorization server location and permission ticket,
          the client is unable to continue.</t>
        </section>
      </section>

      <section anchor="seek-authorization"
               title="Client Seeks RPT on Requesting Party's Behalf">
        <t>The client seeks issuance of an RPT from the token endpoint. Using
        this endpoint is one option for the client in beginning to engage with
        the authorization server as part of an authorization process. The
        other option is to redirect the requesting party for interactive
        claims gathering (see <xref target="claim-redirect" />).</t>

        <t>This process assumes that:<list style="symbols">
            <t>The client has obtained a permission ticket and an
            authorization server location from the resource server.</t>

            <t>The client has discovered the authorization server's
            configuration document and endpoints as needed.</t>

            <t>The client has obtained OAuth client credentials from the
            authorization server, either dynamically through <xref
            target="RFC7591" /> or <xref target="OIDCDynClientReg" />, or
            alternatively through a static process, and is prepared to
            authenticate itself to the token endpoint if appropriate.</t>
          </list></t>

        <section anchor="uma-grant-type"
                 title="Client Request to Authorization Server for RPT">
          <t>The client makes a request to the token endpoint by sending the
          following parameters:<list style="hanging">
              <t hangText="grant_type">REQUIRED. MUST be the value <spanx
              style="verb">urn:ietf:params:oauth:grant-type:uma-ticket</spanx>.</t>

              <t hangText="ticket">REQUIRED. The most recent permission ticket
              received by the client as part of this authorization
              process.</t>

              <t hangText="rpt">OPTIONAL. Supplying an existing RPT gives the
              authorization server the option of upgrading that RPT instead of
              issuing a new one (see <xref
              target="authorization-assessment" /> for more about this
              option). Note: An RPT is bound to a specific resource owner, but
              it is outside the scope of this specification for a protected
              resource's location to reveal the resource owner's identity to
              the client, so the client may not be aware of which RPT it
              received is bound to which resource owner.</t>

              <t hangText="scope">OPTIONAL. A string of space-separated values
              representing requested scopes. For the authorization server to
              consider any requested scope in its assessment, the client MUST
              have pre-registered the same scope with the authorization
              server. The client should consult the resource server&rsquo;s
              API documentation for details about which scopes it can expect
              the resource server's initial returned permission ticket to
              represent as part of the authorization assessment (see <xref
              target="authorization-assessment" />).</t>

              <t hangText="pct">OPTIONAL. If the authorization server
              previously returned a PCT along with an RPT, the client MAY
              include the PCT in order to optimize the process of seeking a
              new RPT. Given that some claims represented by a PCT are likely
              to contain identity information about a requesting party, a
              client supplying a PCT in its RPT request MUST make a best
              effort to ensure that the requesting party using the client now
              is the same as the requesting party that was associated with the
              PCT when it was issued. IThe client MAY use the PCT for the same
              requesting party when seeking an RPT for a different resource or
              at a different resource server entirely. See <xref
              target="sec-consid-pct" /> for additional PCT security
              considerations. See <xref target="give-rpt" /> for the form of
              the authorization server's response with a PCT.</t>

              <t hangText="claim_token_format">OPTIONAL. If this parameter is
              used, it MUST appear together with the <spanx
              style="verb">claim_token</spanx> parameter. A string specifying
              the format of the claim token in which the client is directly
              pushing claims to the authorization server. The string MAY be a
              URI.</t>

              <t hangText="claim_token">OPTIONAL. If this parameter is used,
              it MUST appear together with the <spanx
              style="verb">claim_token_format</spanx> parameter. A string
              containing directly pushed claim information in the indicated
              format, base64url encoded if it is not already so encoded. The
              client MAY provide this information on a first or subsequent
              request to this endpoint. The client and authorization should
              have pre-negotiated any claim token format features that require
              special interpretation. For example, if the referenced format
              equates to OpenID Connect <xref target="OIDCCore" /> ID tokens
              and the claim token contains audience restrictions, the client
              and authorization server should together determine the proper
              audience values that enable successful token consumption (see
              <xref target="trust-push" /> relevant security
              considerations).</t>
            </list></t>

          <figure>
            <preamble>Example of a request message with no optional parameters
            (line breaks are shown only for display convenience):</preamble>

            <artwork><![CDATA[POST /token HTTP/1.1
Host: as.example.com
Authorization: Basic jwfLG53^sad$#f
...
grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Auma-ticket
&ticket=016f84e8-f9b9-11e0-bd6f-0021cc6004de
]]></artwork>
          </figure>

          <figure>
            <preamble>Example of a request message that includes an existing
            RPT for upgrading, a scope being sought that was previously
            registered with the authorization server, and a PCT and a claim
            token for consideration in the authorization process:</preamble>

            <artwork><![CDATA[POST /token HTTP/1.1
Host: as.example.com
Authorization: Basic jwfLG53^sad$#f
...
grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Auma-ticket
&ticket=016f84e8-f9b9-11e0-bd6f-0021cc6004de
&rpt=sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv
&scope=read
&pct=c2F2ZWRjb25zZW50
&claim_token_format=http%3A%2F%2Fopenid.net%2Fspecs%2Fopenid-connect-core-1_0.html%23IDToken
&claim_token=eyj0...
]]></artwork>
          </figure>

          <t>This specification provides a way to define profiles of claim
          token formats for use with UMA (see <xref target="profiles" />). The
          authorization server SHOULD document the profiles it supports in its
          configuration document.</t>
        </section>

        <section anchor="claim-redirect"
                 title="Client Redirect of Requesting Party to Authorization Server for Interactive Claims-Gathering">
          <t>The client redirects an end-user requesting party' to the claims
          interaction endpoint for whatever interactive claims-gathering
          processes the authorization server requires, such as presenting a
          questionnaire, a local or federated login form, or an opportunity to
          authorize persistent storage of claims for use in a later
          authorization process (the latter potentially being associated with
          a PCT). One motivation for such redirection could have been receipt
          of an authorization failure response containing an <spanx
          style="verb">error_details</spanx> structure with a <spanx
          style="verb">redirect_user</spanx> hint (see <xref
          target="authorization-failure" />).</t>

          <t>Redirecting the requesting party to the authorization server is
          one option for the client in beginning to engage with the
          authorization server as part of an authorization process. The other
          option is to seek issuance of an RPT at the token endpoint (see
          <xref target="seek-authorization" />).</t>

          <t>If the client intends to redirect an end-user requesting party to
          the claims interaction endpoint before approaching the token
          endpoint, this process assumes, in addition to the other assumptions
          in <xref target="seek-authorization" />, that the authorization
          server has statically declared its claims interaction endpoint in
          its configuration document.</t>

          <t>The client constructs the request URI by adding the following
          parameters to the query component of the claims interaction endpoint
          URI using the <spanx
          style="verb">application/x-www-form-urlencoded</spanx> format:<list
              style="hanging">
              <t hangText="client_id">REQUIRED. The client's identifier issued
              by the authorization server.</t>

              <t hangText="claims_redirect_uri">OPTIONAL. The URI to which the
              client wishes the authorization server to direct the requesting
              party's user agent after completing its interaction. The URI
              MUST be absolute, MAY contain an <spanx
              style="verb">application/x-www-form-urlencoded</spanx>-formatted
              query parameter component that MUST be retained when adding
              additional parameters, and MUST NOT contain a fragment
              component. The authorization server SHOULD require all clients
              to register their claims redirection endpoint. Claims
              redirection URIs are different from the redirection URIs defined
              in <xref target="RFC6749" /> in that they are intended for the
              exclusive use of requesting parties and not resource owners.
              Therefore, authorization servers MUST NOT redirect requesting
              parties to pre-registered redirection URIs defined in <xref
              target="RFC6749" /> unless such URIs are also pre-registered
              specifically as claims redirection URIs. If the URI is
              pre-registered, this URI MUST exactly match one of the
              pre-registered claims redirection URIs, with the matching
              performed as described in Section 6.2.1 of <xref
              target="RFC3986" /> (Simple String Comparison).</t>

              <t hangText="ticket">REQUIRED. The most recent permission ticket
              received by the client as part of this authorization
              process.</t>

              <t hangText="state">RECOMMENDED. An opaque value used by the
              client to maintain state between the request and callback. The
              authorization server includes this value when redirecting the
              user agent back to the client. The use of this parameter is for
              preventing cross-site request forgery.</t>
            </list></t>

          <figure>
            <preamble>Example of a request issued by a client application
            (line breaks are shown only for display convenience):</preamble>

            <artwork><![CDATA[GET /rqp_claims?client_id=some_client_id&state=abc
&ticket=016f84e8-f9b9-11e0-bd6f-0021cc6004de
&claims_redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fredirect_claims HTTP/1.1
Host: as.example.com
]]></artwork>
          </figure>
        </section>

        <section anchor="redirect-back"
                 title="Authorization Server Redirect of Requesting Party Back to Client After Interactive Claims-Gathering">
          <t>At the conclusion of a successful interaction with the requesting
          party, the authorization server returns the requesting party to the
          client, adding the following parameters to the query component of
          the claims redirection URI using the <spanx
          style="verb">application/x-www-form-urlencoded</spanx> format:<list
              style="hanging">
              <t hangText="ticket">REQUIRED. A permission ticket that allows
              the client to make further requests to the authorization server
              during this authorization process. The value MUST NOT be the
              same as the one the client used to make its request.</t>

              <t hangText="state">OPTIONAL. The same state value that the
              client provided in the request. It MUST be present if and only
              if the client provided it.</t>
            </list></t>

          <t>Note: Interactive claims-gathering processes are out of scope of
          this specification. The purpose of the interaction is for the
          authorization server to gather information for its own authorization
          assessment purposes. This redirection does not involve sending any
          of the information back to the client.</t>

          <t>Prior to its redirecting the end-user requesting party back and
          preparatory to issuing a PCT, the authorization server MAY use the
          interactive claims-gathering process to gather authorization for
          persisting claims across authorization processes.</t>

          <t>The client MUST ignore unrecognized response parameters. If the
          request fails due to a missing, invalid, or mismatching claims
          redirection URI, or if the client identifier is missing or invalid,
          the authorization server SHOULD inform the requesting party of the
          error and MUST NOT automatically redirect the user agent to the
          invalid redirection URI.</t>

          <t>If the request fails for reasons other than a missing or invalid
          claims redirection URI, the authorization server informs the client
          by adding an <spanx style="verb">error</spanx> parameter to the
          query component of the claims redirection URI as defined by Section
          4.1.2.1 of <xref target="RFC6749" />.</t>

          <figure>
            <preamble>Example of a response issued by an authorization server
            (line breaks are shown only for display convenience):</preamble>

            <artwork><![CDATA[GET /redirect_claims?&state=abc
&ticket=cHJpdmFjeSBpcyBjb250ZXh0LCBjb250cm9s HTTP/1.1
Host: client.example.com
]]></artwork>
          </figure>
        </section>

        <section anchor="authorization-assessment"
                 title="Authorization Assessment and Results Determination">
          <t>When the authorization server has received a request for an RPT
          from a client (see <xref target="seek-authorization" />), it
          assesses whether the client is authorized to receive the requested
          RPT and determines the results.</t>

          <t>The authorization server MUST apply the following conceptual
          authorization assessment calculation in determining authorization
          results. Note: As this calculation is internal to authorization
          server operations, its particulars are outside the scope of this
          specification.</t>

          <t>In this assessment calculation, let a set called
          <spanx>ClientRegistered</spanx> stand for the scopes for which the
          client pre-registered at the authorization server, either
          dynamically or through some static process. Let a set called
          <spanx>ClientRequested</spanx> stand for the scopes the client most
          recently requested at the token endpoint. Let a set called
          <spanx>PermissionTicket</spanx> stand for the scopes associated with
          the permission ticket presented by the client at the token
          endpoint.<list style="numbers">
              <t>Determine the set of requested scopes as follows:
              <spanx>RequestedScopes = PermissionTicket &#8746;
              (ClientRequested &#8745; ClientRegistered)</spanx>.</t>

              <t>Determine all operative policy conditions, and claims and
              other relevant information serving as input to them, for each
              scope assocated with <spanx>RequestedScopes</spanx> and evaluate
              its authorization status. Note: Claims and other information
              gathered during one authorization process may become out of date
              in terms of their relevance for future authorization processes.
              The authorization server is responsible for managing such
              relevance wherever information associated with a PCT, or other
              persistently stored information, is used as input to
              authorization, including policy conditions themselves. Note:
              Since the authorization server's policy expression and
              evaluation capabilities are out of scope, any one implementation
              might take a simple or arbitrarily complex form, with varying
              abilities to combine or perform calculations over claims and
              their values. For example, logical operations such as accepting
              "either claim value A or B" as correct may be possible.</t>

              <t>For each scope that passes the evaluation, add it to a set
              called <spanx>CandidateGrantedScopes</spanx>.</t>
            </list></t>

          <t>In the authorization results phase, the authorization server
          examines the <spanx>CandidateGrantedScopes</spanx> set to determine
          whether to issue an RPT and what permissions should be associated
          with it.<list style="symbols">
              <t>If the value of <spanx>CandidateGrantedScopes</spanx> is
              null, the result is authorization failure and the authorization
              server MUST subsequently issue one of the error codes (<xref
              target="authorization-failure" />).</t>

              <t>If the value is non-null and <spanx>CandidateGrantedScopes =
              RequestedScopes</spanx>, then the authorization server MUST
              subsequently respond with a success code and issue an RPT
              (upgrading as appropriate; see below).</t>

              <t>If the value is non-null and <spanx>CandidateGrantedScopes
              &lt; RequestedScopes</spanx>, the authorization server MUST
              subsequently issue either an RPT containing
              <spanx>CandidateGrantedScopes</spanx> (upgrading as appropriate;
              see below), or one of the error codes. The reason for the two
              options is that granting only partial scopes may not be useful
              for the client's and requesting party's purposes in seeking
              authorization for access.</t>
            </list></t>

          <t>The authorization server MAY implement RPT upgrading. It is
          RECOMMENDED for the authorization server to document its practices
          regarding RPT upgrades and to act consistently with respect to RPT
          upgrades so as to enable clients to manage tokens efficiently. If
          the authorization server has implemented RPT upgrading, the client
          has submitted an RPT in its request, and the result is success, the
          authorization server adds the permissions from the client's previous
          RPT to the RPT it is about to issue, setting the value of the <spanx
          style="verb">upgraded</spanx> property in its response containing
          the upgraded RPT to <spanx style="verb">true</spanx> (see <xref
          target="give-rpt" />).</t>

          <t>The following example illustrates authorization assessment and
          partial results: <list style="symbols">
              <t>Assume two resources at a resource server, <spanx
              style="verb">photo1</spanx> with scopes <spanx
              style="verb">view</spanx>, <spanx style="verb">print</spanx>,
              and <spanx style="verb">download</spanx> and <spanx
              style="verb">photo2</spanx> with scopes <spanx
              style="verb">view</spanx>, <spanx style="verb">print</spanx>,
              <spanx style="verb">download</spanx>, and <spanx
              style="verb">link</spanx>.</t>

              <t>The resource owner has set policy conditions that allow
              access to <spanx style="verb">photo1</spanx> only by requesting
              parties that can provide claims proving they are family members,
              and that allow access to <spanx style="verb">photo2</spanx> only
              by requesting parties that can provide claims saying they agree
              not to download, sell, or market any photo.</t>

              <t>The client has pre-registered with the authorization server
              for <spanx style="verb">download</spanx> scope (so
              <spanx>ClientRegistered</spanx> contains <spanx
              style="verb">download</spanx>).</t>

              <t>The client attempts what the resource server interprets as
              <spanx style="verb">view</spanx> access to <spanx
              style="verb">photo1</spanx>.</t>

              <t>The nature of the resource server's API results in the
              authorization server's issued permission ticket representing a
              request for <spanx style="verb">view</spanx> and <spanx
              style="verb">print</spanx> scopes for <spanx
              style="verb">photo1</spanx> on the client's behalf (so
              <spanx>PermissionTicket</spanx> contains <spanx
              style="verb">view</spanx> and <spanx
              style="verb">print</spanx>).</t>

              <t>The client requests <spanx style="verb">download</spanx>
              scope on the requesting party's behalf while requesting an RPT
              from the authorization server (so <spanx>ClientRequested</spanx>
              contains <spanx style="verb">download</spanx>).</t>

              <t>The authorization server determines that
              <spanx>RequestedScopes</spanx> contains <spanx
              style="verb">view</spanx>, <spanx style="verb">print</spanx>,
              and <spanx style="verb">download</spanx>.</t>

              <t>Based on the authorization server's evaluation of policy
              conditions associated with these scopes,
              <spanx>CandidateGrantedScopes</spanx> contains only <spanx
              style="verb">view</spanx> and <spanx style="verb">print</spanx>
              and not <spanx style="verb">download</spanx> (the dynamically
              requested scope), which is less than in
              <spanx>RequestedScopes</spanx>.</t>

              <t>The authorization server has a choice whether to issue an RPT
              in this case.</t>
            </list></t>

          <t>Note: While a reasonable approach for most scenarios is to
          implement the classic security stance of default-deny ("everything
          that is not expressly allowed is forbidden"), corner cases can
          inadvertently result in default-permit behavior. For example, it is
          insufficient simply to assume that all resources have some non-zero
          set of claims required for access, and then accept an empty set of
          supplied claims as sufficient for access.</t>
        </section>

        <section anchor="give-rpt"
                 title="Authorization Server Response to Client on Authorization Success">
          <t>If the authorization server's assessment process results in
          issuance of permissions, it returns an HTTP 200 (OK) status code
          with a response body containing the RPT with which it has associated
          the requested permissions. The authorization server MAY return a
          refresh token. See <xref target="refresh" /> for more information
          about refreshing an RPT.</t>

          <t>The authorization server MAY add the following properties to its
          response:<list style="hanging">
              <t hangText="pct">OPTIONAL. A correlation handle representing
              claims and other information collected during this authorization
              process, which the client is able to present later in order to
              optimize future authorization processes on behalf of a
              requesting party. The PCT MUST be unguessable by an attacker.
              The PCT MUST NOT disclose claims from the requesting party
              directly to possessors of the PCT. Instead, such claims SHOULD
              be associated by reference to the PCT or expressed in an
              encrypted format that can be decrypted only by the authorization
              server that issued the PCT. See <xref target="claim-redirect" />
              for more information about the end-user requesting party
              interaction option. See <xref target="sec-consid-pct" /> for
              additional PCT security considerations.</t>

              <t hangText="upgraded">OPTIONAL. Boolean value. If the client
              submits an RPT in the request and the authorization server
              includes the permissions of the RPT from the request as part of
              the newly issued RPT, then it MUST set this value to <spanx
              style="verb">true</spanx>. If it sets the value to <spanx
              style="verb">false</spanx> or the value is absent, the client
              MUST act as if the newly issued RPT does not include the
              permissions associated with the RPT from the request.</t>
            </list></t>

          <t>The authorization server MAY include any of the parameters
          defined in Section 5.1 of <xref target="RFC6749" /> on its response,
          except that it is NOT RECOMMENDED to include the <spanx
          style="verb">scope</spanx> parameter. This is because RPTs are
          associated with scopes that are associated with specific
          resources.</t>

          <t>If the authorization server is upgrading an RPT, and the RPT
          string is new rather than repeating the RPT provided by the client
          in the request, then the authorization server SHOULD revoke the
          existing RPT, if possible, and the client MUST discard its previous
          RPT. If the authorization server does not upgrade the RPT but issues
          a new RPT, the client MAY retain the existing RPT.</t>

          <figure>
            <preamble>Example:</preamble>

            <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
... 

{  
   "access_token":"sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
   "token_type":"Bearer"
}
]]></artwork>
          </figure>

          <figure>
            <preamble>Example with a PCT and an <spanx
            style="verb">upgraded</spanx> property in the response:</preamble>

            <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
...

{  
   "access_token":"sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
   "token_type":"Bearer",
   "pct":"c2F2ZWRjb25zZW50",
   "upgraded":true
}
]]></artwork>
          </figure>
        </section>

        <section anchor="authorization-failure"
                 title="Authorization Server Response to Client on Authorization Failure">
          <t>If the client's request to the token endpoint is insufficient for
          granting an RPT, the authorization server responds using an error
          code and corresponding HTTP status code.<list style="hanging">
              <t hangText="invalid_grant">If the provided ticket was not found
              at the authorization server, or the provided ticket has expired,
              or the client is not authorized to have these permissions added,
              or any other original reasons to use this error response are
              found as defined in <xref target="RFC6749" />, the authorization
              server responds with the HTTP 400 (Bad Request) status code.</t>

              <t hangText="invalid_scope">At least one of the scopes included
              in the request does not match an available scope for any of the
              resources associated with requested permissions for the
              permission ticket provided by the client. The authorization
              server responds with the HTTP 400 (Bad Request) status code.</t>

              <t hangText="request_submitted">The authorization server
              requires intervention by the resource owner to determine whether
              the client is authorized to have these permissions. The
              authorization server responds with the HTTP 403 (Forbidden)
              status code. It MUST include a <spanx
              style="verb">ticket</spanx> object.<list style="hanging">
                  <t hangText="ticket">REQUIRED. A permission ticket that
                  allows the client to make a further request to the
                  authorization server's token endpoint as part of this same
                  authorization process, likely some time later in "polling"
                  fashion, when the resource owner might have completed some
                  approval (or denial) action. The value MUST NOT be the same
                  as the one the client used to make its request.</t>
                </list></t>

              <t hangText="need_info">The authorization server needs
              additional information in order to determine whether the client
              is authorized to have these permissions. The authorization
              server responds with the HTTP 403 (Forbidden) status code. It
              MUST include a <spanx style="verb">ticket</spanx> object, and it
              MAY also include an <spanx style="verb">error_details</spanx>
              object.<list style="hanging">
                  <t hangText="ticket">REQUIRED. A permission ticket that
                  allows the client to make a further request to the
                  authorization server's token endpoint as part of this same
                  authorization process, potentially immediately. The value
                  MUST NOT be the same as the one the client used to make its
                  request.</t>

                  <t hangText="error_details">OPTIONAL. Provides hints about
                  information the authorization server needs to perform
                  authorization assessment. On receiving such hints, the
                  client has the opportunity to engage, or engage the
                  requesting party, in claims collection flows. At least one
                  of its two sub-properties MUST be supplied.<list
                      style="hanging">
                      <t hangText="required_claims">An array containing
                      objects that describe the required claims, with the
                      following properties:<list style="hanging">
                          <t hangText="name">OPTIONAL. A string (which MAY be
                          a URI) representing the name of the claim; the "key"
                          in a key-value pair.</t>

                          <t hangText="friendly_name">OPTIONAL. A string that
                          provides a more human-readable form of the
                          attribute's name, which may be useful as a "display
                          name" for use in user interfaces in cases where the
                          actual name is complex or opaque, such as an OID or
                          a UUID.</t>

                          <t hangText="claim_type">OPTIONAL. A string,
                          indicating the expected interpretation of the
                          provided claim value. The string MAY be a URI.</t>

                          <t hangText="claim_token_format">OPTIONAL. An array
                          of strings specifying a set of acceptable formats
                          for a token pushed by the client containing this
                          claim (see <xref target="uma-grant-type" />). Any
                          one of the referenced formats would satisfy the
                          authorization server's requirements. Each string MAY
                          be a URI.</t>

                          <t hangText="issuer">OPTIONAL. An array of strings
                          specifying a set of acceptable issuing authorities
                          for the claim. Any one of the referenced authorities
                          would satisfy the authorization server's
                          requirements. Each string MAY be a URI.</t>
                        </list></t>

                      <t hangText="redirect_user">The claims interaction
                      endpoint URI to which to redirect the end-user
                      requesting party at the authorization server to continue
                      the process of interactive claims gathering. For
                      example, the authorization server may require the
                      requesting party to fill out a CAPTCHA to help prove
                      humanness. If the requesting party is not an end-user,
                      then no client action would be possible on receiving the
                      hint. If a static claims interaction endpoint was also
                      provided in the authorization server's configuration
                      document, then this value overrides the static value.
                      Providing a value in this response might be appropriate,
                      for example, if the URI needs to be customized per
                      requesting party.</t>
                    </list></t>
                </list></t>
            </list></t>

          <figure>
            <preamble>Example when the ticket was not found, or the ticket has
            expired, or the client's request for authorization has failed
            outright:</preamble>

            <artwork><![CDATA[HTTP/1.1 400 Bad Request
Content-Type: application/json
Cache-Control: no-store
...

{  
   "error":"invalid_grant"
}
]]></artwork>
          </figure>

          <figure>
            <preamble>Example of a <spanx style="verb">need_info</spanx>
            response with a full set of <spanx
            style="verb">error_details</spanx> hints:</preamble>

            <artwork><![CDATA[HTTP/1.1 403 Forbidden
Content-Type: application/json
Cache-Control: no-store
...

{  
   "error":"need_info",
   "ticket":"ZXJyb3JfZGV0YWlscw==",
   "error_details":{  
      "required_claims":[  
         {  
            "name":"email23423453ou453",
            "friendly_name":"email",
            "claim_type":"urn:oid:0.9.2342.19200300.100.1.3",
            "claim_token_format":[  
               "http://openid.net/specs/openid-connect-core-1_0.html#IDToken"
            ],
            "issuer":[  
               "https://example.com/idp"
            ]
         }
      ],
      "redirect_user":"https://as.example.com/rqp_claims?id=2346576421"
   }
}
]]></artwork>
          </figure>
        </section>
      </section>

      <section anchor="client-rpt-attempt"
               title="Client Attempts Access to Protected Resource With RPT">
        <t>The client attempts to access the protected resource, now in
        possession of an RPT.</t>

        <figure>
          <preamble>Example of a client request at a protected resource
          carrying an RPT:</preamble>

          <artwork><![CDATA[GET /users/alice/album/photo.jpg HTTP/1.1
Authorization: Bearer sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv
Host: photoz.example.com
...
]]></artwork>
        </figure>
      </section>

      <section anchor="rs-rpt-response"
               title="Resource Server Responds to Client&rsquo;s Access Attempt With RPT">
        <t>The resource server responds to the client's access attempt on a
        protected resource that bore an RPT.</t>

        <t>This process concludes the flow.</t>
      </section>

      <section anchor="refresh" title="Authorization Server Refreshes RPT">
        <t>As noted in <xref target="give-rpt" />, when issuing an RPT, the
        authorization server MAY also issue a refresh token.</t>

        <t>In a typical access token refreshing flow, providing the <spanx
        style="verb">scope</spanx> parameter in the request has a token
        downscoping effect. However, if the client includes the <spanx
        style="verb">scope</spanx> parameter when providing a refresh token
        that is associated with an RPT, the effect is undefined.</t>
      </section>

      <section anchor="token-revocation"
               title="Client Requests Token Revocation">
        <t>If the authorization server presents a token revocation endpoint as
        defined by <xref target="RFC7009" />, the client MAY use the endpoint
        to request revocation of an RPT (access token), refresh token, or PCT
        previously issued to it on behalf of a requesting party. This
        specification defines the following token type hint value:<list
            style="hanging">
            <t hangText="pct">Helps the authorization server optimize lookup
            of a PCT for revocation.</t>
          </list></t>
      </section>
    </section>

    <section anchor="profiles"
             title="Specifying Additional Profiles and Extensions">
      <t>For implementation interoperability and to serve particular
      deployment scenarios, third parties may want to define profiles of UMA
      that restrict its available options. Further, third parties may want to
      define profiles of companion technologies to fit interoperably within
      the UMA framework, for example, claim token formats suitable for claim
      pushing (see <xref target="uma-grant-type" />) or protocol alternatives
      to HTTP. Finally, it is possible to use the natural extensibility within
      this specification's messaging formats to enable third parties to define
      extensions that serve adjacent use cases.</t>

      <t>This section provides guidelines for third parties wishing to specify
      UMA-related profiles and extensions. It is RECOMMENDED for authorization
      server deployers to document any profiled or extended features
      explicitly (see <xref target="as-config" /> for details).</t>

      <t>In all cases, it is RECOMMENDED for profiles and extensions to
      document the following information:<list style="symbols">
          <t>Specify a uniquely identifying URI.</t>

          <t>Identify the responsible author and provide postal or electronic
          contact information.</t>

          <t>Supply references to any previous version that this version
          updates or obsoletes.</t>

          <t>Define any additional or changed error states, including, for
          claim token formats, whether <spanx
          style="verb">error_details</spanx> hints are modified or
          extended.</t>

          <t>Specify any modified or new interactions between endpoint
          entities and any extension properties used in messages.</t>

          <t>For any new access token types, specify the keyword to be used in
          HTTP Authorization headers.</t>

          <t>Specify any conformance and interoperability considerations.</t>

          <t>Specify any additional security and privacy considerations.</t>
        </list></t>
    </section>

    <section anchor="sec-consid" title="Security Considerations">
      <t>This specification relies mainly on OAuth 2.0 security mechanisms as
      well as transport-level encryption. Thus, implementers are strongly
      advised to read <xref target="BCP195" /> and the security considerations
      in <xref target="RFC6749" /> (Section 10) and <xref target="RFC6750" />
      (Section 5) along with the security considerations of any other OAuth
      token-defining specifications in use, along with the entire <xref
      target="RFC6819" /> specification, and apply the countermeasures
      described therein. As well, implementers should take into account the
      security considerations in all other normatively referenced
      specifications.</t>

      <t>The following sections describe additional security
      considerations.</t>

      <section anchor="rqp-threats" title="Requesting Party Threats">
        <t>This section discusses threats related to UMA's nature as a
        protocol enabling party-to-party sharing of protected resource access;
        that is, enabling requesting parties who are not the resource owner to
        gain authorized access to protected resources.</t>

        <t>For privacy considerations related to requesting parties, see <xref
        target="rqp-privacy" />.</t>

        <section anchor="redirect-threats"
                 title="Requesting Party Redirection and Impersonation">
          <t>Like ordinary OAuth redirection, UMA redirection for the purpose
          of gathering claims from an end-user requesting party (described in
          <xref target="claim-redirect" />) creates the potential for
          cross-site request forgery (CSRF) through an open redirect if the
          authorization server does not force the client to pre-register its
          claims redirection endpoint, and server-side artifact tampering if
          the client does not avail itself of the state parameter. The client
          SHOULD check that the ticket value returned by an authorization
          server after a claims redirect is completed has not been maliciously
          changed, for example by a man in the browser, by using the state
          parameter. (See <xref target="UMA-Impl" /> for advice on ways to
          accomplish this.) Sections 4.4.1.8, 4.4.2.5, and 5.3.5 of <xref
          target="RFC6819" /> are apropos for the UMA claims-gathering
          redirection flow as well.</t>

          <t>When a client redirects an end-user requesting party to the
          claims interaction endpoint, the client provides no a priori context
          to the authorization server about which user is appearing at the
          endpoint, other than implicitly through the permission ticket. Since
          the authorization server is free to gather any claims it wishes, the
          effect is to "late-bind" them to the permission ticket and the state
          string provided by the client, with the effect of enabling the
          authorization server not to trust client-asserted claims. This is a
          desirable result and reflects one reason why the authorization
          server might choose to demand use of the redirect flow over the push
          flow. However, the client has the opportunity to switch end-users --
          say, enabling malicious end-user Carlos to impersonate the original
          end-user Bob, who might be represented by a PCT already in that
          client's possession and might even have authorized the issuance of
          that PCT -- after the redirect completes and before it returns to
          the token endpoint to seek permissions.</t>

          <t>Another issue concerns the exposure of an RPT to a requesting
          party, which could maliciously pass the token to an unauthorized
          party.</t>

          <t>To mitigate requesting-party switching and RPT exposure threats,
          consider the following strategies.<list style="symbols">
              <t>Require that the requesting party legitimately represent the
              wielder of the bearer token on a legal or contractual level.
              This solution does not reduce the risk from a technical
              perspective.</t>

              <t>The authorization server, possibly with input from the
              resource owner, can implement tighter time-to-live strategies
              around the permissions in RPTs. This is a classic approach with
              bearer tokens that helps to limit a malicious party's ability to
              intercept and use the bearer token. In the same vein, the
              authorization server could require claims to have a reasonable
              degree of freshness (which would require a custom claims
              profile).</t>

              <t>A stronger strategy is to gather claims interactively from an
              end-user requesting party that demonstrate that some
              sufficiently strong level of authentication was performed.</t>
            </list></t>
        </section>

        <section anchor="sec-consid-pct"
                 title="Requesting Party Claims and Persisted Claims Tokens">
          <t>A PCT is similar to a refresh token in that it carries extra
          power over the usage of an RPT. The authorization server and client
          MUST keep PCTs confidential in transit and storage, and MUST NOT
          share any PCT with any other entity other than the issuer or issued
          client, respectively. The authorization server MUST maintain the
          binding between a PCT and the client to which it was issued.</t>

          <t>Given that a PCT represents a set of requesting party claims, a
          client supplying a PCT in its RPT request MUST make a best effort to
          ensure that the requesting party using the client now is the same as
          the requesting party that was associated with the PCT when it was
          issued. Different clients will have different capabilities in this
          respect; for example, some applications are single-user and perform
          no local authentication, associating all PCTs with the "current
          user", while others might have more sophisticated authentication and
          user mapping capabilities.</t>
        </section>
      </section>

      <section title="Strengthening RPT Protection Using Proof of Possession">
        <t>After the client's access attempt on a protected resource, assuming
        the client sent an RPT of the bearer style such as those defined by
        <xref target="RFC6750" />, the resource server will have received from
        the client the entire secret portion of the token. This specification
        assumes only bearer-type tokens because they are the only type
        standardized as of this writing. However, to strengthen protection for
        RPTs using a proof-of-possession approach, the resource server could
        receive an RPT that consists of only a cryptographically signed token
        identifier, and then to validate the signature, it could submit the
        token identifier to the token introspection endpoint to obtain the
        necessary key information. The details of this usage are out of scope
        of this specification.</t>
      </section>

      <section anchor="cred-guessing" title="Credentials-Guessing">
        <t>The authorization server MUST prevent attackers from guessing
        permission tickets and PCTs.</t>
      </section>

      <section anchor="trust-considerations"
               title="Profiles and Trust Establishment">
        <t>Parties that are operating and using UMA software entities have
        opportunities to establish agreements about the parties' rights and
        responsibilities on a legal or contractual level, along with common
        interpretations of UMA constructs for consistent and expected software
        behavior. These agreements can be used to improve the parties'
        respective security postures, and written profiles are a key mechanism
        for conveying and enforcing these agreements. <xref
        target="profiles" /> discusses profiling. See <xref
        target="UMA-legal" /> to learn about tools to assist in the legal and
        contractual elements of deploying UMA-enabled services.</t>

        <section anchor="trust-push"
                 title="Requirements for Trust When Clients Push Claim Tokens">
          <t>This section discusses the threats surrounding client claim
          pushing (see <xref target="uma-grant-type" />).</t>

          <t>Because claim tokens of any format typically contain audience
          restrictions and an authorization server would typically not be in
          the primary audience for a claim token held or generated by a
          client, it is RECOMMENDED to document how the client, authorization
          server, and any additional ecosystem entities and parties will
          establish a trust relationship and communicate any required keying
          material in a claim token profile, as described in <xref
          target="profiles" />. Authorization servers are RECOMMENDED not to
          accept claim tokens pushed by untrusted clients and not to ignore
          audience restrictions found in claim tokens pushed by clients.</t>

          <t>In the special circumstance when an authorization server is
          colocated with an OpenID Provider for the requesting parties within
          a deployment ecosystem, then it is able to act as an OpenID Relying
          Party for itself. This circumstance presents an opportunity for a
          technical optimization of the requirement for trust because the
          authorization server itself issued the OAuth client credentials for
          the client in question, and could reasonably be the singular <spanx
          style="verb">aud</spanx> value target in an OpenID Connect ID Token
          pushed by the client to the token endpoint.</t>
        </section>
      </section>
    </section>

    <section anchor="priv-consid" title="Privacy Considerations">
      <t>UMA has the following privacy considerations.</t>

      <section anchor="rqp-privacy"
               title="Requesting Party Information at the Authorization Server">
        <t>The primary privacy duty of UMA's design is to the resource owner.
        However, privacy considerations affect the requesting party as well,
        having to do with the nature of claims. Claims are likely to contain
        personal, personally identifiable, and sensitive information,
        particularly in the case of requesting parties who are end-users.</t>

        <t>If the authorization server supports persisting claims for any
        length of time (for example, to support issuance of PCTs), then it
        SHOULD provide a secure and privacy-protected means of storing claim
        data. It is also RECOMMENDED for the authorization server to use an
        interactive claims-gathering flow to ask an end-user requesting party
        for authorization to persist their claims before issuing a PCT. A
        requesting party who provides claims to an authorization server once
        having been redirected there is less susceptible to privacy-destroying
        behavior. Otherwise, certain flows such as claim pushing and
        interactive federated sign-in with automatic login will tend to be
        invisible to the user if they have not consciously authorized the
        possibility.</t>
      </section>

      <section title="Resource Owner Information at the Resource Server">
        <t>Since the client's initial request for a protected resource is made
        in an unauthorized and unauthenticated context, such requests are by
        definition open to all users. The response to that request includes
        the authorization server's location to enable the client to request an
        access token and present claims. If it is known out of band that
        authorization server is owned and controlled by a single user, or
        visiting the authorization server contains other identifying
        information, then an unauthenticated and unauthorized client would be
        able to tell which resource owner is associated with a given resource.
        Other information about the resource owner, such as organizational
        affiliation or group membership, may be gained from this transaction
        as well.</t>
      </section>

      <section title="Profiles and Trust Establishment">
        <t>Parties that are operating and using UMA software entities have
        opportunities to establish agreements about mutual rights,
        responsibilities, and common interpretations of UMA constructs for
        consistent and expected software behavior. These agreements can be
        used to improve the parties' respective privacy postures. See <xref
        target="trust-considerations" /> for more information. Additional
        considerations related to Privacy by Design concepts are discussed in
        <xref target="UMA-PbD" />.</t>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document makes the following requests of IANA.</t>

      <section title="Well-Known URI Registration">
        <t>This specification registers the well-known URI defined in <xref
        target="config-properties" />, as required by Section 5.1 of <xref
        target="RFC5785" />.</t>

        <section title="Registry Contents">
          <t>
            <list style="symbols">
              <t>URI suffix: <spanx
              style="verb">uma2-configuration</spanx></t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref
              target="config-doc-discovery-endpoint" /> in this document</t>
            </list>
          </t>
        </section>
      </section>

      <section title="OAuth 2.0 Extension Grant Parameters Registration">
        <t>This specification registers the parameters defined in <xref
        target="uma-grant-type" />, as required by Section 11.2 of <xref
        target="RFC6749" />.</t>

        <section title="Registry Contents">
          <t>
            <list style="symbols">
              <t>Parameter name: <spanx style="verb">ticket</spanx></t>

              <t>Parameter usage location: client request, token endpoint</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="uma-grant-type" /> in
              this document</t>
            </list>
          </t>

          <t>
            <list style="symbols">
              <t>Parameter name: <spanx style="verb">rpt</spanx></t>

              <t>Parameter usage location: client request, token endpoint</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="uma-grant-type" /> in
              this document</t>
            </list>
          </t>

          <t>
            <list style="symbols">
              <t>Parameter name: <spanx style="verb">claim_tokens</spanx></t>

              <t>Parameter usage location: client request, token endpoint</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="uma-grant-type" /> in
              this document</t>
            </list>
          </t>

          <t>
            <list style="symbols">
              <t>Parameter name: <spanx style="verb">pct</spanx></t>

              <t>Parameter usage location: client request, token endpoint</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="uma-grant-type" /> in
              this document</t>
            </list>
          </t>

          <t>
            <list style="symbols">
              <t>Parameter name: <spanx style="verb">pct</spanx></t>

              <t>Parameter usage location: authorization server response,
              token endpoint</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="give-rpt" /> in this
              document</t>
            </list>
          </t>

          <t>
            <list style="symbols">
              <t>Parameter name: <spanx style="verb">upgraded</spanx></t>

              <t>Parameter usage location: authorization server response,
              token endpoint</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="give-rpt" /> in this
              document</t>
            </list>
          </t>
        </section>
      </section>

      <section title="OAuth 2.0 Extensions Error Registration">
        <t>This specification registers the errors defined in <xref
        target="authorization-failure" />, as required by Section 11.4 of
        <xref target="RFC6749" />.</t>

        <section title="Registry Contents">
          <t>
            <list style="symbols">
              <t>Error name: <spanx style="verb">request_submitted</spanx></t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="uma-grant-type" /> in
              this document</t>

              <t>Error usage location: authorization server response, token
              endpoint</t>
            </list>
          </t>

          <t>
            <list style="symbols">
              <t>Error name: <spanx style="verb">need_info</spanx> (and its
              subsidiary <spanx style="verb">ticket</spanx> and <spanx
              style="verb">error_details</spanx> structures)</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="uma-grant-type" /> in
              this document</t>

              <t>Error usage location: authorization server response, token
              endpoint</t>
            </list>
          </t>
        </section>
      </section>

      <section title="OAuth Token Type Hints Registration">
        <t>This specification registers the errors defined in <xref
        target="token-revocation" />, as required by Section 4.1.2 of <xref
        target="RFC7009" />.</t>

        <section title="Registry Contents">
          <t>
            <list style="symbols">
              <t>Hint value: <spanx style="verb">pct</spanx></t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="token-revocation" /> in
              this document</t>
            </list>
          </t>
        </section>
      </section>
    </section>

    <section anchor="Acknowledgments" title="Acknowledgments">
      <t>The following people made significant text contributions to the
      specification:<list style="symbols">
          <t>Paul C. Bryan, ForgeRock US, Inc. (former editor)</t>

          <t>Domenico Catalano, Oracle (former author)</t>

          <t>Mark Dobrinic, Cozmanova</t>

          <t>George Fletcher, AOL</t>

          <t>Thomas Hardjono, MIT (former editor)</t>

          <t>Lukasz Moren, Cloud Identity Ltd</t>

          <t>Christian Scholz, COMlounge GmbH (former editor)</t>

          <t>Mike Schwartz, Gluu</t>

          <t>Cigdem Sengul, Nominet UK</t>

          <t>Jacek Szpot, Newcastle University</t>
        </list></t>

      <t>Additional contributors to this specification include the Kantara UMA
      Work Group participants, a list of whom can be found at <xref
      target="UMAnitarians" />.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <reference anchor="BCP195" target="https://tools.ietf.org/html/bcp195">
        <front>
          <title>Recommendations for Secure Use of Transport Layer Security
          (TLS) and Datagram Transport Layer Security (DTLS)</title>

          <author initials="Y." surname="Sheffer">
            <organization />
          </author>

          <date day="" month="May" year="2015" />
        </front>
      </reference>

      <reference anchor="OIDCCore"
                 target="http://openid.net/specs/openid-connect-core-1_0.html">
        <front>
          <title>OpenID Connect Core 1.0 incorporating errata set 1</title>

          <author initials="N." surname="Sakimura">
            <organization />
          </author>

          <date day="8" month="November" year="2014" />
        </front>
      </reference>

      <reference anchor="OIDCDynClientReg"
                 target="http://openid.net/specs/openid-connect-registration-1_0.html">
        <front>
          <title>OpenID Connect Dynamic Client Registration 1.0 incorporating
          errata set 1</title>

          <author initials="N." surname="Sakimura">
            <organization>OpenID Foundation</organization>
          </author>

          <date day="8" month="November" year="2014" />
        </front>
      </reference>

      &RFC2119;

      &RFC3986;

      &RFC5785;

      <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6415"?>

      <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6711"?>

      &RFC6749;

      &RFC6750;

      &RFC6819;

      &RFC7159;

      <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7519"?>

      &RFC7591;

      &RFC7009;
    </references>

    <references title="Informative References">
      <reference anchor="UMA-Impl"
                 target="https://kantarainitiative.org/confluence/display/uma/UMA+Implementer%27s+Guide">
        <front>
          <title>UMA Implementer's Guide</title>

          <author initials="E." surname="Maler" />

          <date day="" month="" year="2017" />
        </front>
      </reference>

      <reference anchor="UMA-PbD"
                 target="https://kantarainitiative.org/confluence/display/uma/Privacy+by+Design+Implications+of+UMA">
        <front>
          <title>Privacy by Design Implications of UMA</title>

          <author initials="E." surname="Maler" />

          <date day="" month="" year="2013" />
        </front>
      </reference>

      <reference anchor="UMAnitarians"
                 target="https://kantarainitiative.org/confluence/display/uma/Participant+Roster">
        <front>
          <title>UMA Participant Roster</title>

          <author initials="E." surname="Maler">
            <organization>Maler</organization>
          </author>

          <date day="" month="" year="2017" />
        </front>
      </reference>

      <reference anchor="UMA-legal"
                 target="http://kantarainitiative.org/confluence/display/uma/UMA+Legal">
        <front>
          <title>UMA Legal</title>

          <author initials="E." surname="Maler">
            <organization>Maler</organization>
          </author>

          <date day="" month="" year="2017" />
        </front>
      </reference>
    </references>
  </back>
</rfc>
