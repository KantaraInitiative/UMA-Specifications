<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml.resource.org/authoring/rfc2629.dtd" [
<!ENTITY RFC2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2617 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2617.xml">
<!ENTITY UMA PUBLIC "" "http://kantarainitiative.org/confluence/display/uma/Home">
<!ENTITY UMAreqs PUBLIC "" "http://kantarainitiative.org/confluence/display/uma/UMA+Requirements">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC4627 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml">
]>
<rfc category="std" docName="draft-uma-enhanced-claims-gathering-security-ext" id="kantara" ipr="kantara" version="1.0" target="publicReview">
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc='yes' ?>

  <?rfc tocdepth='4' ?>

  <?rfc symrefs='yes' ?>

  <?rfc sortrefs='yes' ?>

  <?rfc compact='yes' ?>

  <?rfc subcompact='no' ?>

  <front>
    <title abbrev="UMA Core">Enhanced Claims-Gathering Security Extension</title>

    <author fullname="Maciej Machulak" initials="M." surname="Machulak" role="editor">
      <organization>Synergetics</organization>
      
      <address>
        <email>maciej.machulak@synergetics.be</email>
      </address>
    </author>

    <author fullname="Eve Maler" initials="E." surname="Maler">
      <organization>ForgeRock</organization>
      
      <address>
        <email>eve.maler@forgerock.com</email>
      </address>
    </author>

    <author fullname="Domenico Catalano" initials="D." surname="Catalano">
      <organization>Oracle</organization>

      <address>
        <email>domenico.catalano@oracle.com</email>
      </address>
    </author>

    <date day="25" month="February" year="2016" />

    <abstract>
      <t>User-Managed Access (UMA) is a profile of OAuth 2.0. UMA defines how
      resource owners can control protected-resource access by clients
      operated by arbitrary requesting parties, where the resources reside on
      any number of resource servers, and where a centralized authorization
      server governs access based on resource owner policy. This specification
      defines a security enhancement extension for those UMA deployments where
      an authorization server provides support for a requesting party claims
      endpoint. The extension defined in this specification allows the parties
      of the UMA protocol to achieve a higher level of security when
      engaging in the claims-gathering phase of the UMA protocol.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="introduction" title="Introduction">
      <t>User-Managed Access <xref target="UMA"></xref> is a profile of OAuth 2.0.
        UMA defines how
        resource owners can control protected-resource access by clients
        operated by arbitrary requesting parties, where the resources reside on
        any number of resource servers, and where a centralized authorization
        server governs access based on resource owner policy. 
        This specification
        defines a security enhancement extension for those UMA deployments where
        an authorization server provides support for a requesting party claims
        endpoint. The extension defined in this specification allows the parties
        of the UMA protocol to achieve a higher level of security when
        engaging in the claims-gathering phase of the UMA protocol.</t>
      
      <t>In UMA, the authorization server has many options for gathering
        requesting party claims. For example, it could interact with an
        end-user requesting party directly, or accept claims delivered by
        a client, or perform a lookup in some external system. The process
        is extensible and can have dependencies on the type of requesting
        party (for example, natural person or legal person) or client (for
        example, browser, native app, or autonomously running web
        service).
      </t>
      
      <t>
        When the authorization server requires direct interaction with
        an end-user requesting party as part of its claims-gathering process (for example,
        by indicating through the <spanx style="verb">redirect_user</spanx> hint
        included as part of the authorization server response to client on authorization
        failure) then a client has the option to <spanx>redirect</spanx>
        an end-user requesting
        party to the requesting party claims endpoint. In this case, the
        authorization server might be a relying party in a federated
        identity interaction, or it might connect to a directory or other
        user repository, or even interact with the user in other ways, such
        as presenting a questionnaire in a web form.</t>
      
      <t>As part of the redirect request, the client uses a permission ticket
      value that it obtained from the resource server. Such permission ticket
      behaves as session cookies and it is used to bind several actions together in a sequence -
      it binds the registration of a permission by the resource server at the authorization
      server as well as interaction of the client with the authorization server
      during the claims-gathering flow.
      </t>
      
      <t>permission ticket -> link to authorization state</t>
      
      <t>In order to avoid the possibility for an attacker to use any phishing
      techniuqes that would trick the legitimate end user acting in the role of
      a requesting party to authorize a particular permission, it is necessary
      to implement specific extensions which are currently not in the scope
      of the UMA specification. This extensions to the UMA protocol are
      defined in this specification.</t>

      <section title="Notational Conventions">
        <t>The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT',
        'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this
        document are to be interpreted as described in <xref
        target="RFC2119"></xref>.</t>

        <t>Unless otherwise noted, all the protocol properties and values are
        case sensitive.</t>
      </section>
    </section>

    <section anchor="security_consideration" title="Security Considerations">
      <t>Description of the attack.
      </t>
    </section>

    <section anchor="framework" title="Enhanced Claims-Gathering Security Extension">
      <t>In order to prevent the situation (which is described in Section <xref target="security_consideration"></xref>)
        from happening,
        it is necessary to adapt the UMA deployment specifically as described further
        in this section. In particular, this specification extension waives the
        requirement that permission tickets must not be single use. Instead, it
        imposes a requirement that permission tickets MUST be single use. This
        change affects the following sections of the UMA protocol specification <xref target="UMA"></xref>:<list>
          <t style="symbols">Section 3.2.2</t>
          <t style="symbols">Section 3.6.3</t>
          <t style="symbols">...</t>
        </list>
      </t>
      
        <t>
        No other requirements of the UMA protocol specification are affected.</t>
      
        <t>
        UMA deployments that implement this specification have to make the permission
        ticket unpredictable and different at each step of the UMA protocol. The ticket
        parameter value that points to a particular permission registered by the
        resource server MUST be updated whenever a ticket is submitted by the client
        to the Authorization Server. This makes each permission ticket a nonce that
        is linked with the registered permission. Importantly, once the ticket value
        is changed the old value MUST be invalidated. As such, the permission registered
        by the resource server at the authorization server MUST be linked with a single
        permission ticket only. In this scheme, a client can only present a given ticket
        one time, and receives a new value to replace with it upon presentation. This
        works for the claims gathering workflow as well as the re-authentication workflow
        described in Section 3.6.1 of the UMA specification <xref target="security_consideration"></xref>.</t>
        
      <t>
        New ticket values MUST be generated by the authorization server and communicated
        back to the client at two points:<list
          style="symbols">
          <t>In the JSON response from the RPT endpoint (see Section 3.5.1 in <xref
            target="UMA" />)</t>
          
          <t>In the query parameters on the <spanx style="verb">claims_redirect_uri</spanx>
            after a claims-gathering workflow (see Section 3.6.3 in <xref
              target="UMA" />)</t>
        </list>
      </t>
      <t>
        Clients MUST discard their existing tickets upon use and use only the latest ticket
        value from the authorization server at each subsequent step. If a ticket is used more
        than once then the Authorization Server must respond to the client with an
        invalid_ticket error response.</t>
        
      

      

      

      <section anchor="IANA" title="IANA Considerations">
        <t>This document makes no request of IANA.</t>
      </section>

      <section anchor="Acknowledgments" title="Acknowledgments">

        <t>Additional contributors to this specification include the Kantara
        UMA Work Group participants, a list of whom can be found at <xref
        target="UMAnitarians"></xref>.</t>
      </section>

      <section title="Issues">
        <t>Issues are captured at the project's GitHub site (<eref
        target="https://github.com/KantaraInitiative/wg-uma/issues"></eref>).</t>
      </section>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      &RFC2119;

      <reference anchor="UMA"
                 target="http://docs.kantarainitiative.org/uma/draft-uma-core.html">
        <front>
          <title>User-Managed Access (UMA) Profile of OAuth 2.0</title>

          <author initials="T." role="editor" surname="Hardjono">
            <organization>IETF</organization>
          </author>

          <date day="11" month="December" year="2013" />
        </front>
      </reference>
    </references>

    <references title="Informative References">
      <reference anchor="UMAnitarians"
                 target="http://kantarainitiative.org/confluence/display/uma/Participant+Roster">
        <front>
          <title>UMA Participant Roster</title>

          <author initials="E." surname="Maler">
            <organization>Maler</organization>
          </author>

          <date day="" month="July" year="2014" />
        </front>
      </reference>
    </references>

    <section anchor="History" title="Document History">
      <t>NOTE: To be removed by RFC editor before publication as an RFC.</t>

      <t>See <eref
      target="http://kantarainitiative.org/confluence/display/uma/UMA+1.0+Core+Protocol"></eref>
      for a list of code-breaking and other major changes made to this
      specification at various revision points.</t>
    </section>
  </back>
</rfc>
