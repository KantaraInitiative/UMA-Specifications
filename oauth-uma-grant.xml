<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='http://xml2rfc.tools.ietf.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml2rfc.tools.ietf.org/authoring/rfc2629.dtd" [
<!ENTITY RFC6749 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC2119 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7159 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7159.xml">
<!ENTITY RFC7591 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7591.xml">
<!ENTITY RFC5785 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5785.xml">
<!ENTITY RFC3986 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC6750 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml">
<!ENTITY RFC6819 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC7009 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7009.xml">
]>
<rfc category="std" docName="oauth-uma-grant" id="kantara" ipr="kantara"
     target="draft" version="2.0">
  <?xml-stylesheet texttype='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc='yes' ?>

  <?rfc tocdepth='4' ?>

  <?rfc symrefs='yes' ?>

  <?rfc sortrefs='yes' ?>

  <?rfc compact='yes' ?>

  <?rfc subcompact='no' ?>

  <front>
    <title abbrev="">User-Managed Access (UMA) 2.0 Grant for OAuth 2.0
    Authorization</title>

    <author fullname="Eve Maler" initials="E." role="editor" surname="Maler">
      <organization>ForgeRock</organization>

      <address>
        <email>eve.maler@forgerock.com</email>
      </address>
    </author>

    <author fullname="Maciej Machulak" initials="M." surname="Machulak">
      <organization>Self</organization>

      <address>
        <email>maciej.machulak@gmail.com</email>
      </address>
    </author>

    <author fullname="Justin Richer" initials="J." surname="Richer">
      <organization>Bespoke Engineering</organization>

      <address>
        <email>justin@bspk.io</email>
      </address>
    </author>

    <date day="17" month="May" year="2017" />

    <abstract>
      <t>This specification defines a means for a client, representing a
      requesting party, to use a permission ticket to request an OAuth 2.0
      access token to gain access to a protected resource asynchronously from
      the time a resource owner authorizes access.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="introduction" title="Introduction">
      <t>This specification defines an extension OAuth 2.0 <xref
      target="RFC6749" /> grant. The grant enhances OAuth capabilities in the
      following ways:<list style="symbols">
          <t>The resource owner authorizes protected-resource access to
          clients used by entities that are in a <spanx>requesting
          party</spanx> role. This enables party-to-party authorization,
          rather than authorization of application access alone.</t>

          <t>The authorization server and resource server interact with the
          client and requesting party in a way that is
          <spanx>asynchronous</spanx> with respect to resource owner
          interactions. This lets a resource owner configure an authorization
          server with authorization grant rules (policy conditions) at will,
          rather than authorizing access token issuance synchronously just
          after authenticating.</t>
        </list></t>

      <t>For example, bank customer (resource owner) Alice with a bank account
      service (resource server) can use a sharing management service
      (authorization server) hosted by the bank to manage access to her
      various protected resources by spouse Bob, accounting professional
      Charline, and bank account aggregation company DecideAccount, all using
      different client applications, to view account data and get access to
      payment or withdrawal functions.</t>

      <t>An OPTIONAL second specification, <xref target="UMAFedAuthz" />,
      defines a means for an UMA-enabled authorization server and resource
      server to be loosely coupled, or federated, in a resource owner context.
      This specification, together with <xref target="UMAFedAuthz" />,
      constitutes UMA 2.0.</t>

      <section title="Notational Conventions">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
        "OPTIONAL" in this document are to be interpreted as described in
        <xref target="RFC2119" />.</t>

        <t>Unless otherwise noted, all parameter names and values are case
        sensitive. JSON <xref target="RFC7159" /> data structures defined in
        this specification MAY contain extension parameters that are not
        defined in this specification. Any entity receiving or retrieving a
        JSON data structure SHOULD ignore extension parameters it is unable to
        understand. Extension names that are unprotected from collisions are
        outside the scope of this specification.</t>
      </section>

      <section anchor="roles" title="Roles">
        <t>The UMA grant enhances the OAuth definitions of entities in order
        to accommodate the requesting party role.<list style="hanging">
            <t hangText="resource owner"><vspace />An entity capable of
            granting access to a protected resource, the "user" in
            User-Managed Access. The resource owner MAY be an end-user
            (natural person) or MAY be a non-human entity treated as a person
            for limited legal purposes (legal person), such as a
            corporation.</t>

            <t hangText="requesting party"><vspace />A natural or legal person
            that uses a client to seek access to a protected resource. The
            requesting party may or may not be the same party as the resource
            owner.</t>

            <t hangText="client"><vspace />An application that is capable of
            making requests for protected resources with the resource owner's
            authorization and on the requesting party's behalf.</t>

            <t hangText="resource server"><vspace />A server that hosts
            resources on a resource owner's behalf and is capable of accepting
            and responding to requests for protected resources.</t>

            <t hangText="authorization server"><vspace />A server that
            protects, on a resource owner's behalf, resources hosted at a
            resource server.</t>
          </list></t>
      </section>

      <section anchor="high-level-flow" title="Abstract Flow">
        <t>The UMA grant enhances the abstract protocol flow of OAuth.</t>

        <t><xref target="protocol-flow" /> shows an example flow. The steps
        and artifacts chosen in this figure show a high degree of variety for
        illustration purposes.</t>

        <figure anchor="protocol-flow" title="Example Flow">
          <artwork><![CDATA[requesting                             authorization resource resource
  party        client                      server     server   owner
    |            |                           |          |        |
    |            |                           |(May set policy    |
    |            |                           |conditions anytime)|
    |            |                           |< - - - - - - - - -|
    |            |Resource request (no access token)    |        |
    |            |------------------------------------->|        |
    |            |401 response with new permission      |        |
    |            |ticket, AS location        |          |        |
    |            |<-------------------------------------|        |
    |            |Authz request with ticket, |          |        |
    |            |claim token (push claims)  |          |        |
    |            |-------------------------->|          |        |
    |            |                      +----|Authz     |        |
    |            |                      +--->|assessment|        |
    |            |403 response with rotated  |          |        |
    |            |ticket, need_info error,   |          |        |
    |            |redirect_user hint         |          |        |
    |            |<--------------------------|          |        |
    |Redirect    |                           |          |        |
    |user with   |                           |          |        |
    |ticket      |                           |          |        |
    |<-----------|                           |          |        |
    |Follow redirect to AS                   |          |        |
    |--------------------------------------->|          |        |
    |(Interactive claims gathering)          |          |        |
    |<- - - - - - - - - - - - - - - - - - - >|          |        |
    |Redirect back with rotated ticket       |          |        |
    |<---------------------------------------|          |        |
    |Follow      |                           |          |        |
    |redirect to |                           |          |        |
    |client      |                           |          |        |
    |----------->|                           |          |        |
    |            |Authz request with ticket  |          |        |
    |            |-------------------------->|          |        |
    |            |                      +----|Authz     |        |
    |            |                      +--->|assessment|        |
    |            |Authz response with access |          |        |
    |            |token (RPT) and PCT        |          |        |
    |            |<--------------------------|          |        |
    |            |Resource request with access token    |        |
    |            |(RPT)                      |          |        |
    |            |------------------------------------->|        |
    |            |Protected resource         |          |        |
    |            |<-------------------------------------|        |
]]></artwork>
        </figure>

        <t>Following are key concepts relevant to this specification:<list
            style="hanging">
            <t hangText="requesting party token (RPT)">An access token
            associated with the UMA grant. An RPT is unique to a requesting
            party, client, authorization server, resource server, and resource
            owner.</t>

            <t hangText="permission ticket">A correlation handle, initially
            passed to the client by the resource server and subsequently
            exchanged during the authorization process between the client and
            authorization server.</t>

            <t hangText="permission">Authorized access to a particular
            resource with one or more scopes bound to that resource. A
            permission ticket represents some number of requested permissions.
            An RPT represents some number of granted permissions. The client
            is not aware of the permission concept.</t>

            <t hangText="persisted claims token (PCT)">A correlation handle
            issued by an authorization server that represents a set of claims
            collected during one authorization process, available for a client
            to use in attempting to optimize a future authorization
            process.</t>

            <t hangText="claim">A statement of the value or values of one or
            more attributes of an entity. The authorization server typically
            needs to collect and assess one or more claims of the requesting
            party or client against policy conditions as part of protecting a
            resource. The two methods available for UMA claims collection are
            claim pushing and interactive claims gathering. Note: Claims
            collection might involve authentication for unique user
            identification, but depending on policy conditions might
            additionally or instead involve the collection of non-uniquely
            identifying attributes, authorization for some action (for
            example, see <xref target="redirect-back" />), or other statements
            of agreement.</t>

            <t hangText="claim token">A package of claims provided directly by
            the client to the authorization server through claim pushing.</t>

            <t hangText="authorization process">The process through which the
            client requests an RPT from the authorization server.</t>
          </list></t>

        <t>Note: The following aspects of the resource server-client
        relationship are outside the scope of this specification:<list
            style="symbols">
            <t>How the client acquired knowledge of the resource server's
            interface and the specific endpoint of the desired protected
            resource. For example, the resource server might have a
            programmatic API or it might serve up simple web pages, and the
            resource owner might have advertised the endpoint publicly on a
            blog or other website, listed it in a discovery service, or
            emailed a link to a particular intended requesting party.</t>

            <t>The impetus for the client's resource request. For example, an
            end-user requesting party might have clicked on a publicly
            available thumbnail representation of a graphics-based resource to
            retrieve a protected higher-resolution version.</t>
          </list></t>

        <section anchor="authorization-process" title="Authorization Process">
          <t>The authorization server conducts the authorization process in
          three phases, with some potential variation in order and looping as
          follows:<list style="symbols">
              <t>An UMA-based claims collection phase. Claims pushing by a
              client is defined in <xref target="uma-grant-type" />, and
              interactive claims gathering with an end-user requesting party
              is defined in <xref target="claim-redirect" />. This phase
              occurs first in the authorization process in the following
              circumstances:<list style="symbols">
                  <t>When the client redirects an end-user requesting party to
                  the authorization server for interactive claims gathering as
                  its first step after receiving a permission ticket. For this
                  to happen, the client needs the authorization server to have
                  statically declared a claims interaction endpoint in its
                  discovery document.</t>

                  <t>When the client requests an RPT at the token endpoint
                  with pushed claims as its first step after receiving a
                  permission ticket.</t>
                </list></t>

              <t>An authorization assessment phase (as defined in <xref
              target="authorization-assessment" />). Authorization assessment
              involves the authorization server assembling and evaluating
              policy conditions, scopes, claims, and any other relevant
              information sourced outside of UMA claims collection flows, in
              order to perform policy evaluation to mitigate access
              authorization risk. This phase occurs first in the authorization
              process when the client requests an RPT at the token endpoint as
              its first step after receiving a permission ticket without
              pushing any claims.</t>

              <t>An authorization results phase (as defined in <xref
              target="authorization-assessment" />). In this phase, the
              authorization server either returns a success code (as defined
              in <xref target="give-rpt" />), an RPT, and an optional PCT, or
              an error code (as defined in <xref
              target="authorization-failure" />). If the error code is <spanx
              style="verb">need_info</spanx> or <spanx
              style="verb">request_submitted</spanx>, the authorization server
              provides a permission ticket, giving the client an opportunity
              to continue within the same authorization process. In the case
              of a <spanx style="verb">need_info</spanx> error, the
              authorization server can provide hints about what the client
              should do next.</t>
            </list></t>

          <t>Different choices of phase order, claim collection style, and use
          of hints inside <spanx style="verb">need_info</spanx> might be best
          suited for different deployment ecosystems. For example, where no
          pre-established relationship is expected between the resource
          owner's authorization server and the requesting party, initial
          requesting party redirection (initiated with a redirection hint) may
          be a useful pattern, at which point the authorization server might
          either authenticate the requesting party locally or serve as a
          relying party for a remote identity provider. Where a common
          authorization server also functions as an identity provider for all
          resource owners and requesting parties, having the client push claim
          tokens sourced from that central server itself with a pre-negotiated
          format and contents may be a useful pattern.</t>
        </section>
      </section>
    </section>

    <section anchor="as-config" title="Authorization Server Metadata">
      <t>The authorization server supplies metadata in a discovery document to
      declare its endpoints. The client uses this discovery document to
      discover these endpoints for use in the flows defined in <xref
      target="protocol-flow-details-sec" />.</t>

      <t>The authorization server MUST make a discovery document available.
      The structure of the discovery document MUST conform to that defined in
      <xref target="OAuthMeta" />. The discovery document MUST be available at
      an endpoint formed by concatenating the string <spanx
      style="verb">/.well-known/uma2-configuration</spanx> to the <spanx
      style="verb">issuer</spanx> metadata value defined in <xref
      target="OAuthMeta" />, using the well-known URI syntax and semantics
      defined in <xref target="RFC5785" />. In addition to the metadata
      defined in <xref target="OAuthMeta" />, this specification defines the
      following metadata for inclusion in the discovery document:<list
          hangIndent="6" style="hanging">
          <t hangText="claims_interaction_endpoint"><vspace />OPTIONAL. A
          static endpoint URI at which the authorization server declares that
          it interacts with end-user requesting parties to gather claims. If
          the authorization server also provides a claims interaction endpoint
          URI as part of its <spanx style="verb">redirect_user</spanx> hint in
          a <spanx style="verb">need_info</spanx> response to a client on
          authorization failure (see <xref target="authorization-failure" />),
          that value overrides this metadata value. Providing the static
          endpoint URI is useful for enabling interactive claims gathering
          prior to any pushed-claims flows taking place, so that, for example,
          it is possible to gather requesting party authorization
          interactively for collecting all other claims in a "silent"
          fashion.</t>

          <t hangText="uma_profiles_supported"><vspace />OPTIONAL. UMA
          profiles and extensions supported by this authorization server. The
          value is an array of string values, where each string value is a URI
          identifying an UMA profile or extension. As discussed in <xref
          target="profiles" />, it is RECOMMENDED for an authorization server
          supporting a profile or extension related to UMA to supply the
          specification's identifying URI (if any) here.</t>
        </list></t>

      <t>Following are additional requirements related to metadata:<list
          style="hanging">
          <t hangText="registration_endpoint"><vspace />If the authorization
          server supports dynamic client registration, it MUST allow client
          applications to register <spanx
          style="verb">claims_redirect_uri</spanx> metadata, as defined in
          <xref target="claim-redirect" />.</t>
        </list></t>
    </section>

    <section anchor="protocol-flow-details-sec" title="Flow Details">
      <section anchor="client-attempts-tokenless-access"
               title="Client Requests Resource With No Token">
        <t>The client requests a protected resource, without having presented
        a token for authorized access.</t>

        <t>Note: This process does not assume that any relevant policy
        conditions have already been defined at the authorization server.</t>

        <t>Note: For an example of how the resource server can put resources
        under the protection of an authorization server, see <xref
        target="UMAFedAuthz" />.</t>

        <figure>
          <preamble>Example of a client request at a protected resource
          carrying no token:</preamble>

          <artwork><![CDATA[GET /users/alice/album/photo.jpg HTTP/1.1
Host: photoz.example.com
...
]]></artwork>
        </figure>
      </section>

      <section anchor="rs-tokenless-response"
               title="Resource Server Responds to Client's Tokenless Access Attempt">
        <t>The resource server responds to the client's tokenless resource
        request.</t>

        <t>The resource server MUST obtain a permission ticket from the
        authorization server to provide in its response, but the means of
        doing so is outside the scope of this specification. For an example of
        how the resource server can obtain the permission ticket, see <xref
        target="UMAFedAuthz" />.</t>

        <t>The process of choosing what permissions to request from the
        authorization server may require interpretation and mapping of the
        client's resource request. The resource server SHOULD request a set of
        permissions with scopes that is reasonable for the client&rsquo;s
        resource request.</t>

        <t>Note: In order for the resource server to know which authorization
        server to approach for the permission ticket and on which resource
        owner's behalf, it needs to derive the necessary information using
        cues provided by the structure of the API where the resource request
        was made, rather than by an access token. Commonly, this information
        can be passed through the URI, headers, or body of the client's
        request. Alternatively, the entire interface could be dedicated to the
        use of a single resource owner and protected by a single authorization
        server.</t>

        <section anchor="permission-success-to-client"
                 title="Resource Server Response to Client on Permission Request Success">
          <t>If the resource server is able to provide a permission ticket
          from the authorization server, it responds to the client by
          providing a <spanx style="verb">WWW-Authenticate</spanx> header with
          the authentication scheme <spanx style="verb">UMA</spanx>, with the
          <spanx style="verb">issuer</spanx> URI from the authorization
          server's discovery document in an <spanx style="verb">as_uri</spanx>
          parameter and the permission ticket in a <spanx
          style="verb">ticket</spanx> parameter.</t>

          <figure>
            <preamble>For example:</preamble>

            <artwork><![CDATA[HTTP/1.1 401 Unauthorized
WWW-Authenticate: UMA realm="example",
  as_uri="https://as.example.com",
  ticket="016f84e8-f9b9-11e0-bd6f-0021cc6004de"
...
]]></artwork>
          </figure>

          <section anchor="ticket-management"
                   title="Permission Ticket Management">
            <t>The authorization server MUST make permission ticket values
            unguessable by resource servers and clients. Within these
            constraints, however, the authorization server MAY format the
            ticket however it chooses, for example either as a random string
            that references data held on the server or by including data
            within the ticket itself.</t>

            <t>Permission tickets MUST be single-use. This prevents
            susceptibility to a session fixation attack.</t>

            <t>The authorization server MUST invalidate a permission ticket
            when the client presents the permission ticket to either the token
            endpoint or the claims interaction endpoint, or when the
            permission ticket expires, whichever occurs first.</t>
          </section>
        </section>

        <section anchor="permission-failure-to-client"
                 title="Resource Server Response to Client on Permission Request Failure">
          <t>If the resource server is unable to provide a permission ticket
          from the authorization server, then it includes a header of the
          following form in its response to the client: <spanx
          style="verb">Warning: 199 - "UMA Authorization Server
          Unreachable"</spanx>.</t>

          <figure>
            <preamble>For example:</preamble>

            <artwork><![CDATA[HTTP/1.1 403 Forbidden
Warning: 199 - "UMA Authorization Server Unreachable"
...
]]></artwork>
          </figure>

          <t>Without an authorization server location and permission ticket,
          the client is unable to continue.</t>
        </section>
      </section>

      <section anchor="seek-authorization"
               title="Client Seeks RPT on Requesting Party's Behalf">
        <t>The client seeks issuance of an RPT from the token endpoint. Using
        this endpoint is one option for the client in beginning to engage with
        the authorization server as part of an authorization process. The
        other option is to redirect the requesting party for interactive
        claims gathering (see <xref target="claim-redirect" />).</t>

        <t>This process assumes that:<list style="symbols">
            <t>The client has obtained a permission ticket and an
            authorization server location from the resource server.</t>

            <t>The client has retrieved the authorization server's discovery
            document as needed.</t>

            <t>The client has obtained OAuth client credentials from the
            authorization server, either dynamically through <xref
            target="RFC7591" /> or <xref target="OIDCDynClientReg" />, or
            alternatively through a static process, and is prepared to
            authenticate itself to the token endpoint if appropriate.</t>
          </list></t>

        <section anchor="uma-grant-type"
                 title="Client Request to Authorization Server for RPT">
          <t>The client makes a request to the token endpoint by sending the
          following parameters:<list style="hanging">
              <t hangText="grant_type">REQUIRED. MUST be the value <spanx
              style="verb">urn:ietf:params:oauth:grant-type:uma-ticket</spanx>.</t>

              <t hangText="ticket">REQUIRED. The most recent permission ticket
              received by the client as part of this authorization
              process.</t>

              <t hangText="claim_token">OPTIONAL. If this parameter is used,
              it MUST appear together with the <spanx
              style="verb">claim_token_format</spanx> parameter. A string
              containing directly pushed claim information in the indicated
              format, base64url encoded if it is not already so encoded. The
              client MAY provide this information on a first or subsequent
              request to this endpoint. The client and authorization server
              together may need to determine proper audience restrictions for
              the claim token prior to claim pushing.</t>

              <t hangText="claim_token_format">OPTIONAL. If this parameter is
              used, it MUST appear together with the <spanx
              style="verb">claim_token</spanx> parameter. A string specifying
              the format of the claim token in which the client is directly
              pushing claims to the authorization server. The string MAY be a
              URI. Examples of claim token formats include <xref
              target="OIDCCore" /> ID Tokens and SAML assertions.</t>

              <t hangText="pct">OPTIONAL. If the authorization server
              previously returned a PCT along with an RPT, the client MAY
              include the PCT in order to optimize the process of seeking a
              new RPT. Given that some claims represented by a PCT are likely
              to contain identity information about a requesting party, a
              client supplying a PCT in its RPT request MUST make a best
              effort to ensure that the requesting party using the client now
              is the same as the requesting party that was associated with the
              PCT when it was issued. The client MAY use the PCT for the same
              requesting party when seeking an RPT for a different resource or
              at a different resource server entirely. See <xref
              target="sec-consid-pct" /> for additional PCT security
              considerations. See <xref target="give-rpt" /> for the form of
              the authorization server's response with a PCT.</t>

              <t hangText="rpt">OPTIONAL. Supplying an existing RPT gives the
              authorization server the option of upgrading that RPT instead of
              issuing a new one (see <xref
              target="authorization-assessment" /> for more about this
              option).</t>

              <t hangText="scope">OPTIONAL. A string of space-separated values
              representing requested scopes. For the authorization server to
              consider any requested scope in its assessment, the client MUST
              have pre-registered the same scope with the authorization
              server. The client should consult the resource server&rsquo;s
              API documentation for details about which scopes it can expect
              the resource server's initial returned permission ticket to
              represent as part of the authorization assessment (see <xref
              target="authorization-assessment" />).</t>
            </list></t>

          <figure>
            <preamble>Example of a request message with no optional parameters
            (line breaks are shown only for display convenience):</preamble>

            <artwork><![CDATA[POST /token HTTP/1.1
Host: as.example.com
Authorization: Basic jwfLG53^sad$#f
...
grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Auma-ticket
&ticket=016f84e8-f9b9-11e0-bd6f-0021cc6004de
]]></artwork>
          </figure>

          <figure>
            <preamble>Example of a request message that includes an existing
            RPT for upgrading, a scope being sought that was previously
            registered with the authorization server, and a PCT and a claim
            token for consideration in the authorization process:</preamble>

            <artwork><![CDATA[POST /token HTTP/1.1
Host: as.example.com
Authorization: Basic jwfLG53^sad$#f
...
grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Auma-ticket
&ticket=016f84e8-f9b9-11e0-bd6f-0021cc6004de
&claim_token=eyj0...
&claim_token_format=http%3A%2F%2Fopenid.net%2Fspecs%2Fopenid-connect-core-1_0.html%23IDToken
&pct=c2F2ZWRjb25zZW50
&rpt=sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv
&scope=read
]]></artwork>
          </figure>

          <t>This specification provides a means to define profiles of claim
          token formats for use with UMA (see <xref target="profiles" />). The
          authorization server SHOULD document the profiles it supports in its
          discovery document.</t>
        </section>

        <section anchor="claim-redirect"
                 title="Client Redirect of Requesting Party to Authorization Server for Interactive Claims-Gathering">
          <t>The client redirects an end-user requesting party to the
          authorization server's claims interaction endpoint for one or more
          interactive claims-gathering processes as the authorization server
          requires. These can include direct interactions, such as account
          registration and authentication local to the authorization server as
          an identity provider, filling out a questionnaire, or asking the
          user to authorize persistent storage of any collected claims on a
          persistent basis to optimize future authorization processes; this
          last example could potentially be associated with the authorization
          server's subsequent issuance of a PCT. Interactions could also
          involve further redirection, for example, for federated (such as
          social) authentication at a remote identity provider, and other
          federated claims gathering.</t>

          <t>Redirecting the requesting party to the authorization server is
          one option for the client in beginning to engage with the
          authorization server as part of an authorization process. The client
          may have initiated redirection on receiving an authorization failure
          response containing a <spanx style="verb">redirect_user</spanx> hint
          (see <xref target="authorization-failure" />). The other option is
          to seek issuance of an RPT at the token endpoint (see <xref
          target="seek-authorization" />).</t>

          <t>If the client intends to redirect an end-user requesting party to
          the claims interaction endpoint before approaching the token
          endpoint, this process assumes, in addition to the other assumptions
          in <xref target="seek-authorization" />, that the authorization
          server has statically declared its claims interaction endpoint in
          its discovery document.</t>

          <t>The client constructs the request URI by adding the following
          parameters to the query component of the claims interaction endpoint
          URI using the <spanx
          style="verb">application/x-www-form-urlencoded</spanx> format:<list
              style="hanging">
              <t hangText="client_id">REQUIRED. The client's identifier issued
              by the authorization server.</t>

              <t hangText="ticket">REQUIRED. The most recent permission ticket
              received by the client as part of this authorization
              process.</t>

              <t hangText="claims_redirect_uri">OPTIONAL only if the client
              has pre-registered a single claims redirection URI; if the
              client has pre-registered multiple claims redirection URIs or
              has pre-registered no claims redirection URI, it is REQUIRED.
              The URI to which the client wishes the authorization server to
              direct the requesting party's user agent after completing its
              interaction. The URI MUST be absolute, MAY contain an <spanx
              style="verb">application/x-www-form-urlencoded</spanx>-formatted
              query parameter component that MUST be retained when adding
              additional parameters, and MUST NOT contain a fragment
              component. The client SHOULD pre-register its <spanx
              style="verb">claims_redirect_uri</spanx> with the authorization
              server, and the authorization server SHOULD require all clients
              to pre-register their claims redirection endpoints. Claims
              redirection URIs are different from the redirection URIs defined
              in <xref target="RFC6749" /> in that they are intended for the
              exclusive use of requesting parties and not resource owners.
              Therefore, authorization servers MUST NOT redirect requesting
              parties to pre-registered redirection URIs defined in <xref
              target="RFC6749" /> unless such URIs are also pre-registered
              specifically as claims redirection URIs. If the URI is
              pre-registered, this URI MUST exactly match one of the
              pre-registered claims redirection URIs, with the matching
              performed as described in Section 6.2.1 of <xref
              target="RFC3986" /> (Simple String Comparison).</t>

              <t hangText="state">RECOMMENDED. An opaque value used by the
              client to maintain state between the request and callback. The
              authorization server includes this value when redirecting the
              user agent back to the client. The use of this parameter is for
              preventing cross-site request forgery (see <xref
              target="csrf" /> for further security information).</t>
            </list></t>

          <figure>
            <preamble>Example of a request issued by a client application
            (line breaks are shown only for display convenience):</preamble>

            <artwork><![CDATA[GET /rqp_claims?client_id=some_client_id
&ticket=016f84e8-f9b9-11e0-bd6f-0021cc6004de
&state=abc
&claims_redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fredirect_claims HTTP/1.1
Host: as.example.com
]]></artwork>
          </figure>
        </section>

        <section anchor="redirect-back"
                 title="Authorization Server Redirect of Requesting Party Back to Client After Interactive Claims-Gathering">
          <t>At the conclusion of a successful interaction with the requesting
          party, the authorization server returns the requesting party to the
          client, adding the following parameters to the query component of
          the claims redirection URI using the <spanx
          style="verb">application/x-www-form-urlencoded</spanx> format:<list
              style="hanging">
              <t hangText="ticket">REQUIRED. A permission ticket that allows
              the client to make further requests to the authorization server
              during this authorization process. The value MUST NOT be the
              same as the one the client used to make its request.</t>

              <t hangText="state">OPTIONAL. The same state value that the
              client provided in the request. It MUST be present if and only
              if the client provided it (see <xref target="csrf" /> for
              further security information).</t>
            </list></t>

          <t>Note: Interactive claims-gathering processes are outside the
          scope of this specification. The purpose of the interaction is for
          the authorization server to gather information for its own
          authorization assessment purposes. This redirection does not involve
          sending any of the information back to the client.</t>

          <t>Prior to its redirecting the end-user requesting party back and
          preparatory to issuing a PCT, the authorization server MAY use the
          interactive claims-gathering process to gather authorization for
          persisting claims across authorization processes.</t>

          <t>The client MUST ignore unrecognized response parameters. If the
          request fails due to a missing, invalid, or mismatching claims
          redirection URI, or if the client identifier is missing or invalid,
          the authorization server SHOULD inform the requesting party of the
          error and MUST NOT automatically redirect the user agent to the
          invalid redirection URI.</t>

          <t>If the request fails for reasons other than a missing or invalid
          claims redirection URI, the authorization server informs the client
          by adding an <spanx style="verb">error</spanx> parameter to the
          query component of the claims redirection URI as defined in Section
          4.1.2.1 of <xref target="RFC6749" />.</t>

          <figure>
            <preamble>Example of a response issued by an authorization server
            (line breaks are shown only for display convenience):</preamble>

            <artwork><![CDATA[GET /redirect_claims?&ticket=cHJpdmFjeSBpcyBjb250ZXh0LCBjb250cm9s
&state=abc HTTP/1.1
Host: client.example.com
]]></artwork>
          </figure>
        </section>

        <section anchor="authorization-assessment"
                 title="Authorization Assessment and Results Determination">
          <t>When the authorization server has received a request for an RPT
          from a client (see <xref target="seek-authorization" />), it
          assesses whether the client is authorized to receive the requested
          RPT and determines the results.</t>

          <t>The authorization server MUST apply the following conceptual
          authorization assessment calculation in determining authorization
          results. Note: As this calculation is internal to authorization
          server operations, its particulars are outside the scope of this
          specification.</t>

          <t>In this assessment calculation, let a set called
          <spanx>ClientRegistered</spanx> stand for the scopes for which the
          client pre-registered at the authorization server, either
          dynamically or through some static process. Let a set called
          <spanx>ClientRequested</spanx> stand for the scopes the client most
          recently requested at the token endpoint. Let a set called
          <spanx>PermissionTicket</spanx> stand for the scopes associated with
          the permission ticket presented by the client at the token
          endpoint.<list style="numbers">
              <t>Determine the set of requested scopes as follows:
              <spanx>RequestedScopes = PermissionTicket &#8746;
              (ClientRequested &#8745; ClientRegistered)</spanx>.</t>

              <t>Determine all operative policy conditions, and claims and
              other relevant information serving as input to them, for each
              scope assocated with <spanx>RequestedScopes</spanx> and evaluate
              its authorization status. Note: Claims and other information
              gathered during one authorization process may become out of date
              in terms of their relevance for future authorization processes.
              The authorization server is responsible for managing such
              relevance wherever information associated with a PCT, or other
              persistently stored information, is used as input to
              authorization, including policy conditions themselves. Note:
              Since the authorization server's policy expression and
              evaluation capabilities are outside the scope of this
              specification, any one implementation might take a simple or
              arbitrarily complex form, with varying abilities to combine or
              perform calculations over claims and their values. For example,
              logical operations such as accepting "either claim value A or
              claim value B" as correct may be possible.</t>

              <t>For each scope that passes the evaluation, add it to a set
              called <spanx>CandidateGrantedScopes</spanx>.</t>
            </list></t>

          <t>In the authorization results phase, the authorization server
          examines the <spanx>CandidateGrantedScopes</spanx> set to determine
          whether to issue an RPT and what permissions should be associated
          with it.<list style="symbols">
              <t>If <spanx>CandidateGrantedScopes = RequestedScopes</spanx>,
              then the authorization server MUST subsequently respond with a
              success code and issue an RPT (upgrading as appropriate; see
              below).</t>

              <t>If <spanx>CandidateGrantedScopes &lt;
              RequestedScopes</spanx>, the authorization server MUST
              subsequently issue either an RPT containing
              <spanx>CandidateGrantedScopes</spanx> (upgrading as appropriate;
              see below), or one of the error codes. The reason for the two
              options is that granting only partial scopes may not be useful
              for the client's and requesting party's purposes in seeking
              authorization for access.</t>
            </list></t>

          <t>The authorization server MAY implement RPT upgrading. It is
          RECOMMENDED for the authorization server to document its practices
          regarding RPT upgrades and to act consistently with respect to RPT
          upgrades so as to enable clients to manage tokens efficiently. If
          the authorization server has implemented RPT upgrading, the client
          has submitted an RPT in its request, and the result is success, the
          authorization server adds the permissions from the client's previous
          RPT to the RPT it is about to issue, setting the value of <spanx
          style="verb">upgraded</spanx> in its response containing the
          upgraded RPT to <spanx style="verb">true</spanx> (see <xref
          target="give-rpt" />).</t>

          <t>The following example illustrates authorization assessment and
          partial results: <list style="symbols">
              <t>Assume two resources at a resource server, <spanx
              style="verb">photo1</spanx> with scopes <spanx
              style="verb">view</spanx>, <spanx style="verb">print</spanx>,
              and <spanx style="verb">download</spanx> and <spanx
              style="verb">photo2</spanx> with scopes <spanx
              style="verb">view</spanx>, <spanx style="verb">print</spanx>,
              <spanx style="verb">download</spanx>, and <spanx
              style="verb">link</spanx>.</t>

              <t>The resource owner has set policy conditions that allow
              access to <spanx style="verb">photo1</spanx> only by requesting
              parties that can provide claims proving they are family members,
              and that allow access to <spanx style="verb">photo2</spanx> only
              by requesting parties that can provide claims saying they agree
              not to download, sell, or market any photo.</t>

              <t>The client has pre-registered with the authorization server
              for <spanx style="verb">download</spanx> scope (so
              <spanx>ClientRegistered</spanx> contains <spanx
              style="verb">download</spanx>).</t>

              <t>The client requests a resource, in what the resource server
              interprets as an attempt for <spanx style="verb">view</spanx>
              access to <spanx style="verb">photo1</spanx>.</t>

              <t>The nature of the resource server's API results in the
              resource server's permission ticket from the authorization
              server representing a request for <spanx
              style="verb">view</spanx> and <spanx style="verb">print</spanx>
              scopes for <spanx style="verb">photo1</spanx> on the client's
              behalf (so <spanx>PermissionTicket</spanx> contains <spanx
              style="verb">view</spanx> and <spanx
              style="verb">print</spanx>). For an example of how the resource
              server can obtain the permission ticket, see <xref
              target="UMAFedAuthz" />.</t>

              <t>The client requests <spanx style="verb">download</spanx>
              scope on the requesting party's behalf while requesting an RPT
              from the authorization server (so <spanx>ClientRequested</spanx>
              contains <spanx style="verb">download</spanx>).</t>

              <t>The authorization server determines that
              <spanx>RequestedScopes</spanx> contains <spanx
              style="verb">view</spanx>, <spanx style="verb">print</spanx>,
              and <spanx style="verb">download</spanx>.</t>

              <t>Based on the authorization server's evaluation of policy
              conditions associated with these scopes,
              <spanx>CandidateGrantedScopes</spanx> contains only <spanx
              style="verb">view</spanx> and <spanx style="verb">print</spanx>
              and not <spanx style="verb">download</spanx> (the dynamically
              requested scope), which is less than in
              <spanx>RequestedScopes</spanx>.</t>

              <t>The authorization server has a choice whether to issue an RPT
              in this case.</t>
            </list></t>

          <t>Note: While a reasonable approach for most scenarios is to
          implement the classic security stance of default-deny ("everything
          that is not expressly allowed is forbidden"), corner cases can
          inadvertently result in default-permit behavior. For example, it is
          insufficient simply to assume that all resources have some non-zero
          set of claims required for access, and then accept an empty set of
          supplied claims as sufficient for access.</t>
        </section>

        <section anchor="give-rpt"
                 title="Authorization Server Response to Client on Authorization Success">
          <t>If the authorization server's assessment process results in
          issuance of permissions, it returns an HTTP 200 (OK) status code
          with a response body containing the RPT with which it has associated
          the requested permissions. The authorization server MAY return a
          refresh token. See <xref target="refresh" /> for more information
          about refreshing an RPT.</t>

          <t>The authorization server MAY add the following parameters to its
          response:<list style="hanging">
              <t hangText="pct">OPTIONAL. A correlation handle representing
              claims and other information collected during this authorization
              process, which the client is able to present later in order to
              optimize future authorization processes on behalf of a
              requesting party. The PCT MUST be unguessable by an attacker.
              The PCT MUST NOT disclose claims from the requesting party
              directly to possessors of the PCT. Instead, such claims SHOULD
              be associated by reference to the PCT or expressed in an
              encrypted format that can be decrypted only by the authorization
              server that issued the PCT. See <xref target="claim-redirect" />
              for more information about the end-user requesting party
              interaction option. See <xref target="sec-consid-pct" /> for
              additional PCT security considerations.</t>

              <t hangText="upgraded">OPTIONAL. Boolean value. If the client
              submits an RPT in the request and the authorization server
              includes the permissions of the RPT from the request as part of
              the newly issued RPT, then it MUST set this value to <spanx
              style="verb">true</spanx>. If it sets the value to <spanx
              style="verb">false</spanx> or the value is absent, the client
              MUST act as if the newly issued RPT does not include the
              permissions associated with the RPT from the request.</t>
            </list></t>

          <t>The authorization server MAY include any of the parameters
          defined in Section 5.1 of <xref target="RFC6749" /> on its response,
          except that it is NOT RECOMMENDED to include the <spanx
          style="verb">scope</spanx> parameter. This is because for an RPT's
          permissions, each scope is associated with a specific resource, even
          though the client is unaware of this association. Note: The outcome
          of authorization assessment may result in expiration periods for
          RPTs, permissions, and refresh tokens that can affect the client's
          later requests for refreshing the RPT.</t>

          <t>If the authorization server is upgrading an RPT, and the RPT
          string is new rather than repeating the RPT provided by the client
          in the request, then the authorization server SHOULD revoke the
          existing RPT, if possible, and the client MUST discard its previous
          RPT. If the authorization server does not upgrade the RPT but issues
          a new RPT, the client MAY retain the existing RPT.</t>

          <figure>
            <preamble>Example:</preamble>

            <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
... 

{  
   "access_token":"sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
   "token_type":"Bearer"
}
]]></artwork>
          </figure>

          <figure>
            <preamble>Example with a PCT and <spanx
            style="verb">upgraded</spanx> in the response:</preamble>

            <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
...

{  
   "access_token":"sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
   "token_type":"Bearer",
   "pct":"c2F2ZWRjb25zZW50",
   "upgraded":true
}
]]></artwork>
          </figure>
        </section>

        <section anchor="authorization-failure"
                 title="Authorization Server Response to Client on Authorization Failure">
          <t>If the client's request to the token endpoint is insufficient for
          granting an RPT, the authorization server responds using an error
          code and corresponding HTTP status code.<list style="hanging">
              <t hangText="invalid_grant">If the provided ticket was not found
              at the authorization server, or the provided ticket has expired,
              or the client is not authorized to have these permissions added,
              or any other original reasons to use this error response are
              found as defined in <xref target="RFC6749" />, the authorization
              server responds with the HTTP 400 (Bad Request) status code.</t>

              <t hangText="invalid_scope">At least one of the scopes included
              in the request does not match an available scope for any of the
              resources associated with requested permissions for the
              permission ticket provided by the client. The authorization
              server responds with the HTTP 400 (Bad Request) status code.</t>

              <t hangText="request_submitted">The authorization server
              requires intervention by the resource owner to determine whether
              the client is authorized to have these permissions. The
              authorization server responds with the HTTP 403 (Forbidden)
              status code. It MUST include a <spanx
              style="verb">ticket</spanx> parameter.<list style="hanging">
                  <t hangText="ticket">REQUIRED. A permission ticket that
                  allows the client to make a further request to the
                  authorization server's token endpoint as part of this same
                  authorization process, likely some time later in "polling"
                  fashion, when the resource owner might have completed some
                  approval (or denial) action. The value MUST NOT be the same
                  as the one the client used to make its request.</t>
                </list></t>

              <t hangText="need_info">The authorization server needs
              additional information in order to determine whether the client
              is authorized to have these permissions. The authorization
              server responds with the HTTP 403 (Forbidden) status code. It
              MUST include a <spanx style="verb">ticket</spanx> parameter, and
              it MUST also include either the <spanx
              style="verb">required_claims</spanx> parameter or the <spanx
              style="verb">redirect_user</spanx> parameter, or both, as hints
              about information the authorization server needs to perform
              authorization assessment. On receiving such hints, the client
              has the opportunity to engage, or engage the requesting party,
              in claims collection flows.<list style="hanging">
                  <t hangText="ticket">REQUIRED. A permission ticket that
                  allows the client to make a further request to the
                  authorization server's token endpoint as part of this same
                  authorization process, potentially immediately. The value
                  MUST NOT be the same as the one the client used to make its
                  request.</t>

                  <t hangText="required_claims">An array containing parameters
                  that describe the required claims, with the following
                  subparameters:<list style="hanging">
                      <t hangText="claim_token_format">OPTIONAL. An array of
                      strings specifying a set of acceptable formats for a
                      token pushed by the client containing this claim (see
                      <xref target="uma-grant-type" />). Any one of the
                      referenced formats would satisfy the authorization
                      server's requirements. Each string MAY be a URI.</t>

                      <t hangText="claim_type">OPTIONAL. A string, indicating
                      the expected interpretation of the provided claim value.
                      The string MAY be a URI.</t>

                      <t hangText="friendly_name">OPTIONAL. A string that
                      provides a human-readable form of the claim's name,
                      which may be useful as a "display name" for use in user
                      interfaces in cases where the actual name is complex or
                      opaque, such as an OID or a UUID.</t>

                      <t hangText="issuer">OPTIONAL. An array of strings
                      specifying a set of acceptable issuing authorities for
                      the claim. Any one of the referenced authorities would
                      satisfy the authorization server's requirements. Each
                      string MAY be a URI.</t>

                      <t hangText="name">OPTIONAL. A string (which MAY be a
                      URI) representing the name of the claim; the "key" in a
                      key-value pair.</t>
                    </list></t>

                  <t hangText="redirect_user">The claims interaction endpoint
                  URI to which to redirect the end-user requesting party at
                  the authorization server to continue the process of
                  interactive claims gathering. For example, the authorization
                  server may require the requesting party to fill out a
                  CAPTCHA to help prove humanness. If the requesting party is
                  not an end-user, then no client action would be possible on
                  receiving the hint. If a static claims interaction endpoint
                  was also provided in the authorization server's discovery
                  document, then this value overrides the static value.
                  Providing a value in this response might be appropriate, for
                  example, if the URI needs to be customized per requesting
                  party.</t>
                </list></t>
            </list></t>

          <figure>
            <preamble>Example when the ticket was not found, or the ticket has
            expired, or the client's request for authorization has failed
            outright:</preamble>

            <artwork><![CDATA[HTTP/1.1 400 Bad Request
Content-Type: application/json
Cache-Control: no-store
...

{  
   "error":"invalid_grant"
}
]]></artwork>
          </figure>

          <figure>
            <preamble>Example of a <spanx style="verb">need_info</spanx>
            response with both types of hints:</preamble>

            <artwork><![CDATA[HTTP/1.1 403 Forbidden
Content-Type: application/json
Cache-Control: no-store
...

{  
   "error":"need_info",
   "ticket":"ZXJyb3JfZGV0YWlscw==",
   "required_claims":[  
      {  
         "claim_token_format":[  
            "http://openid.net/specs/openid-connect-core-1_0.html#IDToken"
         ],
         "claim_type":"urn:oid:0.9.2342.19200300.100.1.3",
         "friendly_name":"email",
         "issuer":[  
            "https://example.com/idp"
         ],
         "name":"email23423453ou453"
      }
   ],
   "redirect_user":"https://as.example.com/rqp_claims?id=2346576421"
}
]]></artwork>
          </figure>
        </section>
      </section>

      <section anchor="client-rpt-attempt"
               title="Client Requests Resource With RPT">
        <t>The client requests the resource, now in possession of an RPT.</t>

        <figure>
          <preamble>Example of a client request for the resource carrying an
          RPT:</preamble>

          <artwork><![CDATA[GET /users/alice/album/photo.jpg HTTP/1.1
Authorization: Bearer sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv
Host: photoz.example.com
...
]]></artwork>
        </figure>
      </section>

      <section anchor="rs-rpt-response"
               title="Resource Server Responds to Client&rsquo;s Resource Request With RPT">
        <t>The resource server responds to the client's RPT-accompanied
        resource request.</t>

        <t>If the resource access request fails, the resource server responds
        as if the request were unaccompanied by a token, as defined in <xref
        target="rs-tokenless-response" />.</t>

        <t>The resource server MUST NOT give access in the case of an invalid
        RPT or an RPT associated with insufficient authorization.</t>

        <t>For an example of how the resource server can introspect the token
        and its permissions at the authorization server prior to responding to
        the client's request, see <xref target="UMAFedAuthz" />.</t>

        <t>This process concludes the UMA grant flow.</t>
      </section>

      <section anchor="refresh" title="Authorization Server Refreshes RPT">
        <t>As noted in <xref target="give-rpt" />, when issuing an RPT, the
        authorization server MAY also issue a refresh token.</t>

        <t>Having previously received a refresh token from the authorization
        server, the client MAY use the refresh token grant to attempt to
        refresh an expired RPT. If the client includes the <spanx
        style="verb">scope</spanx> parameter in its request, the authorization
        server MAY limit the scopes in the permissions associated with any
        resulting refreshed RPT to the scopes requested by the client.</t>

        <t>The authorization server MUST NOT treat the client's request to
        refresh an RPT as if it were a request for a new RPT requiring an
        authorization assessment calculation.</t>
      </section>

      <section anchor="token-revocation"
               title="Client Requests Token Revocation">
        <t>If the authorization server presents a token revocation endpoint as
        defined in <xref target="RFC7009" />, the client MAY use the endpoint
        to request revocation of an RPT (access token), refresh token, or PCT
        previously issued to it on behalf of a requesting party. This
        specification defines the following token type hint value:<list
            style="hanging">
            <t hangText="pct">Helps the authorization server optimize lookup
            of a PCT for revocation.</t>
          </list></t>
      </section>
    </section>

    <section anchor="profiles" title="Profiles and Extensions">
      <t>An UMA profile restricts UMA's available options. An UMA extension
      defines how to use UMA's extensibility points. The two can be combined.
      Some reasons for creating profiles and extensions include:<list
          style="symbols">
          <t>A profile restricting options in order to tighten security</t>

          <t>A profile/extension restricting options and adding messaging
          parameters for use with a specific industry API</t>

          <t>A profile that documents a specific URI, format, and
          interpretation for pushed claim tokens (see <xref
          target="uma-grant-type" />)</t>

          <t>An extension that defines additional metadata for the
          authorization server discovery document to define machine-readable
          usage details</t>
        </list></t>

      <t>The following actions are RECOMMENDED regarding the creation and use
      of profiles and extensions:<list style="symbols">
          <t>The creator of a profile or extension related to UMA SHOULD
          assign it a uniquely identifying URI</t>

          <t>The authorization server supporting a profile or extension
          related to UMA with such a URI SHOULD supply the identifying URI in
          its <spanx style="verb">uma_profiles_supported</spanx> metadata (see
          <xref target="as-config" />)</t>
        </list></t>
    </section>

    <section anchor="sec-consid" title="Security Considerations">
      <t>This specification relies mainly on OAuth 2.0 security mechanisms as
      well as transport-level encryption. Thus, implementers are strongly
      advised to read <xref target="BCP195" /> and the security considerations
      in <xref target="RFC6749" /> (Section 10) and <xref target="RFC6750" />
      (Section 5) along with the security considerations of any other OAuth
      token-defining specifications in use, along with the entire <xref
      target="RFC6819" /> specification, and apply the countermeasures
      described therein. As well, implementers should take into account the
      security considerations in all other normatively referenced
      specifications.</t>

      <t>The following sections describe additional security
      considerations.</t>

      <section anchor="csrf" title="Cross-Site Request Forgery">
        <t>Similar to the redirection used at OAuth&rsquo;s authorization
        endpoint, UMA redirection for the purpose of gathering claims
        interactively from an end-user requesting party (described in <xref
        target="claim-redirect" />) creates the potential for cross-site
        request forgery (CSRF) through an open redirect if the authorization
        server does not force the client to pre-register its claims
        redirection endpoint, and server-side artifact tampering if the client
        does not avail itself of the <spanx style="verb">state</spanx>
        parameter.</t>

        <t>The client MUST implement CSRF protection for its claims
        redirection URI, if it has one. This is typically accomplished by
        requiring any request sent to the claims redirection URI endpoint to
        include a value that binds the request to the user-agent's
        authenticated state (for example, a hash of the session cookie used to
        authenticate the user-agent). The binding value MUST be
        non-guessable.</t>

        <t>The client SHOULD use the <spanx style="verb">state</spanx>
        parameter when redirecting the requesting party to the claims
        interaction endpoint. Once the authorization server redirects the
        requesting party back, with the required binding value contained in
        the <spanx style="verb">state</spanx> parameter, the binding value
        enables the client to verify the validity of the request by matching
        the binding value to the user-agent's authenticated state. The client
        MUST keep the user-agent's authenticated state (for example, session
        cookie or HTML5 local storage) in a location accessible only to the
        client and the user-agent (that is, protected by same-origin
        policy).</t>

        <t>A CSRF attack against the authorization server's claims interaction
        endpoint can result in an attacker obtaining authorization for access
        through a malicious client without involving or alerting the end-user
        requesting party. The authorization server MUST implement CSRF
        protection for its claims interaction endpoint and ensure that a
        malicious client cannot obtain authorization without the awareness and
        involvement of the requesting party.</t>

        <t>The <spanx style="verb">state</spanx> parameter SHOULD NOT include
        sensitive client or requesting party information in plain text, as it
        can be transmitted over insecure channels or stored insecurely.</t>
      </section>

      <section title="Requesting Party Switching and RPT Exposure to a Requesting Party">
        <t>When a client redirects an end-user requesting party to the claims
        interaction endpoint, the client provides no a priori context to the
        authorization server about which user is appearing at the endpoint,
        other than implicitly through the permission ticket. Since the
        authorization server is free to gather any claims it wishes, the
        effect is to "late-bind" them to the permission ticket and the <spanx
        style="verb">state</spanx> parameter string provided by the client,
        with the effect of enabling the authorization server not to trust
        client-asserted claims. This is a desirable result and reflects one
        reason why the authorization server might choose to demand use of the
        redirect flow over the push flow. However, the client has the
        opportunity to switch end-users -- say, enabling malicious end-user
        Carlos to impersonate the original end-user Bob, who might be
        represented by a PCT already in that client's possession and might
        even have authorized the issuance of that PCT -- after the redirect
        completes and before it returns to the token endpoint to seek
        permissions.</t>

        <t>Another issue concerns the exposure of an RPT to a requesting
        party, which could maliciously pass the token to an unauthorized
        party.</t>

        <t>To mitigate requesting-party switching and RPT exposure threats,
        consider the following strategies.<list style="symbols">
            <t>Require that the requesting party legitimately represent the
            wielder of the bearer token on a legal or contractual level. This
            solution does not reduce the risk from a technical
            perspective.</t>

            <t>The authorization server, possibly with input from the resource
            owner, can implement tighter time-to-live strategies around the
            permissions in RPTs. This is a classic approach with bearer tokens
            that helps to limit a malicious party's ability to intercept and
            use the bearer token. In the same vein, the authorization server
            could require claims to have a reasonable degree of freshness
            (which would require a custom claims profile).</t>

            <t>A stronger strategy is to gather claims interactively from an
            end-user requesting party that demonstrate that some sufficiently
            strong level of authentication was performed.</t>
          </list></t>
      </section>

      <section anchor="sec-consid-pct"
               title="Requesting Party Claims and Persisted Claims Tokens">
        <t>A PCT is similar to a refresh token in that it carries extra power
        over the usage of an RPT. The authorization server and client MUST
        keep PCTs confidential in transit and storage, and MUST NOT share any
        PCT with any other entity other than the issuer or issued client,
        respectively. The authorization server MUST maintain the binding
        between a PCT and the client to which it was issued.</t>

        <t>Given that a PCT represents a set of requesting party claims, a
        client supplying a PCT in its RPT request MUST make a best effort to
        ensure that the requesting party using the client now is the same as
        the requesting party that was associated with the PCT when it was
        issued. Different clients will have different capabilities in this
        respect; for example, some applications are single-user and perform no
        local authentication, associating all PCTs with the "current user",
        while others might have more sophisticated authentication and user
        mapping capabilities.</t>
      </section>

      <section title="Strengthening RPT Protection Using Proof of Possession">
        <t>After the client's resource request with an RPT, assuming the
        client sent an RPT of the bearer style such as defined in <xref
        target="RFC6750" />, the resource server will have received from the
        client the entire secret portion of the token. This specification
        assumes only bearer-type tokens because they are the only type
        standardized as of this specification's publication. However, to
        strengthen protection for RPTs using a proof-of-possession approach,
        the resource server could receive an RPT that consists of only a
        cryptographically signed token identifier, and then to validate the
        signature, it could, for example, submit the token identifier to the
        token introspection endpoint to obtain the necessary key information.
        The details of this usage are outside the scope of this
        specification.</t>
      </section>

      <section anchor="cred-guessing" title="Credentials-Guessing">
        <t>The authorization server MUST prevent attackers from guessing
        permission tickets and PCTs.</t>
      </section>

      <section title="Single-Use Permission Ticket">
        <t>The client SHOULD check that the value of the <spanx
        style="verb">ticket</spanx> parameter it receives back from the
        authorization server in each response and return-redirect of the
        requesting party differs from the one it sent to the server in the
        initial request or redirect.</t>
      </section>

      <section anchor="trust-considerations"
               title="Profiles and Trust Establishment">
        <t>Parties that are operating and using UMA software entities have
        opportunities to establish agreements about the parties' rights and
        responsibilities on a legal or contractual level, along with common
        interpretations of UMA constructs for consistent and expected software
        behavior. These agreements can be used to improve the parties'
        respective security postures, and written profiles are a key mechanism
        for conveying and enforcing these agreements. <xref
        target="profiles" /> discusses profiling. See <xref
        target="UMA-legal" /> to learn about tools to assist in the legal and
        contractual elements of deploying UMA-enabled services.</t>

        <section anchor="trust-push"
                 title="Requirements for Trust When Clients Push Claim Tokens">
          <t>This section discusses the threats surrounding client claim
          pushing (see <xref target="uma-grant-type" />).</t>

          <t>Because claim tokens of any format typically contain audience
          restrictions and an authorization server would typically not be in
          the primary audience for a claim token held or generated by a
          client, it is RECOMMENDED to document how the client, authorization
          server, and any additional ecosystem entities and parties will
          establish a trust relationship and communicate any required keying
          material in a claim token profile, as described in <xref
          target="profiles" />. Authorization servers are RECOMMENDED not to
          accept claim tokens pushed by untrusted clients and not to ignore
          audience restrictions found in claim tokens pushed by clients.</t>

          <t>In the special circumstance when an authorization server is
          colocated with an OpenID Provider for the requesting parties within
          a deployment ecosystem, then it is able to act as an OpenID Relying
          Party for itself. This circumstance presents an opportunity for a
          technical optimization of the requirement for trust because the
          authorization server itself issued the OAuth client credentials for
          the client in question, and could reasonably be the singular <spanx
          style="verb">aud</spanx> value target in an OpenID Connect ID Token
          pushed by the client to the token endpoint.</t>
        </section>
      </section>
    </section>

    <section anchor="priv-consid" title="Privacy Considerations">
      <t>UMA has the following privacy considerations.</t>

      <section anchor="rqp-privacy"
               title="Requesting Party Information at the Authorization Server">
        <t>The primary privacy duty of UMA's design is to the resource owner.
        However, privacy considerations affect the requesting party as well,
        having to do with the nature of claims. Claims are likely to contain
        personal, personally identifiable, and sensitive information,
        particularly in the case of requesting parties who are end-users.</t>

        <t>If the authorization server supports persisting claims for any
        length of time (for example, to support issuance of PCTs), then it
        SHOULD provide a secure and privacy-protected means of storing claim
        data. It is also RECOMMENDED for the authorization server to use an
        interactive claims-gathering flow to ask an end-user requesting party
        for authorization to persist their claims before issuing a PCT. A
        requesting party who provides claims to an authorization server once
        having been redirected there is less susceptible to privacy-destroying
        behavior. Otherwise, certain flows such as claim pushing and
        interactive federated sign-in with automatic login will tend to be
        invisible to the user if they have not consciously authorized the
        possibility.</t>
      </section>

      <section title="Resource Owner Information at the Resource Server">
        <t>Since the client's initial request for a protected resource is made
        in an unauthorized and unauthenticated context, such requests are by
        definition open to all users. The response to that request includes
        the authorization server's location to enable the client to request an
        access token and present claims. If it is known out of band that
        authorization server is owned and controlled by a single user, or
        visiting the authorization server contains other identifying
        information, then an unauthenticated and unauthorized client would be
        able to tell which resource owner is associated with a given resource.
        Other information about the resource owner, such as organizational
        affiliation or group membership, may be gained from this transaction
        as well.</t>
      </section>

      <section title="Profiles and Trust Establishment">
        <t>Parties that are operating and using UMA software entities have
        opportunities to establish agreements about mutual rights,
        responsibilities, and common interpretations of UMA constructs for
        consistent and expected software behavior. These agreements can be
        used to improve the parties' respective privacy postures. See <xref
        target="trust-considerations" /> for more information. Additional
        considerations related to Privacy by Design concepts are discussed in
        <xref target="UMA-PbD" />.</t>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document makes the following requests of IANA.</t>

      <section title="Well-Known URI Registration">
        <t>This specification registers the well-known URI defined in <xref
        target="as-config" />, as required by Section 5.1 of <xref
        target="RFC5785" />.</t>

        <section title="Registry Contents">
          <t>
            <list style="symbols">
              <t>URI suffix: <spanx
              style="verb">uma2-configuration</spanx></t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="as-config" /> in this
              document</t>
            </list>
          </t>
        </section>
      </section>

      <section title="OAuth 2.0 Authorization Server Metadata Registry">
        <t>This specification registers OAuth 2.0 authorization server
        metadata defined in <xref target="as-config" />, as required by
        Section 7.1 of <xref target="OAuthMeta" />.</t>

        <section title="Registry Contents">
          <t>
            <list style="symbols">
              <t>Metadata name: <spanx
              style="verb">claims_interaction_endpoint</spanx></t>

              <t>Metadata description: endpoint metadata</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="as-config" /> in this
              document</t>
            </list>

            <list style="symbols">
              <t>Metadata name: <spanx
              style="verb">uma_profiles_supported</spanx></t>

              <t>Metadata description: profile/extension feature metadata</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="as-config" /> in this
              document</t>
            </list>
          </t>
        </section>
      </section>

      <section title="OAuth 2.0 Extension Grant Parameters Registration">
        <t>This specification registers the parameters defined in <xref
        target="uma-grant-type" />, as required by Section 11.2 of <xref
        target="RFC6749" />.</t>

        <section title="Registry Contents">
          <t>
            <list style="symbols">
              <t>Parameter name: <spanx style="verb">claim_tokens</spanx></t>

              <t>Parameter usage location: client request, token endpoint</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="uma-grant-type" /> in
              this document</t>
            </list>
          </t>

          <t>
            <list style="symbols">
              <t>Parameter name: <spanx style="verb">pct</spanx></t>

              <t>Parameter usage location: client request, token endpoint</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="uma-grant-type" /> in
              this document</t>
            </list>

            <list style="symbols">
              <t>Parameter name: <spanx style="verb">pct</spanx></t>

              <t>Parameter usage location: authorization server response,
              token endpoint</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="give-rpt" /> in this
              document</t>
            </list>

            <list style="symbols">
              <t>Parameter name: <spanx style="verb">rpt</spanx></t>

              <t>Parameter usage location: client request, token endpoint</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="uma-grant-type" /> in
              this document</t>
            </list>

            <list style="symbols">
              <t>Parameter name: <spanx style="verb">ticket</spanx></t>

              <t>Parameter usage location: client request, token endpoint</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="uma-grant-type" /> in
              this document</t>
            </list>
          </t>

          <t>
            <list style="symbols">
              <t>Parameter name: <spanx style="verb">upgraded</spanx></t>

              <t>Parameter usage location: authorization server response,
              token endpoint</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="give-rpt" /> in this
              document</t>
            </list>
          </t>
        </section>
      </section>

      <section title="OAuth 2.0 Extensions Error Registration">
        <t>This specification registers the errors defined in <xref
        target="authorization-failure" />, as required by Section 11.4 of
        <xref target="RFC6749" />.</t>

        <section title="Registry Contents">
          <t>
            <list style="symbols">
              <t>Error name: <spanx style="verb">need_info</spanx> (and its
              subsidiary parameters)</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="uma-grant-type" /> in
              this document</t>

              <t>Error usage location: authorization server response, token
              endpoint</t>
            </list>

            <list style="symbols">
              <t>Error name: <spanx style="verb">request_submitted</spanx>
              (and its subsidiary <spanx style="verb">ticket</spanx>
              parameter)</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="uma-grant-type" /> in
              this document</t>

              <t>Error usage location: authorization server response, token
              endpoint</t>
            </list>
          </t>
        </section>
      </section>

      <section title="OAuth Token Type Hints Registration">
        <t>This specification registers the errors defined in <xref
        target="token-revocation" />, as required by Section 4.1.2 of <xref
        target="RFC7009" />.</t>

        <section title="Registry Contents">
          <t>
            <list style="symbols">
              <t>Hint value: <spanx style="verb">pct</spanx></t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="token-revocation" /> in
              this document</t>
            </list>
          </t>
        </section>
      </section>
    </section>

    <section anchor="Acknowledgments" title="Acknowledgments">
      <t>The following people made significant text contributions to the
      specification:<list style="symbols">
          <t>Paul C. Bryan, ForgeRock US, Inc. (former editor)</t>

          <t>Domenico Catalano, Oracle (former author)</t>

          <t>Mark Dobrinic, Cozmanova</t>

          <t>George Fletcher, AOL</t>

          <t>Thomas Hardjono, MIT (former editor)</t>

          <t>Andrew Hindle, Hindle Consulting Limited</t>

          <t>Lukasz Moren, Cloud Identity Ltd</t>

          <t>Christian Scholz, COMlounge GmbH (former editor)</t>

          <t>Mike Schwartz, Gluu</t>

          <t>Cigdem Sengul, Nominet UK</t>

          <t>Jacek Szpot, Newcastle University</t>
        </list></t>

      <t>Additional contributors to this specification include the Kantara UMA
      Work Group participants, a list of whom can be found at <xref
      target="UMAnitarians" />.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <reference anchor="BCP195" target="https://tools.ietf.org/html/bcp195">
        <front>
          <title>Recommendations for Secure Use of Transport Layer Security
          (TLS) and Datagram Transport Layer Security (DTLS)</title>

          <author initials="Y." surname="Sheffer">
            <organization />
          </author>

          <date day="" month="May" year="2015" />
        </front>
      </reference>

      <reference anchor="OIDCCore"
                 target="http://openid.net/specs/openid-connect-core-1_0.html">
        <front>
          <title>OpenID Connect Core 1.0 incorporating errata set 1</title>

          <author initials="N." surname="Sakimura">
            <organization />
          </author>

          <date day="8" month="November" year="2014" />
        </front>
      </reference>

      <reference anchor="OIDCDynClientReg"
                 target="http://openid.net/specs/openid-connect-registration-1_0.html">
        <front>
          <title>OpenID Connect Dynamic Client Registration 1.0 incorporating
          errata set 1</title>

          <author initials="N." surname="Sakimura">
            <organization>OpenID Foundation</organization>
          </author>

          <date day="8" month="November" year="2014" />
        </front>
      </reference>

      <reference anchor="UMAFedAuthz"
                 target="https://docs.kantarainitiative.org/uma/wg/oauth-uma-federated-authz-2.0-05.html">
        <front>
          <title>Federated Authorization for User-Managed Access (UMA)
          2.0</title>

          <author initials="E." surname="Maler">
            <organization>ForgeRock</organization>
          </author>

          <date day="" month="May" year="2017" />
        </front>
      </reference>

      <reference anchor="OAuthMeta"
                 target="https://tools.ietf.org/html/draft-ietf-oauth-discovery-06">
        <front>
          <title>OAuth 2.0 Authorization Server Metadata</title>

          <author initials="M." surname="Jones">
            <organization>ForgeRock</organization>
          </author>

          <date day="10" month="March" year="2017" />
        </front>
      </reference>

      &RFC2119;

      &RFC3986;

      &RFC5785;

      <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6415"?>

      <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6711"?>

      &RFC6749;

      &RFC6750;

      &RFC6819;

      &RFC7159;

      <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7519"?>

      &RFC7591;

      &RFC7009;
    </references>

    <references title="Informative References">
      <reference anchor="UMA-PbD"
                 target="https://kantarainitiative.org/confluence/display/uma/Privacy+by+Design+Implications+of+UMA">
        <front>
          <title>Privacy by Design Implications of UMA</title>

          <author initials="E." surname="Maler" />

          <date day="" month="" year="2013" />
        </front>
      </reference>

      <reference anchor="UMAnitarians"
                 target="https://kantarainitiative.org/confluence/display/uma/Participant+Roster">
        <front>
          <title>UMA Participant Roster</title>

          <author initials="E." surname="Maler">
            <organization>Maler</organization>
          </author>

          <date day="" month="" year="2017" />
        </front>
      </reference>

      <reference anchor="UMA-legal"
                 target="http://kantarainitiative.org/confluence/display/uma/UMA+Legal">
        <front>
          <title>UMA Legal</title>

          <author initials="E." surname="Maler">
            <organization>Maler</organization>
          </author>

          <date day="" month="" year="2017" />
        </front>
      </reference>
    </references>
  </back>
</rfc>
