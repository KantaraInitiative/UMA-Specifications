<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='http://xml2rfc.tools.ietf.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml2rfc.tools.ietf.org/authoring/rfc2629.dtd" [
<!ENTITY RFC6749 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC7662 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7662.xml">
<!ENTITY RFC2119 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7159 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7159.xml">
<!ENTITY RFC2616 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY RFC7591 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7591.xml">
<!ENTITY RFC5785 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5785.xml">
<!ENTITY RFC3986 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC6750 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml">
<!ENTITY RFC6819 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
]>
<rfc category="std" docName="uma-core" id="kantara" ipr="kantara"
     target="draft" version="2.0">
  <?xml-stylesheet texttype='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc='yes' ?>

  <?rfc tocdepth='4' ?>

  <?rfc symrefs='yes' ?>

  <?rfc sortrefs='yes' ?>

  <?rfc compact='yes' ?>

  <?rfc subcompact='no' ?>

  <front>
    <title abbrev="UMA Core">User-Managed Access (UMA) 2.0</title>

    <author fullname="Eve Maler" initials="E." role="editor" surname="Maler">
      <organization>ForgeRock</organization>

      <address>
        <email>eve.maler@forgerock.com</email>
      </address>
    </author>

    <author fullname="Maciej Machulak" initials="M." surname="Machulak">
      <organization>Self</organization>

      <address>
        <email>maciej.machulak@gmail.com</email>
      </address>
    </author>

    <author fullname="Justin Richer" initials="J." surname="Richer">
      <organization>Bespoke Engineering</organization>

      <address>
        <email>justin@bspk.io</email>
      </address>
    </author>

    <date day="8" month="March" year="2017" />

    <abstract>
      <t>User-Managed Access (UMA) 2.0 makes use of OAuth 2.0 and related
      standards to enable a resource owner to control protected resource
      access by requesting parties and their clients in an asynchronous
      fashion. Resources reside on any number of resource servers and a
      central authorization server manages the resource owner's access grants
      over time.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="introduction" title="Introduction">
      <t>User-Managed Access (UMA) 2.0 makes use of OAuth 2.0 <xref
      target="RFC6749" /> and related standards to enable additions to OAuth's
      abilities as follows:<list style="symbols">
          <t>The resource owner grants resource access to clients used by
          entities that are in a <spanx>requesting party</spanx> role (see
          <xref target="terminology" />). This enables party-to-party
          authorization, rather than authorization of application access
          alone.</t>

          <t>This specification defines an OAuth extension grant called the
          UMA grant (see <xref target="seek-authorization" />). This grant
          defines the interface to the client and requesting party and is
          <spanx>asynchronous</spanx> with respect to resource owner
          interactions. It lets a resource owner configure an authorization
          server with access grant rules (policy conditions) at will, rather
          than authorizing access token issuance synchronously just after
          authenticating.</t>

          <t>The relationship between an authorization server and resource
          server is loosely coupled, or federated, in a resource owner context
          through the use of <xref target="OAuth-resource-reg" /> and an
          extension of <xref target="RFC7662" />. Multiple resource servers
          operating in different domains can communicate with a single
          authorization server operating in yet another domain that acts on
          behalf of a resource owner. This loose coupling enables a service
          ecosystem to automate resource protection, and lets the resource
          owner monitor and control access grant rules at a central service
          location over time. The token introspection extension allows grants
          to increase and decrease at a grain finer than a whole access
          token.</t>
        </list></t>

      <t>For example, a bank customer (resource owner) named Alice with a bank
      account service (resource server) can use a dedicated sharing management
      service (authorization server) to manage access by a spouse Bob, an
      accounting professional Charline, and a tax professional David
      (requesting parties), all using different client applications, to view
      account data and to give each of them differential access to payment and
      withdrawal functions. Alice can use the same sharing management service
      to give out "read", "edit", or "print" access to documents residing in a
      cloud file system (a different resource server) residing in a different
      domain to friends Erik and Frances, with whom she is working on a
      residential community project. (A variety of use cases can be found in
      <xref target="UMA-usecases" /> and <xref
      target="UMA-casestudies" />.)</t>

      <section anchor="terminology"
               title="Roles and High-Level Communications">
        <t>UMA uses the OAuth roles, enhancing the definitions in some cases,
        and also defines a new role, the requesting party:<list
            style="hanging">
            <t hangText="resource owner"><vspace />An entity capable of
            granting access to a protected resource, the "user" in
            User-Managed Access. This is typically an end-user (a natural
            person) but it can also be non-human entity that is treated as a
            person for limited legal purposes (a legal person), such as a
            corporation.</t>

            <t hangText="requesting party"><vspace />A natural or legal person
            that uses a client to seek access to a protected resource. The
            requesting party may or may not be the same party as the resource
            owner.</t>

            <t hangText="client"><vspace />An application that is capable of
            making requests for protected resources with the resource owner's
            authorization and on the requesting party's behalf.</t>

            <t hangText="resource server"><vspace />A server that hosts
            resources on a resource owner's behalf, registers resources for
            protection at an authorization server, and is capable of accepting
            and responding to requests for protected resources.</t>

            <t hangText="authorization server"><vspace />A server that
            protects, on a resource owner's behalf, resources managed at a
            resource server.</t>
          </list></t>

        <t><xref target="UMA-roles" /> shows the communications among the
        roles at a high level.</t>

        <figure align="center" anchor="UMA-roles">
          <preamble>Roles and Communications</preamble>

          <artwork><![CDATA[                                        +------------------+
                                        |     resource     |
       +- - manage (out of scope) - - - |       owner      |
       |                                +------------------+
       |                                          |
       |             protection                control
       |             API access            (out of scope)
       |             token (PAT)
       |                                          |
       v                                          v
+------------+               +----------+------------------+
|            |               |protection|                  |
|  resource  |               |   API    |   authorization  |
|   server   |<---protect----| (needs   |      server      |
|            |               |   PAT)   |                  |
+------------+               +----------+------------------+
| protected  |                          |        UMA       |
| resource   |                          |       grant      |
|(needs RPT) |                          |  (PCT optional)  |
+------------+                          +------------------+
       ^             requesting          ^  persisted   ^
       |             party token         |   claims     |
       |               (RPT)             |    token     |
       |                               push   (PCT)     |
       |                              claims       interact
       |                            +--------+        for
       +-------------access---------| client |      claims
                                    +--------+     gathering
                                           +---------------+
                                           |  requesting   |
                                           |     party     |
                                           +---------------+
]]></artwork>
        </figure>

        <t>The communications among the roles involve these concepts:<list
            hangIndent="6" style="hanging">
            <t hangText="resource">A digital resource available through an
            HTTP service. See <xref target="fed-authz" /> for information
            about UMA's relationship with HTTP, and <xref
            target="resource-scope-interpretation" /> for information about a
            resource server's responsibility for resource complexity.</t>

            <t hangText="protected resource">A resource for which a resource
            owner is able to control access grants through an authorization
            server.</t>

            <t hangText="scope">A bounded extent of access to a protected
            resource. Scopes are associated with particular resources; thus
            scopes are granted only in the context of those resources, as
            <spanx>permissions</spanx>.</t>

            <t hangText="permission">Authorized access to a particular
            resource with one or more scopes. A resource server requests one
            or more permissions on behalf of a client at an authorization
            server, receiving a permission ticket representing the entire
            requested set in return. If an RPT is ultimately issued, it is
            associated with some number of granted permissions.</t>

            <t hangText="policy conditions">Access grant rules configured at
            an authorization server that achieve resource protection.</t>

            <t hangText="protection API access token (PAT)">An OAuth access
            token with the scope <spanx style="verb">uma_protection</spanx>,
            used by the resource server at the authorization server's
            protection API.</t>

            <t hangText="requesting party token (RPT)">An OAuth access token
            associated with a set of permissions, used by the client to gain
            access to protected resources at the resource server.</t>

            <t hangText="permission ticket">A correlation handle that is
            conveyed from an authorization server to a resource server, from a
            resource server to a client, and from a client to an authorization
            server, to enable the authorization server to obtain an accurate
            view of requested set of permissions.</t>

            <t hangText="claim"><vspace />A statement of the value or values
            of one or more attributes of an entity. An authorization server
            typically needs to collect and assess one or more claims of a
            requesting party or client against the policy conditions of a
            resource owner as part of protecting a resource.</t>

            <t hangText="claim token">A package of one or more claims provided
            directly (pushed) by the client to the authorization server as
            part of its request for the RPT at the token endpoint.</t>

            <t hangText="persisted claims token (PCT)">A correlation handle
            issued by an authorization server that represents a set of claims
            collected during one authorization process to be used during a
            future authorization process.</t>
          </list></t>

        <t>A resource owner manages resources at any number of resource
        servers, and works with an authorization server to set policy
        conditions that control access grants.</t>

        <t>The authorization server presents a protection API (for more detail
        see <xref target="protection-api" />) to the resource server to enable
        resource protection. (Except for taking part in PAT issuance, the
        resource owner's interactions with each server are out of scope of
        this specification.)</t>

        <t>The authorization server supports the UMA grant type (for more
        detail see <xref target="authorization-api" />) to enable issuing
        grants to clients based on policy conditions in the form of a
        requesting party token (RPT).</t>

        <t>The resource server presents a protected resource interface to the
        client (for more detail see <xref
        target="resource-server-interface" />), which enables for handling
        both initial resource requests by a client with no RPT and subsequent
        resource requests with an RPT.</t>
      </section>

      <section title="Notational Conventions">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
        "OPTIONAL" in this document are to be interpreted as described in
        <xref target="RFC2119" />.</t>

        <t>Unless otherwise noted, all protocol properties and values are case
        sensitive. JSON <xref target="RFC7159" /> data structures defined by
        this specification MAY contain extension properties that are not
        defined in this specification. Any entity receiving or retrieving a
        JSON data structure SHOULD ignore extension properties it is unable to
        understand. Extension names that are unprotected from collisions are
        outside the scope of this specification.</t>
      </section>

      <section anchor="fed-authz" title="Federated Authorization">
        <t>The federation of authorization in UMA results in a conceptual
        separation of responsibilities: <list style="symbols">
            <t>The resource server defines the boundaries of a resource and
            its possible scopes of access by virtue of being the publisher of
            the API being protected.</t>

            <t>The resource owner works with the authorization server to set
            policy conditions that match up resources and scopes to a
            protection scheme.</t>

            <t>The client represents the requesting party in attempting
            resource access, requesting RPTs, and potentially requesting
            authorization for specific scopes during the latter activity.</t>

            <t>The authorization server executes centralized policy conditions
            when clients attempt protected-resource access on behalf of the
            requesting party, with an ultimate result of RPT issuance or
            denial.</t>
          </list></t>

        <t>Implementers have the opportunity to develop extensions and
        profiles (see <xref target="profiles" />) that specify and restrict
        various options, according to deployment and usage conditions.</t>

        <t>Practical control of access among loosely coupled parties typically
        requires more than just messaging protocols. It is out of scope of
        this specification to define more than the "technical contract"
        between UMA-conforming entities. The legally responsible parties
        representing these entities may form contracts for, and laws and
        regulations may govern, access-granting relationships. Parties that
        are operating entities claiming to be UMA-conforming should provide
        documentation of any rights and obligations between and among them;
        see <xref target="trust-considerations" /> for more information.</t>

        <section title="HTTP Usage">
          <t>This specification is designed for use with HTTP <xref
          target="RFC2616" />, and for interoperability and security in the
          context of loosely coupled services and applications operated by
          independent parties in multiple domains. The following are
          REQUIRED:<list style="symbols">
              <t>The authorization server MUST expose its endpoints over
              HTTP.</t>

              <t>The authorization server MUST use TLS protection over its
              endpoints, as governed by <xref target="BCP195" />, which
              discusses deployment and adoption characteristics of different
              TLS versions.</t>

              <t>The authorization server MUST use OAuth (or an OAuth-based
              authentication protocol) to secure its protection API endpoints.
              For those OAuth protection use cases where an identity token is
              desired in addition to an access token, it is RECOMMENDED that
              an OAuth-based authentication protocol such as OpenID Connect
              <xref target="OIDCCore" /> be used.</t>

              <t>The resource server MUST expose its protected resources
              through an HTTP service.</t>
            </list></t>

          <t>The use of UMA over any protocol other than HTTP is undefined. In
          such circumstances, it is RECOMMENDED to define profiles or
          extensions to achieve interoperability among independent
          implementations (see <xref target="profiles" />).</t>
        </section>

        <section anchor="resource-scope-interpretation"
                 title="Resource and Scope Interpretation">
          <t>The resource server is privy to information about resource
          semantics and structure, of which it exposes only a subset through
          resource registration and API documentation. Thus, it is responsible
          for certain resource and scope interpretation tasks.</t>

          <t>The resource server MAY register a single resource for protection
          that, from its perspective, has multiple parts, or has dynamic
          elements such as the capacity for querying or filtering, or
          otherwise has internal complexity. The resource server alone is
          responsible for maintaining any required mappings between internal
          representations and the resource identifiers and scopes known to the
          authorization server.</t>

          <t>Because access attempts on resources by clients are unaware of
          resource identifiers, the process of making a permission request
          also requires interpretation by the resource server in order to
          establish a suitable resource identifier, resource owner, and
          authorization server. <xref target="flow-summary-sec" /> discusses
          relevant requirements on the protected resources given this resource
          server task, and <xref target="register-permission" /> discusses how
          the resource server should communicate expectations regarding
          permission requests to the client.</t>

          <t>For its part, in order for the client to have a scope considered
          by the authorization server as part of an authorization assessment
          calcultion, it MUST pre-register for the scope at the authorization
          server (at which point the client acts on its own behalf) and also
          request the scope during an RPT request at the token endpoint (at
          which point it acts on the requesting party's behalf).</t>
        </section>

        <section title="Policy and Time-to-Live Management">
          <t>A variety of authorization, security, and time-to-live policies
          could be managed on a per-resource owner basis or a
          per-authorization server basis, as the entities see fit. Validity
          periods of PATs, RPTs, refresh tokens, permissions, caching periods
          for responses, and even OAuth client credentials are all subject to
          management. Different time-to-live strategies may be suitable for
          different resources and scopes of access. These options are all
          outside the scope of this specification; where deployment ecosystems
          using independent implementations seek a consistent high level of
          security, profiling is RECOMMENDED (see <xref
          target="profiles" />).</t>

          <t>Note: The resource server generally requires access to the
          protection API when an end-user resource owner is not available
          (that is, "offline" access). Thus, the authorization server needs to
          manage the PAT in a way that ensures this outcome.</t>
        </section>
      </section>

      <section anchor="flow-summary-sec" title="Protocol Flow Summary">
        <t><xref target="protocol-flow" /> shows a sample high-level protocol
        flow that summarizes messaging options, illustrating success paths
        with maximum variety. <xref target="protection-api" />, <xref
        target="authorization-api" />, and <xref
        target="resource-server-interface" /> summarize key requirements of
        the three interfaces and related entity actions being illustrated.
        <xref target="protocol-flow-details-sec" /> provides detailed
        specifications of messaging flows and options that correspond to all
        possible success and failure paths.</t>

        <figure anchor="protocol-flow">
          <preamble>Protocol Flow Summary</preamble>

          <artwork><![CDATA[resource resource        authorization             client requesting
 owner    server             server                   |      party
   |Redir...|1 for PAT issuance|                      |        |
   |<-------|*---------------->|                      |        |
   |        |2 Register resources (w/PAT)             |        |
   |        |*---------------->|                      |        |
   |        |    Attempt resource access w/no token  3|        |
   |        |<---------------------------------------#|        |
   |        |4 Request permission (w/PAT)             |        |
   |        |*---------------->|                      |        |
   |        Permission ticket 5|                      |        |
   |        |<----------------*|                      |        |
   |        |6 Return AS location, permission ticket  |        |
   |        |#--------------------------------------->|        |
   |        |           Request RPT, send permission 7|        |
   |        |                  |   ticket, push claims|        |
   |        |                  |<--------------------=|        |
   |        |   Authorization 8|= - - -+              |        |
   |        |        assessment|< - - -+              |        |
   |        |                  |9 Return need_info w/ |        |
   |        |                  |redirect_user, permission ticket
   |        |                  |=-------------------->|        |
   |        |                  |                      |10      |
   |        |                  |       for interactive|Redir...|
   |        |                  |      claims gathering|        |
   |        |                  |<---------------------|=------>|
   |        |                  |  Request RPT, send 11|        |
   |        |                  |     permission ticket|        |
   |        |                  |<--------------------=|        |
   |        |   Authorization 8|= - - -+              |        |
   |        |        assessment|< - - -+              |        |
   |        |                  |12 Issue RPT w/PCT (opt)       |
   |        |                  |=-------------------->|        |
   |        |         Attempt resource access w/RPT 13|        |
   |        |<---------------------------------------#|        |
   |        |14 Introspect RPT (w/PAT)                |        |
   |        |*---------------->|                      |        |
   |        |   Return token 15|                      |        |
   |       introspection object|                      |        |
   |        |<----------------*|                      |        |
   |+- - - #|16 Permissions    |                      |        |
   |+- - - >|assessment        |                      |        |
   |        |17 Return resource representation        |        |
   |        |#--------------------------------------->|        |
]]></artwork>
        </figure>

        <t>Steps 1, 2, 4-5, and 14-15 (arrows with an asterisk (*)) summarize
        communications between the authorization server and resource server
        that constitute the protection API and related resource owner actions.
        <xref target="protection-api" /> provides a high-level definition.</t>

        <t>Steps 7-12 (arrows with an equal sign (=); note that steps 7 and 8
        are repeated) summarize communications between the authorization
        server and client that constitute the UMA grant and related
        authorization server and requesting party actions, <xref
        target="authorization-api" /> provides a high-level definition.</t>

        <t>Steps 3, 6, 13, 16, and 17 (arrows with a number sign (#))
        summarize communications between the resource server and client that
        constitute the protected resource interface and related resource
        server actions. <xref target="resource-server-interface" /> provides a
        high-level definition.</t>

        <t>The authorization server presents a configuration document
        discovery endpoint used by both the resource server and the client, as
        defined by <xref target="config-doc-discovery-endpoint" />. The
        authorization server MUST declare all of its endpoints, other than the
        configuration document discovery endpoint itself, in the configuration
        document (see <xref target="am-endpoints" />).</t>

        <t>Note: In step 3, the client attempts access to a protected resource
        with no token, and in step 4, the resource server requests permissions
        on behalf of that client at the authorization server. In order for the
        resource server to know which authorization server to approach and
        which PAT (representing a resource owner) and resource identifier to
        supply in that request, the API being accessed by the client needs to
        be structured in such a way that the resource server can derive this
        information from the client's token-free access attempt. Commonly,
        this information can be passed through the URI, headers, or body of
        the client's request. Alternatively, the entire interface could be
        dedicated to the use of a single resource owner and protected by a
        single authorization server.</t>

        <section anchor="protection-api"
                 title="Protection API and Related Resource Owner Actions">
          <t>The authorization server's protection API consists of three
          endpoints:<list style="symbols">
              <t>Resource registration endpoint as defined by <xref
              target="OAuth-resource-reg" /> and profiled by this
              specification, specifically regarding the mechanism of
              authentication to the endpoint</t>

              <t>Permission endpoint as defined by <xref
              target="register-permission" /></t>

              <t>Token introspection endpoint as defined by <xref
              target="RFC7662" /> and <xref
              target="token-introspection" /></t>
            </list></t>

          <t>The resource server is the client of this API. As noted in <xref
          target="fed-authz" />, the authorization server MUST apply TLS and
          OAuth protection to this API. The authorization server MUST require
          a PAT for API access. Thus, the resource server is an OAuth client;
          it MUST have OAuth client credentials from the authorization server
          and the ability to obtain an OAuth access token with at least the
          scope <spanx style="verb">uma_protection</spanx> (that is, a PAT).
          If a request to a protection API endpoint fails due to an invalid,
          missing, or expired PAT, or requires higher privileges at this
          endpoint than provided by the PAT, the authorization server responds
          with an OAuth error.</t>

          <t>The PAT binds the resource owner, the resource server used for
          resource management, and the authorization server used for
          protection of those resources. The issuance of the PAT represents
          the authorization of the resource owner for the resource server to
          use the authorization server for protecting those resources. A
          different OAuth authorization grant type for PAT issuance may be
          appropriate for different types of resource owners; for example, the
          client credentials grant is useful in the case of an organization
          acting as a resource owner, whereas an interactive grant type is
          typically more appropriate for capturing the approval of an end-user
          resource owner.</t>

          <t>The resource server MAY protect any subset of the resource
          owner's resources using different authorization servers or other
          means entirely, or to protect some resources and not others.
          Additionally, the choice of protection regimes MAY be made
          explicitly by the resource owner or implicitly by the resource
          server. Any such partitioning by the resource server or owner is out
          of scope of this specification.</t>

          <t>Note: Except for PAT issuance, the resource owner-authorization
          server and resource owner-resource server interfaces are out of
          scope of this specification. A variety of flows and user interfaces
          for policy condition setting involving user agents for both of these
          servers are possible, each with different privacy consequences for
          end-user resource owners. Some elements of the resource registration
          API and its data formats enable the building of user interfaces for
          policy condition setting.</t>

          <t>Note: The resource server is responsible for managing the process
          and timing of registering resources, maintaining the registration of
          resources, and deregistering resources at the authorization server.
          See <xref target="UMA-Impl" /> for a discussion of resource
          registration options.</t>
        </section>

        <section anchor="authorization-api"
                 title="UMA Grant and Related Authorization Server and Requesting Party Actions">
          <t>The UMA grant (defined throughout <xref
          target="seek-authorization" />) consists of the following
          endpoints:<list style="symbols">
              <t>OAuth token endpoint as defined by <xref target="RFC6749" />
              and <xref target="seek-authorization" />. The token endpoint
              handles client requests for, and issues, RPTs. The UMA grant
              type is defined for use on the requesting party's behalf rather
              than the resource owner's behalf, as in the case of grants
              defined in <xref target="RFC6749" />.</t>

              <t>OPTIONAL claims interaction endpoint as defined by <xref
              target="claim-redirect" />. This endpoint plays a role in UMA
              somewhat similar to OAuth's authorization endpoint, but it is
              defined for use by the requesting party rather than the resource
              owner. For interactive claims-gathering, the client SHOULD
              register a <spanx style="verb">claims_redirect_uri</spanx> with
              the authorization server (as further defined in <xref
              target="claim-redirect" />).</t>
            </list></t>

          <t>The authorization server's function is to perform authorization
          on behalf of one or more resource owners. The RPT resulting from
          successful authorization binds the requesting party, the client, the
          authorization server, the resource server, and the resource
          owner.</t>

          <t>The authorization process is the process through which the client
          attempts to obtain an RPT from the authorization server in order to
          access a protected resource on behalf of a requesting party. The
          client and resource server both have opportunities to influence the
          set of permissions ultimately requested as part of the RPT request.
          The client also has an opportunity to seek upgrading of an existing
          RPT by providing that RPT on its request.</t>

          <t>It is OPTIONAL for the authorization server to issue a persisted
          claims token (PCT) to the client when issuing an RPT in order to
          optimize a future RPT request. The PCT represents the set of claims
          collected by the authorization server during current authorization
          process. It is intended to be used at the same authorization server
          as appropriate when the same client seeks an RPT for the same
          requesting party in a subsequent authorization process, even if for
          a different resource or at a different resource server entirely.</t>

          <t>The authorization server conducts the authorization process in
          three phases, with some potential variation in order and looping as
          follows:<list style="symbols">
              <t>A claims collection phase. Two kinds of claims collection
              involving UMA flows are possible: claims pushing by a client and
              interactive claims gathering with an end-user requesting party.
              This phase occurs first in the authorization process in the
              following circumstances:<list style="symbols">
                  <t>When the client redirects an end-user requesting party to
                  the authorization server for interactive claims gathering as
                  its first step after receiving a permission ticket. For this
                  to happen, the client needs the authorization server to have
                  statically declared a claims redirection endpoint in its
                  configuration document.</t>

                  <t>When the client requests an RPT at the token endpoint
                  with pushed claims as its first step after receiving a
                  permission ticket.</t>
                </list></t>

              <t>An authorization assessment phase (as defined in <xref
              target="authorization-assessment" />). This phase involves the
              authorization server assembling and evaluating policy
              conditions, scopes, claims, and other relevant information in
              evidence in order to mitigate access authorization risk. This
              phase occurs first in the authorization process when the client
              requests an RPT at the token endpoint as its first step after
              receiving a permission ticket without pushing any claims.</t>

              <t>An authorization result phase (as defined in <xref
              target="authorization-assessment" />). In this phase, the
              authorization server either returns a success code (as defined
              in <xref target="give-rpt" />), an RPT, and an optional PCT, or
              an error code (as defined in <xref
              target="authorization-failure" />). If the error code is <spanx
              style="verb">need_info</spanx>, the authorization server
              provides a permission ticket, giving the client an opportunity
              once again to loop within the same authorization process.</t>
            </list></t>

          <t>Different choices of phase order, claim collection style, and use
          of the <spanx style="verb">error_details</spanx> hints inside <spanx
          style="verb">need_info</spanx> might be best suited for different
          deployment ecosystems. For example, where no pre-established
          relationship is expected between the resource owner's authorization
          server and the requesting party, initial requesting party
          redirection and a <spanx style="verb">redirect_user</spanx> hint may
          be a useful pattern, at which point the authorization server might
          either authenticate the requesting party locally or serve as a
          relying party for a remote identity provider. Where a common
          authorization server also functions as an identity provider for all
          resource owners and requesting parties, having the client push claim
          tokens sourced from that central server itself with a pre-negotiated
          format and contents may be an alternate useful pattern.</t>
        </section>

        <section anchor="resource-server-interface"
                 title="Protected Resource Interface and Related Resource Server Actions">
          <t>As noted in <xref target="fed-authz" />, this specification
          defines flows for protecting resources exposed only in the form of
          an HTTP service. The digital resources MAY take any form (for
          example, API endpoints).</t>

          <t>Once a resource is registered for protection, and until it has
          been deregistered, the resource server MUST require the client to
          present a valid RPT with sufficient permissions before giving
          access.</t>

          <t>Note: The following aspects of the resource server-client
          relationship are out of scope of this specification:<list
              style="symbols">
              <t>How the client acquired knowledge of the resource server's
              interface and the specific endpoint of the desired protected
              resource. For example, the resource server might have a formally
              documented API or it might serve up a simple web page, and the
              resource owner might have advertised the endpoint publicly on a
              blog or other website, listed it in a discovery service, or
              emailed a link to a particular intended requesting party.</t>

              <t>The impetus for the client's access attempt. For example, an
              end-user requesting party might have clicked on a publicly
              available thumbnail representation of a graphics-based resource
              to retrieve a protected higher-resolution version.</t>
            </list></t>
        </section>
      </section>
    </section>

    <section anchor="am-endpoints" title="Authorization Server Configuration">
      <t>The authorization server supplies configuration information in order
      to document its endpoints and the major conformance options it
      supports.</t>

      <t>Where this specification does not already require optional features
      to be documented, it is RECOMMENDED that authorization server deployers
      document any profiled or extended features explicitly, ideally by
      supplying the URI identifying each UMA profile and extension in its
      <spanx style="verb">uma_profiles_supported</spanx> configuration
      property, and by using extension configuration properties to indicate
      specific usage details as necessary.</t>

      <section anchor="config-properties" title="Configuration Properties">
        <t>The authorization server has configuration properties as follows.
        <list hangIndent="6" style="hanging">
            <t hangText="issuer"><vspace />REQUIRED. A URI with no query or
            fragment component that the authorization server asserts as its
            issuer identifier. This value MUST be identical to the web
            location of the configuration document minus the <spanx
            style="verb">.well-known/uma2-configuration</spanx> path
            components.</t>

            <t hangText="uma_profiles_supported"><vspace />OPTIONAL. UMA
            profiles supported by this authorization server. The property
            value is an array of string values, where each string value is a
            URI identifying an UMA profile.</t>

            <t hangText="registration_endpoint"><vspace />OPTIONAL. The
            endpoint to use for performing dynamic client registration in the
            case of the use of <xref target="RFC7591" /> or <xref
            target="OIDCDynClientReg" />. The presence of this property
            indicates authorization server support for dynamic client
            registration feature; its absence indicates a lack of support. If
            the authorization server supports dynamic client registration, it
            MUST allow client applications to register a <spanx
            style="verb">claims_redirect_uri</spanx> metadata field, as
            defined in <xref target="claim-redirect" />.</t>

            <t hangText="token_endpoint"><vspace />REQUIRED. The endpoint URI
            at which the resource server asks the authorization server for a
            PAT on behalf of the resource owner (by requesting the OAuth scope
            <spanx style="verb">uma_protection</spanx>) and at which the
            client asks the authorization server for an RPT on behalf of the
            requesting party using the UMA grant.</t>

            <t hangText="authorization_endpoint"><vspace />REQUIRED. The
            endpoint URI at which the resource server gathers the
            authorization of an end-user resource owner for PAT issuance. Note
            that the UMA grant does not involve the client gathering the
            authorization of an end-user requesting party directly.</t>

            <t hangText="claims_interaction_endpoint"><vspace />OPTIONAL. A
            static endpoint URI at which the authorization server declares
            that it interacts with end-user requesting parties to gather
            claims. If the authorization server also provides a claims
            interaction endpoint URI as part of its <spanx
            style="verb">redirect_user</spanx> hint in a <spanx
            style="verb">need_info</spanx> response to a client on
            authorization failure (see <xref
            target="authorization-failure" />), that value overrides the one
            provided in this configuration property. Providing the static
            endpoint URI is useful for enabling interactive claims gathering
            prior to any pushed-claims flows taking place, so that, for
            example, it is possible to gather requesting party authorization
            interactively for collecting all other claims in a "silent"
            fashion.</t>

            <t hangText="introspection_endpoint"><vspace />REQUIRED. The
            endpoint URI at which the resource server introspects an RPT
            presented to it by a client. Usage of this endpoint is defined by
            <xref target="RFC7662" /> and <xref
            target="token-introspection" />. A valid PAT MUST accompany
            requests to this protected endpoint.</t>

            <t hangText="resource_registration_endpoint"><vspace />REQUIRED.
            The endpoint URI at which the resource server registers resources
            to put them under authorization manager protection. Usage of this
            endpoint is defined by <xref target="OAuth-resource-reg" /> and
            <xref target="register-resources" />. A valid PAT MUST accompany
            requests to this protected endpoint.</t>

            <t hangText="permission_endpoint"><vspace />REQUIRED. The endpoint
            URI at which the resource server requests permissions on the
            client's behalf. Usage of this endpoint is defined by <xref
            target="register-permission" />. A valid PAT MUST accompany
            requests to this protected endpoint.</t>
          </list></t>
      </section>

      <section anchor="config-doc-discovery-endpoint"
               title="Configuration Document and Discovery Endpoint">
        <t>The authorization server MUST make its configuration properties
        available in a JSON document at a discovery endpoint formed by
        concatenating the string <spanx
        style="verb">/.well-known/uma2-configuration</spanx> to the <spanx
        style="verb">issuer</spanx> configuration property value as defined in
        <xref target="config-properties" />. The syntax and semantics of
        <spanx style="verb">/.well-known</spanx> are defined in <xref
        target="RFC5785" /> and apply to the <spanx
        style="verb">issuer</spanx> value when it contains no path
        component.</t>
      </section>

      <section title="Requests to Authorization Server for Configuration Document">
        <t>Any entity, such as a resource server or client, seeking an
        authorization server configuration document MUST query it using an
        HTTP GET request.</t>

        <figure>
          <preamble>Example:</preamble>

          <artwork><![CDATA[GET /.well-known/uma2-configuration HTTP/1.1
Host: example.com

]]></artwork>
        </figure>

        <t>If the <spanx style="verb">issuer</spanx> value contains a path
        component, the caller MUST remove any terminating slash before
        appending <spanx
        style="verb">/.well-known/uma2-configuration</spanx>.</t>

        <figure>
          <preamble>For example, the caller would make the following request
          to the issuer <spanx
          style="verb">https://example.com/issuer1</spanx>, since the <spanx
          style="verb">issuer</spanx> value contains a path
          component:</preamble>

          <artwork><![CDATA[GET /issuer1/.well-known/uma2-configuration HTTP/1.1
Host: example.com

]]></artwork>
        </figure>
      </section>

      <section title="Authorization Server Response Containing Configuration Document">
        <t>A successful authorization server response to a configuration
        document query MUST use the HTTP 200 (OK) status code and return a
        JSON object using the <spanx style="verb">application/json</spanx>
        content type containing the configuration properties as defined in
        <xref target="config-properties" />.</t>

        <figure>
          <preamble>Example of a configuration document returned in response
          to a query (note the use of <spanx style="verb">https:</spanx> for
          endpoints throughout):</preamble>

          <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
...

{  
   "issuer":"https://example.com",
   "registration_endpoint":"https://as.example.com/dyn_client_reg",
   "token_endpoint":"https://as.example.com/token",
   "authorization_endpoint":"https://as.example.com/authz",
   "claims_interaction_endpoint":"https://as.example.com/claims",
   "resource_registration_endpoint":"https://as.example.com/rs/rsrc",
   "introspection_endpoint":"https://as.example.com/rs/status",
   "permission_endpoint":"https://as.example.com/rs/perm"
}
]]></artwork>
        </figure>

        <figure>
          <preamble>Example of a configuration document response containing
          the <spanx style="verb">uma_profiles_supported</spanx> configuration
          property indicating that the authorization server supports an UMA
          profile related to the OpenID Connect-based claim token
          format:</preamble>

          <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
...

{  
   "issuer":"https://example.com",
   "uma_profiles_supported":"http://openid.net/specs/openid-connect-core-1_0.html#IDToken",
   "registration_endpoint":"https://as.example.com/dyn_client_reg",
   "token_endpoint":"https://as.example.com/token",
   "authorization_endpoint":"https://as.example.com/authz",
   "claims_interaction_endpoint":"https://as.example.com/claims",
   "resource_registration_endpoint":"https://as.example.com/rs/rsrc",
   "introspection_endpoint":"https://as.example.com/rs/status",
   "permission_endpoint":"https://as.example.com/rs/perm"
}
]]></artwork>
        </figure>
      </section>
    </section>

    <section anchor="protocol-flow-details-sec" title="Protocol Flow Details">
      <t>Throughout this section, non-normative correspondences to the steps
      in <xref target="protocol-flow" /> are noted where applicable.</t>

      <t>The recipient of each request message SHOULD respond unless it
      detects a security concern, such as a suspected denial of service attack
      that can be mitigated by rate limiting.</t>

      <section anchor="rs-gets-pat" title="Resource Server Obtains PAT">
        <t>In this process, the resource server obtains a PAT on the resource
        owner's behalf from the authorization server through an <xref
        target="RFC6749" /> grant flow.</t>

        <t>This process assumes that the authorization server has provided the
        resource server with OAuth client credentials, either dynamically
        through <xref target="RFC7591" /> or <xref
        target="OIDCDynClientReg" />, or alternatively through a static
        process. This process corresponds to step 1 in <xref
        target="protocol-flow" />.</t>

        <t>After the resource server obtains a PAT, its next step is defined
        in <xref target="register-resources" />.</t>
      </section>

      <section anchor="register-resources"
               title="Resource Server Registers Resource for Protection">
        <t>In an ongoing fashion, the resource server registers any resources
        with the authorization server to put them under protection as
        required, using the resource registration endpoint of the protection
        API as defined by <xref target="OAuth-resource-reg" />. (See that
        specification for a worked example, and see <xref target="UMA-Impl" />
        for a discussion of timing of resource registration.)</t>

        <t>This process assumes that the resource server has discovered the
        authorization server's configuration document and endpoints as needed.
        This process corresponds to step 2 in <xref
        target="protocol-flow" />.</t>

        <t>Once the resource server has put a resource under protection, the
        next option to act is defined in <xref
        target="client-attempts-tokenless-access" />.</t>
      </section>

      <section anchor="client-attempts-tokenless-access"
               title="Client Attempts Access to Protected Resource With No Token">
        <t>In this process, the client attempts access to a resource that the
        resource server considers protected, without having presented a token
        for authorized access.</t>

        <t>This process corresponds to step 3 in <xref
        target="protocol-flow" />. This process assumes that the resource
        server has already registered any relevant resources for protection
        prior to the client's tokenless access attempt.</t>

        <t>Note: This process does not assume that any policy conditions have
        already been defined at the authorization server. A variety of
        combinations of access attempt flows and resource owner policy
        condition-setting interfaces are possible.</t>

        <figure>
          <preamble>Example of a client request at a protected resource
          carrying no token:</preamble>

          <artwork><![CDATA[GET /users/alice/album/photo.jpg HTTP/1.1
Host: photoz.example.com
...
]]></artwork>
        </figure>

        <t>After the client's access attempt, the resource server's next
        option to act is defined in <xref target="register-permission" />
        (requesting permissions, which involves the authorization server), and
        its next option to respond to the client is defined in <xref
        target="rs-tokenless-response" />.</t>
      </section>

      <section anchor="register-permission"
               title="Resource Server Requests Permissions on Client's Behalf With Authorization Server">
        <t>In this process, the resource server requests one or more
        permissions on the client's behalf at the authorization server's
        permission endpoint.</t>

        <t>This process assumes that the client's request at the protected
        resource had no token (or had an invalid RPT or insufficient
        permissions associated with the RPT). The success path of this process
        corresponds to steps 4 and 5 in <xref target="protocol-flow" />.</t>

        <t>The resource server requests one or more permissions (resource
        identifiers and corresponding scopes) with the authorization server on
        the client's behalf. The process of choosing what permissions to
        request may require mapping the client's access attempt to its own
        desired resource identifier(s), and their resource owner and
        authorization server, before proceeding. The resource server SHOULD
        request a permission that is appropriate for the client&rsquo;s access
        attempt. The resource server MAY request multiple permissions, and any
        permission MAY have zero scopes associated with it. Requesting
        multiple permissions may be appropriate, for example, in cases where
        the resource server expects the requesting party to need access to
        several related resources if they need access to any one of the
        resources. Requesting a permission with no scopes may be appropriate,
        for example, in cases where an access attempt involves an API call
        that is ambiguous without further context (role-based scopes such as
        <spanx style="verb">user</spanx> and <spanx style="verb">admin</spanx>
        may have this ambiguous quality, and an explicit client request for a
        particular scope at the token endpoint later can clarify the desired
        access). The resource server SHOULD document its intended pattern of
        permission requests in order to assist the client in pre-registering
        for and requesting appropriate scopes at the authorization server. See
        <xref target="UMA-Impl" /> for a discussion of permission request
        patterns.</t>

        <t>The PAT provided in the API request enables the authorization
        server to map the resource server's request to the appropriate
        resource owner. It is only possible to request permissions for access
        to the resources of one resource owner, protected by one authorization
        server, at a time.</t>

        <t>In its response, the authorization server returns a permission
        ticket for the resource server to give to the client that represents
        the same permissions that the resource server requested.</t>

        <t>After this process, if the resource server was requesting
        permissions due to a tokenless access attempt, its next option is
        defined in <xref target="rs-tokenless-response" />. (If it was
        requesting permissions due to an access attempt with an RPT, defined
        in <xref target="client-rpt-attempt" />, its next option is defined in
        <xref target="rs-rpt-response" />.)</t>

        <section title="Resource Server Request to Permission Endpoint">
          <t>The resource server uses the POST method at the permission
          endpoint. The body of the HTTP request message contains a JSON
          object (for a request containing a single resource identifier) or
          array (for a request containing more than one resource identifier)
          providing the request, using a format derived from the resource
          description format specified in <xref
          target="OAuth-resource-reg" />, as follows. The object used in both
          forms has the following properties:<list style="hanging">
              <t hangText="resource_id">REQUIRED. The identifier for a
              resource to which the resource server is requesting permission
              on behalf of the client. The identifier MUST correspond to a
              resource that was previously registered.</t>

              <t hangText="resource_scopes">REQUIRED. An array referencing one
              or more identifiers of scopes to which the resource server is
              requesting access for this resource on behalf of the client.
              Each scope identifier MUST correspond to a scope that was
              previously registered by this resource server for the referenced
              resource.</t>
            </list></t>

          <figure>
            <preamble>Example of an HTTP request for a single permission at
            the authorization server's permission endpoint, with a PAT in the
            header:</preamble>

            <artwork><![CDATA[POST /host/rsrc HTTP/1.1
Content-Type: application/json
Host: as.example.com
Authorization: Bearer 204c69636b6c69
...

{  
   "resource_id":"112210f47de98100",
   "resource_scopes":[  
      "view",
      "http://photoz.example.com/dev/actions/print"
   ]
}
]]></artwork>
          </figure>

          <figure>
            <preamble>Example of an HTTP request for multiple permissions at
            the authorization server's permission endpoint, with a PAT in the
            header:</preamble>

            <artwork><![CDATA[POST /host/rsrc HTTP/1.1
Content-Type: application/json
Host: as.example.com
Authorization: Bearer 204c69636b6c69
...

[  
   {  
      "resource_id":"7b727369647d",
      "resource_scopes":[  
         "view",
         "crop",
         "lightbox"
      ]
   },
   {  
      "resource_id":"7b72736964327d",
      "resource_scopes":[  
         "view",
         "layout",
         "print"
      ]
   },
   {  
      "resource_id":"7b72736964337d",
      "resource_scopes":[  
         "http://www.example.com/scopes/all"
      ]
   }
]
]]></artwork>
          </figure>
        </section>

        <section anchor="ticket-management"
                 title="Permission Ticket Creation and Management">
          <t>The authorization server uses a permission ticket to maintain the
          state of a set of requested permissions, initially conveyed on the
          client's behalf by the resource server at attempted resource access
          time, for the period of time that the client continues to seek
          authorization for that attempted access.</t>

          <t>The authorization server MUST make permission ticket values
          unguessable by resource servers and clients. Within these
          constraints, however, the authorization server MAY format the ticket
          however it chooses, for example either as a random string that
          references data held on the server or by including data within the
          ticket itself.</t>

          <t>Permission tickets MUST be single-use. This prevents
          susceptibility to a session fixation attack.</t>

          <t>The authorization server MUST invalidate a permission ticket when
          the client presents the permission ticket to either the token
          endpoint or the interactive claims endpoint; or when the permission
          ticket expires, whichever occurs first.</t>
        </section>

        <section title="Authorization Server Response to Resource Server on Permission Request Success">
          <t>If the authorization server is successful in creating a
          permission ticket in response to the resource server's request, it
          responds with an HTTP 201 (Created) status code and includes the
          <spanx style="verb">ticket</spanx> property in the JSON-formatted
          body.</t>

          <figure>
            <preamble>For example:</preamble>

            <artwork><![CDATA[HTTP/1.1 201 Created
Content-Type: application/json
...

{  
   "ticket":"016f84e8-f9b9-11e0-bd6f-0021cc6004de"
}
]]></artwork>
          </figure>
        </section>

        <section title="Authorization Server Response to Resource Server on Permission Request Failure">
          <t>If the resource server's permission registration request is
          authenticated properly but fails due to other reasons, the
          authorization server responds with an HTTP 400 (Bad Request) status
          code and includes one of the following UMA error codes (see <xref
          target="uma-error-response" /> for more information about error
          codes and responses):<list style="hanging">
              <t hangText="invalid_resource_id">At least one of the provided
              resource identifiers was not found at the authorization
              server.</t>

              <t hangText="invalid_scope">At least one of the scopes included
              in the request was not registered previously by this resource
              server for the referenced resource.</t>
            </list></t>
        </section>
      </section>

      <section anchor="rs-tokenless-response"
               title="Resource Server Responds to Client's Tokenless Access Attempt">
        <t>In this process, the resource server responds to the client's
        tokenless access attempt on a protected resource.</t>

        <t>This process assumes that the resource server sought a permission
        ticket from the authorization server after a tokenless access attempt
        by the client. The success path of this process corresponds to step 6
        in <xref target="protocol-flow" />.</t>

        <t>After the resource server responds to the client's access attempt,
        assuming the client received a permission ticket, the client's next
        option is defined in <xref target="seek-authorization" />.</t>

        <section anchor="permission-success-to-client"
                 title="Resource Server Response to Client on Permission Request Success">
          <t>If the resource server successfully obtained a permission ticket
          from the authorization server, it responds to the client by
          providing a <spanx style="verb">WWW-Authenticate</spanx> header with
          the authentication scheme <spanx style="verb">UMA</spanx>, with the
          <spanx style="verb">issuer</spanx> URI from the authorization
          server's configuration document in an <spanx
          style="verb">as_uri</spanx> parameter and the just-received
          permission ticket in a <spanx style="verb">ticket</spanx>
          parameter.</t>

          <figure>
            <preamble>For example:</preamble>

            <artwork><![CDATA[HTTP/1.1 401 Unauthorized
WWW-Authenticate: UMA realm="example",
  as_uri="https://as.example.com",
  ticket="016f84e8-f9b9-11e0-bd6f-0021cc6004de"
...
]]></artwork>
          </figure>
        </section>

        <section anchor="permission-failure-to-client"
                 title="Resource Server Response to Client on Permission Request Failure">
          <t>If the resource server received an error of any kind when trying
          to request permissions such that it did not receive a permission
          ticket, then it is unable to create a <spanx
          style="verb">WWW-Authenticate: UMA</spanx> header and includes a
          header of the following form in its response to the client: <spanx
          style="verb">Warning: 199 - "UMA Authorization Server
          Unreachable"</spanx>.</t>

          <figure>
            <preamble>For example:</preamble>

            <artwork><![CDATA[HTTP/1.1 403 Forbidden
Warning: 199 - "UMA Authorization Server Unreachable"
...
]]></artwork>
          </figure>
        </section>
      </section>

      <section anchor="seek-authorization"
               title="Client Seeks Authorization on Requesting Party's Behalf (UMA Grant)">
        <t>This section defines the extension OAuth grant called the UMA
        grant. It defines forms of the client request (corresponding to steps
        7 and 11 in <xref target="protocol-flow" />), redirect mechanisms for
        requesting party interaction (step 10), authorization assessment (step
        8), and forms of the authorization server response to the client
        request (steps 9 and 11). <xref target="uma-grant-type" /> defines the
        <spanx style="verb">grant_type</spanx> URI.</t>

        <t>The overall process assumes that:<list style="symbols">
            <t>The client has obtained a permission ticket and an
            authorization server location from the resource server.</t>

            <t>The client has discovered the authorization server's
            configuration document and endpoints as needed.</t>

            <t>The client has obtained OAuth client credentials from the
            authorization server, either dynamically through <xref
            target="RFC7591" /> or <xref target="OIDCDynClientReg" />, or
            alternatively through a static process, and is prepared to
            authenticate itself to the token endpoint.</t>
          </list></t>

        <t>The client seeks the authorization server's authorization for
        access to the protected resource on the requesting party's behalf, by
        requesting an RPT at the authorization server's token endpoint and
        possibly by redirecting an end-user requesting party to the
        authorization server's claims interaction endpoint. The authorization
        process thus begun potentially includes looping through the
        authorization seeking phase, and subsequent authorization server
        responses potentially include hints as to what further requests should
        contain. See <xref target="authorization-api" /> for information about
        the authorization process and the REQUIRED authorization assessment
        process (corresponding to step 8 in <xref
        target="protocol-flow" />).</t>

        <t>The client MAY redirect an end-user requesting party for
        interactive claims gathering prior to requesting an RPT at the token
        endpoint. An initial client redirect of an end-user requesting party
        to the claims interaction endpoint assumes, in addition to the
        assumptions above, that the authorization server has statically
        declared its claims interaction endpoint in its configuration
        document.</t>

        <t>Unless the authorization server responds with an error, the
        client's next option to respond is defined in <xref
        target="client-rpt-attempt" />.</t>

        <section anchor="uma-grant-type"
                 title="Client Request to Authorization Server for RPT">
          <t>The client makes a request to the token endpoint by sending the
          following parameters using the <spanx
          style="verb">"application/x-www-form-urlencoded"</spanx> format per
          <xref target="RFC6749" /> Appendix B with a character encoding of
          UTF-8 in the HTTP request entity-body:<list style="hanging">
              <t hangText="grant_type">REQUIRED. MUST be the value <spanx
              style="verb">urn:ietf:params:oauth:grant-type:uma-ticket</spanx>.</t>

              <t hangText="ticket">REQUIRED. The permission ticket.</t>

              <t hangText="rpt">OPTIONAL. Supplying an existing RPT gives the
              authorization server the option of upgrading that RPT instead of
              issuing a new one (see <xref
              target="authorization-assessment" /> for more about this
              option). Note: An RPT is bound to a specific resource owner, but
              it is out of scope of this specification for a protected
              resource's location to reveal the resource owner's identity to
              the client, so the client may not be aware of which RPT it
              received is bound to which resource owner.</t>

              <t hangText="scope">OPTIONAL. A string of space-separated values
              representing requested scopes. For any requested scope to be
              considered, the client MUST have pre-registered the same scope
              with the authorization server. The client should consult the
              resource server&rsquo;s API documentation for details about
              permissions and their scopes expected to be included in
              permission requests.</t>

              <t hangText="claim_tokens">OPTIONAL. Claims pushed directly from
              the client to the authorization server. This allows the client
              to provide information relevant to the authorization process
              already in its possession to the authorization server. It MAY
              provide this information on a first or subsequent request to
              this endpoint. See <xref target="claim-push" /> for information
              on providing pushed claims in claim tokens.</t>

              <t hangText="pct">OPTIONAL. If the authorization server
              previously returned a PCT along with an RPT, the client MAY
              include the PCT in order to optimize the process of seeking a
              new RPT. Given that some claims represented by a PCT are likely
              to contain identity information about a requesting party, a
              client supplying a PCT in its RPT request MUST make a best
              effort to ensure that the requesting party using the client now
              is the same as the requesting party that was associated with the
              PCT when it was issued. See <xref target="sec-consid-pct" /> for
              additional PCT security considerations. See <xref
              target="give-rpt" /> for the form of the authorization server's
              response with a PCT.</t>
            </list></t>

          <figure>
            <preamble>Example of a request message containing a permission
            ticket and no optional parts:</preamble>

            <artwork><![CDATA[POST /token HTTP/1.1
Host: as.example.com
Authorization: Basic jwfLG53^sad$#f
...
grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Auma-ticket&
ticket=016f84e8-f9b9-11e0-bd6f-0021cc6004de
]]></artwork>
          </figure>

          <figure>
            <preamble>Example of a request message containing a permission
            ticket and an RPT for upgrading:</preamble>

            <artwork><![CDATA[POST /token HTTP/1.1
Host: as.example.com
Authorization: Basic jwfLG53^sad$#f
...
grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Auma-ticket&
ticket=016f84e8-f9b9-11e0-bd6f-0021cc6004de
&rpt=sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv
]]></artwork>
          </figure>
        </section>

        <section anchor="claim-push"
                 title="Client Push of Claims to Authorization Server in Claim Tokens">
          <t>In order to push claims to the authorization server, the client
          provides the <spanx style="verb">claim_tokens</spanx> property in
          the body of its request message to the token endpoint as
          follows:<list style="hanging">
              <t hangText="claim_tokens">REQUIRED. An array of objects with
              the following properties:<list style="hanging">
                  <t hangText="format">REQUIRED. A string specifying the
                  format of the accompanying claim tokens. The string MAY be a
                  URI.</t>

                  <t hangText="token">REQUIRED. A string containing the claim
                  information in the indicated format, base64url encoded if it
                  is not already so encoded. If claim token format features
                  are included that require special interpretation, the client
                  and authorization server are assumed to have a prior
                  relationship that establishes how to interpret these
                  features. For example, if the referenced format equates to
                  SAML 2.0 assertions and the claim token contains audience
                  restrictions, it is the joint responsibility of the client
                  and authorization server to determine the proper audience
                  values that enable successful token consumption (see for
                  <xref target="trust-push" /> relevant security
                  considerations).</t>
                </list></t>
            </list></t>

          <figure>
            <preamble>Example:</preamble>

            <artwork><![CDATA[POST /token HTTP/1.1
Host: www.example.com
Authorization: Bearer jwfLG53^sad$#f
...

{  
   "rpt":"sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
   "ticket":"016f84e8-f9b9-11e0-bd6f-0021cc6004de",
   "claim_tokens":[  
      {  
         "format":"http://openid.net/specs/openid-connect-core-1_0.html#IDToken",
         "token":"..."
      }
   ]
}
]]></artwork>
          </figure>

          <t>This specification provides a way to define profiles of claim
          token formats for use with UMA (see <xref target="profiles" />). The
          authorization server SHOULD document the profiles it supports in its
          configuration document.</t>
        </section>

        <section anchor="claim-redirect"
                 title="Client Redirect of Requesting Party to Authorization Server for Interactive Claims-Gathering">
          <t>The client redirects an end-user requesting party' to the claims
          interaction endpoint for whatever interactive claims-gathering
          processes the authorization server requires, such as presenting a
          questionnaire, a local or federated login form, or an opportunity to
          authorize persistent storage of claims for use in later
          authorization processes (the latter potentially being associated
          with a PCT). One motivation for such redirection could have been
          receipt of an authorization failure response containing an <spanx
          style="verb">error_details</spanx> structure with a <spanx
          style="verb">redirect_user</spanx> hint (see <xref
          target="authorization-failure" />).</t>

          <t>The client constructs the request URI by adding the following
          parameters to the query component of the claims interaction endpoint
          URI using the <spanx
          style="verb">application/x-www-form-urlencoded</spanx> format:<list
              style="hanging">
              <t hangText="client_id">REQUIRED. The client's identifier issued
              by the authorization server.</t>

              <t hangText="claims_redirect_uri">OPTIONAL. The URI to which the
              client wishes the authorization server to direct the requesting
              party's user agent after completing its interaction. The URI
              MUST be absolute, MAY contain an <spanx
              style="verb">application/x-www-form-urlencoded</spanx>-formatted
              query parameter component that MUST be retained when adding
              additional parameters, and MUST NOT contain a fragment
              component. The authorization server SHOULD require all clients
              to register their claims redirection endpoint. Claims
              redirection URIs are different from the redirection URIs defined
              in <xref target="RFC6749" /> in that they are intended for the
              exclusive use of requesting parties and not resource owners.
              Therefore, authorization servers MUST NOT redirect requesting
              parties to pre-registered redirection URIs defined in <xref
              target="RFC6749" /> unless such URIs are also pre-registered
              specifically as claims redirection URIs. If the URI is
              pre-registered, this URI MUST exactly match one of the
              pre-registered claims redirection URIs, with the matching
              performed as described in Section 6.2.1 of <xref
              target="RFC3986" /> (Simple String Comparison).</t>

              <t hangText="ticket">REQUIRED. The latest permission ticket
              associated with the client's current request for this requesting
              party.</t>

              <t hangText="state">RECOMMENDED. An opaque value used by the
              client to maintain state between the request and callback. The
              authorization server includes this value when redirecting the
              user agent back to the client. The use of this parameter is for
              preventing cross-site request forgery.</t>
            </list></t>

          <t>See <xref target="redirect-back" /> for the authorization
          server's mechanism for redirecting the requesting party back to the
          client.</t>

          <figure>
            <preamble>Example of a request issued by a client application
            (line breaks are shown only for display convenience):</preamble>

            <artwork><![CDATA[GET /rqp_claims?client_id=some_client_id&state=abc
&ticket=016f84e8-f9b9-11e0-bd6f-0021cc6004de
&claims_redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fredirect_claims HTTP/1.1
Host: as.example.com
]]></artwork>
          </figure>
        </section>

        <section anchor="redirect-back"
                 title="Authorization Server Redirect of Requesting Party Back to Client After Interactive Claims-Gathering">
          <t>At the conclusion of its interaction with the requesting party,
          the authorization server returns the requesting party to the client,
          adding the following parameters to the query component of the claims
          redirection URI using the <spanx
          style="verb">application/x-www-form-urlencoded</spanx> format:<list
              style="hanging">
              <t hangText="authorization_state">REQUIRED. Indicates that the
              authorization server completed its claims-gathering interaction
              with the requesting party with the indicated state:<list
                  style="hanging">
                  <t hangText="claims_submitted">The client is free to return
                  to the token endpoint to seek permissions once again.</t>

                  <t hangText="not_authorized">The client is not authorized to
                  have the desired permissions added.</t>

                  <t hangText="need_info">The authorization server needs
                  additional information in order to determine whether the
                  client is authorized to have these permissions. This
                  response directs the client to return to the token endpoint,
                  where it might be provided with <spanx
                  style="verb">error_details</spanx> hints about additional
                  information needed.</t>

                  <t hangText="request_submitted">The authorization server
                  requires intervention by the resource owner to determine
                  whether permissions can be added. Further immediate
                  interaction between the client, requesting party, and
                  authorization server is out of scope of this
                  specification.</t>
                </list></t>

              <t hangText="ticket">REQUIRED. A permission ticket that allows
              the client to make further requests to the authorization server
              during this attempted authorization. The value MUST NOT be the
              same as the one the client used to make its request.</t>

              <t hangText="state">OPTIONAL. The same state value that the
              client provided in the request. It MUST be present if and only
              if the client provided it.</t>
            </list></t>

          <t>Note: Interactive claim gathering processes are out of scope of
          this specification. The purpose of the interaction is for the
          authorization server to gather information for its own authorization
          assessment purposes. This redirection does not involve sending any
          of the information back to the client.</t>

          <t>Prior to its redirecting the end-user requesting party back and
          preparatory to issuing a PCT, the authorization server MAY use the
          interactive claims-gathering process to gather authorization for
          persisting claims across authorization processes.</t>

          <t>The client MUST ignore unrecognized response parameters. If the
          request fails due to a missing, invalid, or mismatching claims
          redirection URI, or if the client identifier is missing or invalid,
          the authorization server SHOULD inform the requesting party of the
          error and MUST NOT automatically redirect the user agent to the
          invalid redirection URI. If the request fails for reasons other than
          a missing or invalid claims redirection URI, the authorization
          server informs the client by adding an <spanx
          style="verb">error</spanx> parameter to the query component of the
          claims redirection URI using the <spanx
          style="verb">application/x-www-form-urlencoded</spanx> format,
          containing one of the following ASCII error codes:<list
              style="hanging">
              <t hangText="invalid_request">The request is missing a required
              parameter, includes an invalid parameter value (such as an
              invalid or expired ticket), includes a parameter more than once,
              or is otherwise malformed.</t>

              <t hangText="server_error">The authorization server encountered
              an unexpected condition that prevented it from fulfilling the
              request. (This error code is needed because an HTTP 500
              (Internal Server Error) status code cannot be returned to the
              client via an HTTP redirect.)</t>

              <t hangText="temporarily_unavailable">The authorization server
              is currently unable to handle the request due to a temporary
              overloading or maintenance of the server. (This error code is
              needed because an HTTP 503 (Service Unavailable) status code
              cannot be returned to the client via an HTTP redirect.)</t>
            </list></t>

          <figure>
            <preamble>Example of a response issued by an authorization server
            (line breaks are shown only for display convenience):</preamble>

            <artwork><![CDATA[GET /redirect_claims?&state=abc
&authorization_state=claims_submitted HTTP/1.1
Host: client.example.com
]]></artwork>
          </figure>
        </section>

        <section anchor="authorization-assessment"
                 title="Authorization Assessment and Results Determination">
          <t>When the authorization server has received a request for an RPT
          from a client, it assesses whether the client is authorized to
          receive the requested RPT and determines the results.</t>

          <t>The authorization server MUST apply the following conceptual
          authorization assessment calculation in determining authorization
          results. Note: As this calculation is internal to authorization
          server operations, its particulars are out of scope of this
          specification.</t>

          <t>In this assessment calculation, let a set called
          <spanx>ClientRegistered</spanx> stand for the scopes for which the
          client pre-registered at the authorization server, either
          dynamically or through some static process. Let a set called
          <spanx>ClientRequested</spanx> stand for the scopes the client most
          recently requested at the token endpoint. Let a set called
          <spanx>PermissionTicket</spanx> stand for the scopes associated with
          the most recent permission ticket presented by the client at the
          token endpoint.<list style="numbers">
              <t>Determine the set of requested scopes as follows:
              <spanx>RequestedScopes = PermissionTicket &#8746;
              (ClientRequested &#8745; ClientRegistered)</spanx>.</t>

              <t>Determine all operative policy conditions, and claims and
              other relevant information serving as input to them, for each
              scope assocated with <spanx>RequestedScopes</spanx> and evaluate
              its authorization status. Note: Claims and other information
              gathered during one authorization process may become out of date
              in terms of their relevance for future authorization processes.
              The authorization server is responsible for managing such
              relevance wherever information associated with a PCT, or other
              persistently stored information, is used as input to
              authorization, including policy conditions themselves. Note:
              Since the authorization server's policy expression and
              evaluation capabilities are out of scope, any one implementation
              might take a simple or arbitrarily complex form, with varying
              abilities to combine or perform calculations over claims and
              their values. For example, logical operations such as accepting
              "either claim value A or B" as correct may be possible.</t>

              <t>For each scope that passes the evaluation, add it to a set
              called <spanx>CandidateGrantedScopes</spanx>.</t>
            </list></t>

          <t>In the authorization results phase, the authorization server
          examines the <spanx>CandidateGrantedScopes</spanx> set to determine
          whether to issue an RPT and what permissions should be associated
          with it.<list style="symbols">
              <t>If the value of <spanx>CandidateGrantedScopes</spanx> is
              null, the result is authorization failure and the authorization
              server MUST subsequently issue one of the error codes (<xref
              target="authorization-failure" />).</t>

              <t>If the value is non-null and <spanx>CandidateGrantedScopes =
              RequestedScopes</spanx>, then the authorization server MUST
              subsequently respond with a success code and issue an RPT
              (upgrading as appropriate; see below).</t>

              <t>If the value is non-null and <spanx>CandidateGrantedScopes
              &lt; RequestedScopes</spanx>, the authorization server MUST
              subsequently issue either an RPT containing
              <spanx>CandidateGrantedScopes</spanx> (upgrading as appropriate;
              see below), or one of the error codes. The reason for the two
              options is that granting only partial scopes may not be useful
              for the client's and requesting party's purposes in seeking
              authorization for access.</t>
            </list></t>

          <t>The authorization server MAY implement RPT upgrading. It is
          RECOMMENDED for the authorization server to document its practices
          regarding RPT upgrades and to act consistently with respect to RPT
          upgrades so as to enable clients to manage tokens efficiently. If
          the authorization server has implemented RPT upgrading, the client
          has submitted an RPT in its request, and the result is success, the
          authorization server adds the permissions from the client's previous
          RPT to the RPT it is about to issue, setting the value of the <spanx
          style="verb">upgraded</spanx> property in its response containing
          the upgraded RPT to <spanx style="verb">true</spanx> (see <xref
          target="give-rpt" />).</t>

          <t>The following example illustrates authorization assessment and
          partial results: <list style="symbols">
              <t>Assume a resource server has registered two resources on
              behalf of a resource owner, <spanx style="verb">photo1</spanx>
              with scopes <spanx style="verb">view</spanx>, <spanx
              style="verb">print</spanx>, and <spanx
              style="verb">download</spanx> and <spanx
              style="verb">photo2</spanx> with scopes <spanx
              style="verb">view</spanx>, <spanx style="verb">print</spanx>,
              <spanx style="verb">download</spanx>, and <spanx
              style="verb">link</spanx>.</t>

              <t>The resource owner has set policy conditions that allow
              access to <spanx style="verb">photo1</spanx> only by requesting
              parties that can provide claims proving they are family members,
              and that allow access to <spanx style="verb">photo2</spanx> only
              by requesting parties that can provide claims saying they agree
              not to download, sell, or market any photo.</t>

              <t>The client has pre-registered with the authorization server
              for <spanx style="verb">download</spanx> scope (so
              <spanx>ClientRegistered</spanx> contains <spanx
              style="verb">download</spanx>).</t>

              <t>The client attempts what the resource server interprets as
              <spanx style="verb">view</spanx> access to <spanx
              style="verb">photo1</spanx>.</t>

              <t>The resource server chooses to request a permission for
              <spanx style="verb">view</spanx> and <spanx
              style="verb">print</spanx> scopes for <spanx
              style="verb">photo1</spanx> on the client's behalf (so
              <spanx>PermissionTicket</spanx> contains <spanx
              style="verb">view</spanx> and <spanx
              style="verb">print</spanx>).</t>

              <t>The client requests <spanx style="verb">download</spanx>
              scope on the requesting party's behalf while requesting an RPT
              from the authorization server (so <spanx>ClientRequested</spanx>
              contains <spanx style="verb">download</spanx>).</t>

              <t>The authorization server determines that
              <spanx>RequestedScopes</spanx> contains <spanx
              style="verb">view</spanx>, <spanx style="verb">print</spanx>,
              and <spanx style="verb">download</spanx>.</t>

              <t>Based on the authorization server's evaluation of policy
              conditions associated with these scopes,
              <spanx>CandidateGrantedScopes</spanx> contains only <spanx
              style="verb">view</spanx> and <spanx style="verb">print</spanx>
              and not <spanx style="verb">download</spanx> (the dynamically
              requested scope), which is less than in
              <spanx>RequestedScopes</spanx>.</t>

              <t>The authorization server has a choice whether to issue an RPT
              in this case.</t>
            </list></t>

          <t>Note: While a reasonable approach for most scenarios is to
          implement the classic security stance of default-deny ("everything
          that is not expressly allowed is forbidden"), corner cases can
          inadvertently result in default-permit behavior. For example, it is
          insufficient simply to assume that all resources have some non-zero
          set of claims required for access, and then accept an empty set of
          supplied claims as sufficient for access.</t>
        </section>

        <section anchor="give-rpt"
                 title="Authorization Server Response to Client on Authorization Success">
          <t>If the authorization server's assessment process results in
          issuance of permissions (see <xref
          target="authorization-assessment" />), it returns an HTTP 200 (OK)
          status code with a response body containing the RPT with which it
          has associated the requested permissions. The authorization server
          MAY return a refresh token. See <xref target="refresh" /> for more
          information about refreshing an RPT.</t>

          <t>The authorization server MAY add the following properties to its
          response:<list style="hanging">
              <t hangText="pct">OPTIONAL. A correlation handle representing
              claims and other information collected during this authorization
              process, which the client is able to present later in order to
              optimize future authorization processes on behalf of a
              requesting party. The PCT MUST be unguessable by an attacker.
              The PCT MUST NOT disclose claims from the requesting party
              directly to possessors of the PCT. Instead, such claims SHOULD
              be associated by reference to the PCT or expressed in an
              encrypted format that can be decrypted only by the authorization
              server that issued the PCT. See <xref target="claim-redirect" />
              for more information about the end-user requesting party
              interaction option. See <xref target="sec-consid-pct" /> for
              additional PCT security considerations.</t>

              <t hangText="upgraded">OPTIONAL. Boolean value. If the client
              submits an RPT in the request and the authorization server
              includes the permissions of the RPT from the request as part of
              the newly issued RPT, then it MUST set this value to <spanx
              style="verb">true</spanx>. If it sets the value to <spanx
              style="verb">false</spanx> or the value is absent, the client
              MUST act as if the newly issued RPT does not include the
              permissions associated with the RPT from the request.</t>
            </list></t>

          <t>The authorization server MAY include any of the parameters
          defined in Section 5.1 of <xref target="RFC6749" /> on its response,
          except that it is NOT RECOMMENDED to include the <spanx
          style="verb">scope</spanx> parameter. This is because RPTs are
          associated with scopes that are associated with specific
          resources.</t>

          <t>If the authorization server is upgrading an RPT, and the RPT
          string is new rather than repeating the RPT provided by the client
          in the request, then the authorization server SHOULD revoke the
          existing RPT, if possible, and the client MUST discard its previous
          RPT. If the authorization server does not upgrade the RPT but issues
          a new RPT, the client MAY retain the existing RPT.</t>

          <figure>
            <preamble>Example:</preamble>

            <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
... 

{  
   "access_token":"sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
   "token_type":"Bearer"
}
]]></artwork>
          </figure>

          <figure>
            <preamble>Example with a PCT and an <spanx
            style="verb">upgraded</spanx> property in the response:</preamble>

            <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
...

{  
   "access_token":"sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
   "token_type":"Bearer",
   "pct":"c2F2ZWRjb25zZW50",
   "upgraded":true
}
]]></artwork>
          </figure>
        </section>

        <section anchor="authorization-failure"
                 title="Authorization Server Response to Client on Authorization Failure">
          <t>If the client's request to the token endpoint is not sufficient
          for granting an RPT, the authorization server responds using an
          error code and corresponding HTTP status code. Any error code other
          than <spanx style="verb">need_info</spanx> ends the current
          authorization process; the client is free to attempt access to the
          protected resource another time. The <spanx
          style="verb">need_info</spanx> error code begins or continues an
          authorization process loop that concludes only when the client
          receives one of the other errors or a success condition (as
          described in <xref target="give-rpt" />).<list style="hanging">
              <t hangText="invalid_grant">If the provided ticket was not found
              at the authorization server, or the provided ticket has expired,
              or if any other original reasons to use this error response are
              found as defined in <xref target="RFC6749" />, the authorization
              server responds with the HTTP 400 (Bad Request) status code.</t>

              <t hangText="invalid_scope">At least one of the scopes included
              in the request does not match an available scope for any of the
              resources associated with requested permissions for the
              permission ticket provided by the client. The authorization
              server responds with the HTTP 400 (Bad Request) status code.</t>

              <t hangText="not_authorized">The client is not authorized to
              have these permissions added. The authorization server responds
              with the HTTP 403 (Forbidden) status code. This error code is
              unique to the UMA grant.</t>

              <t hangText="request_submitted">The authorization server
              requires intervention by the resource owner to determine whether
              the client is authorized to have these permissions. The
              authorization server responds with the HTTP 403 (Forbidden)
              status code. This error code is unique to the UMA grant.</t>

              <t hangText="need_info">The authorization server needs
              additional information in order to determine whether the client
              is authorized to have these permissions. The authorization
              server responds with the HTTP 403 (Forbidden) status code. It
              MUST include a <spanx style="verb">ticket</spanx> object, and it
              MAY also include an <spanx style="verb">error_details</spanx>
              object. This error code is unique to the UMA grant.<list
                  style="hanging">
                  <t hangText="ticket">REQUIRED. A permission ticket that
                  allows the client to make further requests to the
                  authorization server during this attempted authorization.
                  The value MUST NOT be the same as the one the client used to
                  make its request.</t>

                  <t hangText="error_details">OPTIONAL. Provides hints about
                  information the authorization server needs to perform
                  authorization assessment. On receiving such hints, the
                  client has the opportunity to engage, or engage the
                  requesting party, in claims collection flows. At least one
                  of its sub-properties MUST be supplied.<list style="hanging">
                      <t hangText="required_claims">An array containing
                      objects that describe the required claims, with the
                      following properties:<list style="hanging">
                          <t hangText="name">OPTIONAL. A string (which MAY be
                          a URI) representing the name of the claim; the "key"
                          in a key-value pair.</t>

                          <t hangText="friendly_name">OPTIONAL. A string that
                          provides a more human-readable form of the
                          attribute's name, which may be useful as a "display
                          name" for use in user interfaces in cases where the
                          actual name is complex or opaque, such as an OID or
                          a UUID.</t>

                          <t hangText="claim_type">OPTIONAL. A string,
                          indicating the expected interpretation of the
                          provided claim value. The string MAY be a URI.</t>

                          <t hangText="claim_token_format">OPTIONAL. An array
                          of strings specifying a set of acceptable formats
                          for a token pushed by the client containing this
                          claim (see <xref target="claim-push" />). Any one of
                          the referenced formats would satisfy the
                          authorization server's requirements. Each string MAY
                          be a URI.</t>

                          <t hangText="issuer">OPTIONAL. An array of strings
                          specifying a set of acceptable issuing authorities
                          for the claim. Any one of the referenced authorities
                          would satisfy the authorization server's
                          requirements. Each string MAY be a URI.</t>
                        </list></t>

                      <t hangText="redirect_user">The claims interaction
                      endpoint URI to which to redirect the end-user
                      requesting party at the authorization server to continue
                      the process of interactive claims gathering. For
                      example, the authorization server may require the
                      requesting party to fill out a CAPTCHA to help prove
                      humanness. If the requesting party is not an end-user,
                      then no client action would be possible on receiving the
                      hint. If a static claims interaction endpoint was also
                      provided in the authorization server's configuration
                      document, then this value overrides the static value.
                      Providing a value in this response might be appropriate,
                      for example, if the URI needs to be customized per
                      requesting party.</t>
                    </list></t>
                </list></t>
            </list></t>

          <figure>
            <preamble>Example when the ticket has expired:</preamble>

            <artwork><![CDATA[HTTP/1.1 400 Bad Request
Content-Type: application/json
Cache-Control: no-store
...

{  
   "error":"invalid_grant"
}
]]></artwork>
          </figure>

          <figure>
            <preamble>Example of a <spanx style="verb">need_info</spanx>
            response with a full set of <spanx
            style="verb">error_details</spanx> hints:</preamble>

            <artwork><![CDATA[HTTP/1.1 403 Forbidden
Content-Type: application/json
Cache-Control: no-store
...

{  
   "error":"need_info",
   "ticket":"ZXJyb3JfZGV0YWlscw==",
   "error_details":{  
      "required_claims":[  
         {  
            "name":"email23423453ou453",
            "friendly_name":"email",
            "claim_type":"urn:oid:0.9.2342.19200300.100.1.3",
            "claim_token_format":[  
               "http://openid.net/specs/openid-connect-core-1_0.html#IDToken"
            ],
            "issuer":[  
               "https://example.com/idp"
            ]
         }
      ],
      "redirect_user":"https://as.example.com/rqp_claims?id=2346576421"
   }
}
]]></artwork>
          </figure>
        </section>
      </section>

      <section anchor="client-rpt-attempt"
               title="Client Attempts Access to Protected Resource With RPT">
        <t>In this process, the client attempts to access the protected
        resource, now in possession of an RPT.</t>

        <t>This process assumes that the client has completed an authorization
        process. This process corresponds to step 12 in <xref
        target="protocol-flow" />.</t>

        <t>After the client attempts access, the resource server's next option
        to act is defined in <xref target="check-rpt-status" />, and its next
        option to respond to the client is defined in <xref
        target="rs-rpt-response" />.</t>

        <figure>
          <preamble>Example of a client request at a protected resource
          carrying an RPT:</preamble>

          <artwork><![CDATA[GET /users/alice/album/photo.jpg HTTP/1.1
Authorization: Bearer vF9dft4qmT
Host: photoz.example.com
...
]]></artwork>
        </figure>
      </section>

      <section anchor="check-rpt-status"
               title="Resource Server Determines RPT Status">
        <t>In this process, the resource server determines the status of the
        RPT brought to it by the client in an access attempt.</t>

        <t>This process assumes that the client's access attempt bore an RPT.
        One version of this process corresponds to steps 14-15 in <xref
        target="protocol-flow" />.</t>

        <t>The resource server determines whether the RPT is active and, if
        so, its associated permissions. Depending on the nature of the RPT and
        operative caching parameters, the resource server MAY take any of the
        following actions as appropriate to determine the RPT's status:<list
            style="symbols">
            <t>Validate the RPT locally if it is self-contained.</t>

            <t>Introspect the RPT at the authorization server using the OAuth
            token introspection endpoint (defined by <xref target="RFC7662" />
            and this section) that is part of the protection API. The
            authorization server's response contains an extended version of
            the OAuth introspection object. A number of security
            considerations around handling and interpreting the RPT can be
            found throughout <xref target="protocol-flow-details-sec" />, and
            in <xref target="sec-consid" />.</t>

            <t>Use a cached copy of the token introspection response if
            allowed (see Section 4 of <xref target="RFC7662" />).</t>
          </list></t>

        <t>After determining the RPT status, the resource server's next option
        to respond is defined in <xref target="rs-rpt-response" />.</t>

        <section anchor="token-introspection"
                 title="Resource Server Request to Token Introspection Endpoint">
          <t>The resource server's request for introspection of an RPT MUST
          use the OAuth token introspection endpoint (defined by <xref
          target="RFC7662" />) declared by the authorization server in its
          configuration document. The authorization server MUST require
          requests to this endpoint to be accompanied by a PAT. The PAT
          provides resource-owner context to the authorization server as well
          as demonstrating authorized access.</t>

          <t>Note: The act of using the token introspection endpoint may
          require the resource server to interpret which authorization server
          to consult and in the context of which resource owner, in order to
          select which PAT to use to make the API call.</t>

          <figure>
            <preamble>Example of the resource server's request to the
            authorization server for introspection of an RPT, with a PAT in
            the header:</preamble>

            <artwork><![CDATA[POST /rs/status HTTP/1.1
Host: as.example.com
Authorization: Bearer 204c69636b6c69
...
token=sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv
}
]]></artwork>
          </figure>
        </section>

        <section anchor="uma-bearer-token-profile"
                 title="Authorization Server Response to Resource Server on Token Introspection Success">
          <t>The authorization server's response to the resource server MUST
          use <xref target="RFC7662" />, responding with a JSON object with
          the structure dictated by that specification, extended as
          follows.</t>

          <t>If the <spanx style="verb">active</spanx> property has a Boolean
          value of <spanx style="verb">true</spanx>, then the introspection
          object MUST NOT contain a <spanx style="verb">scope</spanx> claim,
          and SHOULD contain an extension property with the name <spanx
          style="verb">permissions</spanx> that contains an array of one or
          more values, each of which is an object consisting of these
          properties:<list style="hanging">
              <t hangText="resource_id">REQUIRED. A string that uniquely
              identifies the protected resource, access to which has been
              granted to this client on behalf of this requesting party. The
              identifier MUST correspond to a resource that was previously
              registered as protected.</t>

              <t hangText="resource_scopes">REQUIRED. An array referencing one
              or more strings representing scopes to which access was granted
              for this resource. Each string MUST correspond to a scope that
              was registered by this resource server for the referenced
              resource.</t>

              <t hangText="exp">OPTIONAL. Integer timestamp, measured in the
              number of seconds since January 1 1970 UTC, indicating when this
              permission will expire. If the property is absent, the
              permission does not expire. If the token-level <spanx
              style="verb">exp</spanx> value pre-dates a permission-level
              <spanx style="verb">exp</spanx> value, the former overrides the
              latter.</t>

              <t hangText="iat">OPTIONAL. Integer timestamp, measured in the
              number of seconds since January 1 1970 UTC, indicating when this
              permission was originally issued. If the token-level <spanx
              style="verb">iat</spanx> value post-dates a permission-level
              <spanx style="verb">iat</spanx> value, the former overrides the
              latter.</t>

              <t hangText="nbf">OPTIONAL. Integer timestamp, measured in the
              number of seconds since January 1 1970 UTC, indicating the time
              before which this permission is not valid. If the token-level
              <spanx style="verb">nbf</spanx> value post-dates a
              permission-level <spanx style="verb">nbf</spanx> value, the
              former overrides the latter.</t>
            </list></t>

          <t>For interoperability, if the introspection object does not
          contain the <spanx style="verb">permissions</spanx> property, then
          an UMA extension SHOULD be defined as appropriate, with supporting
          authorization servers using the <spanx
          style="verb">uma_profiles_supported</spanx> configuration property
          to advertise their support of any alternative structures (see <xref
          target="profiles" /> for more information).</t>

          <figure>
            <preamble>Example of a response containing the introspection
            object with the <spanx style="verb">permissions</spanx>
            property:</preamble>

            <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store
...

{  
   "active":true,
   "exp":1256953732,
   "iat":1256912345,
   "permissions":[  
      {  
         "resource_id":"112210f47de98100",
         "resource_scopes":[  
            "view",
            "http://photoz.example.com/dev/actions/print"
         ],
         "exp":1256953732
      }
   ]
}
]]></artwork>
          </figure>
        </section>
      </section>

      <section anchor="rs-rpt-response"
               title="Resource Server Responds to Client&rsquo;s Access Attempt With RPT">
        <t>In this process, the resource server responds to the client's
        access attempt on a protected resource that bore an RPT.</t>

        <t>This process assumes that the resource server has determined the
        status of the RPT. The success path of this process corresponds to
        steps 16-17 in <xref target="protocol-flow" />.</t>

        <t>The first part of this process is an internal assessment. The
        second is a response to the client.</t>

        <t>This process concludes UMA's protocol flow.</t>

        <section title="Permissions Assessment">
          <t>The resource server assesses the permissions associated with the
          RPT, whether obtained through token introspection or otherwise, and
          compares them with the RPT-accompanied client's access attempt to a
          protected resource.</t>

          <t>Note: The act of assessment may require the resource server to
          interpret which resource, resource owner, authorization server, and
          scope to map to the client's access attempt.</t>

          <t>The purpose of this assessment is to determine sufficiency of
          authorization. The resource server MAY apply additional
          authorization controls when determining how to respond. For example,
          even if an RPT provides sufficient permissions for a particular
          case, the resource server deployer can choose to bar access to
          certain additional requesting parties.</t>

          <t>To ensure the integrity of the ecosystem in which the resource
          server, authorization server, and resource owner are participating,
          it is RECOMMENDED for the parties to establish agreements about
          access rules on a legal or contractual level. See <xref
          target="trust-considerations" /> for more information.</t>

          <t>The resource server MUST NOT give access in the case of an
          invalid RPT or an RPT associated with insufficient
          authorization.</t>
        </section>

        <section anchor="give-access"
                 title="Resource Server Response to Client on Sufficiency of Authorization">
          <t>The client's presentation of a valid RPT associated with
          sufficient permissions indicates that the policy conditions have
          been met for access to the protected resource.</t>

          <figure>
            <preamble>Example of the resource server's response to the client
            on sufficiency of authorization:</preamble>

            <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
...

{  
   "f_number":"f/5.6",
   "exposure":"1/320",
   "focal_length_mm":150,
   "iso":400,
   "flash":false
}
]]></artwork>
          </figure>
        </section>

        <section title="Resource Server Response to Client on Insufficiency of Authorization">
          <t>The client's presentation of an invalid RPT or an RPT associated
          with insufficient permissions for access indicates that the policy
          conditions have not been met for access to the protected
          resource.</t>

          <t>In this case, the resource server's next option to act is defined
          in <xref target="register-permission" /> (requesting permissions,
          which involves the authorization server), and its next option to
          respond to the client is defined in <xref
          target="rs-tokenless-response" />, exactly as if the client had
          attempted to access the protected resource with no RPT. Because the
          resource server is responsible for its own resource semantics and
          structure, it may need to map the client's access attempt to a
          suitable resource identifier (and thus resource owner and
          authorization server) before proceeding.</t>
        </section>
      </section>

      <section anchor="refresh" title="Authorization Server Refreshes RPT">
        <t>As noted in <xref target="give-rpt" />, when issuing an RPT, the
        authorization server MAY also issue a refresh token.</t>

        <t>In a typical access token refreshing flow, providing the <spanx
        style="verb">scope</spanx> parameter in the request has a token
        downscoping effect. However, if the client includes the <spanx
        style="verb">scope</spanx> parameter when providing a refresh token
        that is associated with an RPT, the effect is undefined.</t>
      </section>
    </section>

    <section anchor="uma-error-response" title="Error Responses">
      <t>If a request triggers no OAuth error, but is invalid for another
      reason as defined throughout this specification, the authorization
      server or resource server responds with an UMA error, sometimes along
      with a specified HTTP status code, by supplying the following properties
      in a JSON-encoded object in the body of the HTTP response: <list
          style="hanging">
          <t hangText="error">REQUIRED. A single error code. Values for this
          property are defined throughout this specification.</t>

          <t hangText="error_description">OPTIONAL. Human-readable text
          providing additional information.</t>

          <t hangText="error_uri">OPTIONAL. A URI identifying a human-readable
          web page with information about the error.</t>
        </list></t>

      <t>The following is a common error code that applies to several
      UMA-specified request messages: <list style="hanging">
          <t hangText="invalid_request">The request is missing a required
          parameter, includes an invalid parameter value, includes a parameter
          more than once, or is otherwise malformed. The authorization server
          MUST respond with the HTTP 400 (Bad Request) status code.</t>
        </list></t>

      <figure>
        <preamble>For example:</preamble>

        <artwork><![CDATA[HTTP/1.1 400 Bad Request
Content-Type: application/json
Cache-Control: no-store
...

{  
   "error":"invalid_request",
   "error_description":"Request is missing a required parameter.",
   "error_uri":"https://as.example.com/errors/bad_uma_request"
}
]]></artwork>
      </figure>
    </section>

    <section anchor="profiles"
             title="Specifying Additional Profiles and Extensions">
      <t>For implementation interoperability and to serve particular
      deployment scenarios, including sector-specific ones such as healthcare
      or e-government, third parties may want to define profiles of UMA that
      restrict its available options.</t>

      <t>Further, third parties may want to define profiles of companion
      technologies to fit interoperably within the UMA framework, for example,
      claim token formats suitable for claim pushing (see <xref
      target="claim-push" />) or protocol alternatives to HTTP.</t>

      <t>Finally, this specification uses the natural extensibility within its
      messaging formats, <spanx
      style="verb">"application/x-www-form-urlencoded"</spanx> and JSON, to
      enable third parties to define extensions that serve adjacent use cases.
      For example, if necessary, it is possible to substitute a different
      token introspection object structure to change the dividing line between
      authorization server and resource server responsibilities in controlling
      access.</t>

      <t>It is not practical for this specification to standardize all such
      variations of UMA. However, to serve overall interoperability goals,
      this section provides guidelines for third parties that wish to specify
      UMA-related profiles and extensions.</t>

      <t>It is RECOMMENDED that authorization server deployers document any
      profiled or extended features explicitly (see <xref
      target="am-endpoints" /> for details).</t>

      <t>In all cases, it is RECOMMENDED that profiles and extensions document
      the following information:<list style="symbols">
          <t>Specify a uniquely identifying URI.</t>

          <t>Identify the responsible author and provide postal or electronic
          contact information.</t>

          <t>Supply references to any previous version that this version
          updates or obsoletes.</t>

          <t>Define any additional or changed error states, including, for
          claim token formats, whether <spanx
          style="verb">error_details</spanx> hints are modified or
          extended.</t>

          <t>Specify any modified or new interactions between endpoint
          entities and any extension properties used in messages.</t>

          <t>For any new access token types, specify the keyword to be used in
          HTTP Authorization headers.</t>

          <t>Specify any conformance and interoperability considerations.</t>

          <t>Specify any additional security and privacy considerations.</t>
        </list></t>
    </section>

    <section anchor="sec-consid" title="Security Considerations">
      <t>This specification relies mainly on OAuth 2.0 security mechanisms as
      well as transport-level encryption. Thus, implementers are strongly
      advised to read <xref target="BCP195" /> and the security considerations
      in <xref target="RFC6749" /> (Section 10) and <xref target="RFC6750" />
      (Section 5) along with the security considerations of any other OAuth
      token-defining specifications in use, along with the entire <xref
      target="RFC6819" /> specification, and apply the countermeasures
      described therein. As well, implementers should take into account the
      security considerations in all other normatively referenced
      specifications.</t>

      <t>The following sections describe additional security
      considerations.</t>

      <section anchor="rqp-threats" title="Requesting Party Threats">
        <t>This section discusses threats related to UMA's nature as a
        protocol enabling party-to-party sharing of protected resource access;
        that is, enabling requesting parties who are not the resource owner to
        gain authorized access to protected resources.</t>

        <t>For privacy considerations related to requesting parties, see <xref
        target="rqp-privacy" />.</t>

        <section anchor="redirect-threats"
                 title="Requesting Party Redirection and Impersonation">
          <t>Like ordinary OAuth redirection, UMA redirection for the purpose
          of gathering claims from an end-user requesting party (described in
          <xref target="claim-redirect" />) creates the potential for
          cross-site request forgery (CSRF) through an open redirect if the
          authorization server does not force the client to pre-register its
          claims redirection endpoint, and server-side artifact tampering if
          the client does not avail itself of the state parameter. The client
          SHOULD check that the ticket value returned by an authorization
          server after a claims redirect is completed has not been maliciously
          changed, for example by a man in the browser, by using the state
          parameter. (See <xref target="UMA-Impl" /> for advice on ways to
          accomplish this.) Sections 4.4.1.8, 4.4.2.5, and 5.3.5 of <xref
          target="RFC6819" /> are apropos for the UMA claims-gathering
          redirection flow as well.</t>

          <t>When a client redirects an end-user requesting party to the
          claims interaction endpoint, the client provides no a priori context
          to the authorization server about which user is appearing at the
          endpoint, other than implicitly through the permission ticket. Since
          the authorization server is free to gather any claims it wishes, the
          effect is to "late-bind" them to the permission ticket and the state
          string provided by the client, with the effect of enabling the
          authorization server not to trust client-asserted claims. This is a
          desirable result and reflects one reason why the authorization
          server might choose to demand use of the redirect flow over the push
          flow. However, the client has the opportunity to switch end-users --
          say, enabling malicious end-user Carlos to impersonate the original
          end-user Bob, who might be represented by a PCT already in that
          client's possession and might even have authorized the issuance of
          that PCT -- after the redirect completes and before it returns to
          the token endpoint to seek permissions.</t>

          <t>Another issue concerns the exposure of an RPT to a requesting
          party, which could maliciously pass the token to an unauthorized
          party.</t>

          <t>To mitigate requesting-party switching and RPT exposure threats,
          consider the following strategies.<list style="symbols">
              <t>Require that the requesting party legitimately represent the
              wielder of the bearer token on a legal or contractual level.
              This solution does not reduce the risk from a technical
              perspective.</t>

              <t>The authorization server, possibly with input from the
              resource owner, can implement tighter time-to-live strategies
              around the permissions in RPTs. This is a classic approach with
              bearer tokens that helps to limit a malicious party's ability to
              intercept and use the bearer token. In the same vein, the
              authorization server could require claims to have a reasonable
              degree of freshness (which would require a custom claims
              profile).</t>

              <t>A stronger strategy is to gather claims interactively from an
              end-user requesting party that demonstrate that some
              sufficiently strong level authentication was performed.</t>

              <t>The strongest strategy is to disallow bearer-type RPTs, by
              providing or requiring a holder-of-key approach. In this way,
              the wielder of the access token must engage in a live session
              for proof-of-possession.</t>
            </list></t>
        </section>

        <section anchor="sec-consid-pct"
                 title="Requesting Party Claims and Persisted Claims Tokens">
          <t>A PCT is similar to a refresh token in that it carries extra
          power over the usage of an RPT. The authorization server and client
          MUST keep PCTs confidential in transit and storage, and MUST NOT
          share any PCT with any other entity other than the issuer or issued
          client, respectively. The authorization server MUST maintain the
          binding between a PCT and the client to which it was issued.</t>

          <t>Given that a PCT represents a set of requesting party claims, a
          client supplying a PCT in its RPT request MUST make a best effort to
          ensure that the requesting party using the client now is the same as
          the requesting party that was associated with the PCT when it was
          issued. Different clients will have different capabilities in this
          respect; for example, some applications are single-user and perform
          no local authentication, associating all PCTs with the "current
          user", while others might have more sophisticated authentication and
          user mapping capabilities.</t>
        </section>
      </section>

      <section anchor="sec-consid-oauth-oidc"
               title="OAuth- and OpenID Connect-Related Security Considerations">
        <t>This section discusses security considerations related to UMA's use
        of OAuth and OpenID Connect.</t>

        <section title="Strengthening Client Authentication Using OpenID Connect">
          <t>Along with requiring TLS, UMA requires OAuth, or any OAuth-based
          authentication protocol, as the security mechanism for its
          protection API. The resource server thus acts in the role of an
          OAuth client at the authorization server's protection API. While it
          is possible to use any profile of OAuth for this protection, it is
          RECOMMENDED for the authorization server to use OpenID Connect, and
          to use its mechanisms for stronger client authentication at the
          token endpoint, in order to strengthen the authentication of OAuth
          clients. Section 16 of <xref target="OIDCCore" /> provides more
          information on OpenID Connect security considerations.</t>
        </section>

        <section title="Interacting with Resource Owners and Requesting Parties Using OAuth's Implicit Grant Type">
          <t>Clients using the OAuth implicit grant type carry particular
          vulnerabilities in OAuth, and using OpenID Connect is of no help in
          this circumstance. This is true where a resource server is used as
          an OAuth client for obtaining a PAT on a resource owner's behalf,
          and also where an authorization server is gathering claims from a
          requesting party through OAuth.</t>

          <t>For example, an "implicit client" might require the retrieval of
          PATs more frequently, for each browser on each platform. An attacker
          can initiate a spear phishing attack on the resource owner with a
          link to a malicious website, relying on the resource owner to
          authenticate to the authorization server through an email-based
          identity provider in order to receive the PAT. The site can
          impersonate the resource owner using the browser client's client ID
          in an OpenID Connect implicit request to the authorization server.
          If the resource owner had previously authorized a PAT to be issued,
          this attempt will likely succeed. The subsequently issued PAT could
          be used for resource registration and other protection API
          tasks.</t>

          <t>A number of mitigation strategies are possible.<list
              style="symbols">
              <t>The authorization server could penalize or disallow use of
              the implicit grant flow. This could be done at a variety of
              levels:<list style="symbols">
                  <t>Enabling resource owners to define policies controlling
                  the use of such clients</t>

                  <t>Setting system-default policies controlling their use</t>

                  <t>Participating in mutual agreements with other parties,
                  for example, through the definition and mandated use of
                  profiles, that admit only suitably secure client
                  applications to interact with service operators</t>
                </list></t>

              <t>The authorization server could support dynamic client
              registration at the client instance level, such that each
              instance receives a unique client_id and secret. The client can
              then use the authorization code flow and have at least some form
              of client authentication. However, this is easier for a mobile
              app than for a browser-based HTML app.</t>
            </list></t>
        </section>
      </section>

      <section anchor="cred-guessing" title="Credentials-Guessing">
        <t>The authorization server MUST prevent attackers from guessing
        permission tickets and PCTs.</t>
      </section>

      <section title="JSON Usage">
        <t>This specification defines a number of data formats based on <xref
        target="RFC7159" />. As a subset of the JavaScript scripting language,
        JSON data SHOULD be consumed through a process that does not
        dynamically execute it as code, to avoid malicious code execution. One
        way to achieve this is to use a JSON parser rather than the built-in
        JavaScript eval() function.</t>
      </section>

      <section anchor="trust-considerations"
               title="Profiles and Trust Establishment">
        <t>Parties that are operating and using UMA software entities have
        opportunities to establish agreements about the parties' rights and
        responsibilities on a legal or contractual level, along with common
        interpretations of UMA constructs for consistent and expected software
        behavior. These agreements can be used to improve the parties'
        respective security postures, and written profiles are a key mechanism
        for conveying and enforcing these agreements. <xref
        target="profiles" /> discusses profiling. See <xref
        target="UMA-legal" /> to learn about tools to assist in the legal and
        contractual elements of deploying UMA-enabled services.</t>

        <section anchor="trust-push"
                 title="Requirements for Trust When Clients Push Claim Tokens">
          <t>This section discusses the threats surrounding client claim
          pushing (see <xref target="claim-push" />).</t>

          <t>Because claim tokens of any format typically contain audience
          restrictions and an authorization server would typically not be in
          the primary audience for a claim token held or generated by a
          client, it is RECOMMENDED to document how the client, authorization
          server, and any additional ecosystem entities and parties will
          establish a trust relationship and communicate any required keying
          material in a claim token profile, as described in <xref
          target="profiles" />. Authorization servers are RECOMMENDED not to
          accept claim tokens pushed by untrusted clients and not to ignore
          audience restrictions found in claim tokens pushed by clients.</t>

          <t>In the special circumstance when an authorization server is
          colocated with an OpenID Provider for the requesting parties within
          a deployment ecosystem, then it is able to act as an OpenID Relying
          Party for itself. This circumstance presents an opportunity for a
          technical optimization of the requirement for trust because the
          authorization server itself issued the OAuth client credentials for
          the client in question, and could reasonably be the singular <spanx
          style="verb">aud</spanx> value target in an OpenID Connect ID Token
          pushed by the client to the token endpoint.</t>
        </section>
      </section>
    </section>

    <section anchor="priv-consid" title="Privacy Considerations">
      <t>UMA has the following privacy considerations.</t>

      <section title="Resource Information at the Authorization Server">
        <t>The authorization server comes to be in possession of resource
        information that may reveal information about the resource owner,
        which the authorization server's trust relationship with the resource
        server is assumed to accommodate. However, the client is a
        less-trusted party -- in fact, entirely untrustworthy until
        permissions are associated with its RPT. The more information about a
        resource that is registered, the more risk of privacy compromise there
        is through a less-trusted authorization server.</t>
      </section>

      <section anchor="rqp-privacy"
               title="Requesting Party Information at the Authorization Server">
        <t>The primary privacy duty of UMA's design is to the resource owner.
        However, privacy considerations affect the requesting party as well,
        having to do with the nature of claims. Claims are likely to contain
        personal, personally identifiable, and sensitive information,
        particularly in the case of requesting parties who are end-users.</t>

        <t>If the authorization server supports persisting claims for any
        length of time (for example, to support issuance of PCTs), then it
        SHOULD provide a secure and privacy-protected means of storing claim
        data. It is also RECOMMENDED for the authorization server to use an
        interactive claims-gathering flow to ask an end-user requesting party
        for authorization to persist their claims before issuing a PCT. A
        requesting party who provides claims to an authorization server once
        having been redirected there is less susceptible to privacy-destroying
        behavior. Otherwise, certain flows such as claim pushing and
        interactive federated sign-in with automatic login will tend to be
        invisible to the user if they have not consciously authorized the
        possibility.</t>
      </section>

      <section title="Resource Owner Information at the Resource Server">
        <t>Since the initial request for a resource is made in an unauthorized
        and unauthenticated context, such requests are by definition open to
        all users. The response of that request includes a pointer to the
        authorization server to query for an access token and present claims.
        If it is known out of band that authorization server is owned and
        controlled by a single user, or visiting the authorization server
        contains other identifying information, then an unauthenticated and
        unauthorized client would be able to tell which resource owner is
        associated with a given resource. Other information about the resource
        owner, such as organizational affiliation or group membership, may be
        gained from this transaction as well.</t>
      </section>

      <section title="Profiles and Trust Establishment">
        <t>Parties that are operating and using UMA software entities have
        opportunities to establish agreements about mutual rights,
        responsibilities, and common interpretations of UMA constructs for
        consistent and expected software behavior. These agreements can be
        used to improve the parties' respective privacy postures. See <xref
        target="trust-considerations" /> for more information. Additional
        considerations related to Privacy by Design concepts are discussed in
        <xref target="UMA-PbD" />.</t>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document makes the following requests of IANA.</t>

      <section title="Well-Known URI Registration">
        <t>This specification registers the well-known URI defined in <xref
        target="am-endpoints" />, as required by Section 5.1 of <xref
        target="RFC5785" />.</t>

        <section title="Registry Contents">
          <t>
            <list style="symbols">
              <t>URI suffix: <spanx
              style="verb">uma2-configuration</spanx></t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref
              target="config-doc-discovery-endpoint" /> in this document</t>
            </list>
          </t>
        </section>
      </section>

      <section title="JSON Web Token Claims Registration">
        <t>This specification registers the claim defined in <xref
        target="uma-bearer-token-profile" />, as required by <xref
        target="OIDCCore" />.</t>

        <section title="Registry Contents">
          <t>
            <list style="symbols">
              <t>Claim name: <spanx style="verb">permissions</spanx></t>

              <t>Claim description: Array of objects, each describing a set of
              scoped, time-limitable entitlements to a resource</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - wg-uma@kantarainitiative.org</t>

              <t>Specification document: <xref
              target="uma-bearer-token-profile" /> in this document</t>
            </list>
          </t>
        </section>
      </section>

      <section title="OAuth Token Introspection Response Registration">
        <t>This specification registers the claim defined in <xref
        target="uma-bearer-token-profile" />, as required by Section 3.1 of
        <xref target="RFC7662" />.</t>

        <section title="Registry Contents">
          <t>
            <list style="symbols">
              <t>Claim name: <spanx style="verb">permissions</spanx></t>

              <t>Claim description: array of objects, each describing a set of
              scoped, time-limitable entitlements to a resource</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref
              target="uma-bearer-token-profile" /> in this document</t>
            </list>
          </t>
        </section>
      </section>

      <section title="OAuth 2.0 Extension Grant Parameters Registration">
        <t>This specification registers the parameters defined in <xref
        target="uma-grant-type" />, as required by Section 11.2 of <xref
        target="RFC6749" />.</t>

        <section title="Registry Contents">
          <t>
            <list style="symbols">
              <t>Parameter name: <spanx style="verb">ticket</spanx></t>

              <t>Parameter usage location: client request, token endpoint</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="uma-grant-type" /> in
              this document</t>
            </list>
          </t>

          <t>
            <list style="symbols">
              <t>Parameter name: <spanx style="verb">rpt</spanx></t>

              <t>Parameter usage location: client request, token endpoint</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="uma-grant-type" /> in
              this document</t>
            </list>
          </t>

          <t>
            <list style="symbols">
              <t>Parameter name: <spanx style="verb">claim_tokens</spanx></t>

              <t>Parameter usage location: client request, token endpoint</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="uma-grant-type" /> in
              this document</t>
            </list>
          </t>

          <t>
            <list style="symbols">
              <t>Parameter name: <spanx style="verb">pct</spanx></t>

              <t>Parameter usage location: client request, token endpoint</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="uma-grant-type" /> in
              this document</t>
            </list>
          </t>

          <t>
            <list style="symbols">
              <t>Parameter name: <spanx style="verb">pct</spanx></t>

              <t>Parameter usage location: authorization server response,
              token endpoint</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="give-rpt" /> in this
              document</t>
            </list>
          </t>

          <t>
            <list style="symbols">
              <t>Parameter name: <spanx style="verb">upgraded</spanx></t>

              <t>Parameter usage location: authorization server response,
              token endpoint</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="give-rpt" /> in this
              document</t>
            </list>
          </t>
        </section>
      </section>

      <section title="OAuth 2.0 Extensions Error Registration">
        <t>This specification registers the errors defined in <xref
        target="authorization-failure" />, as required by Section 11.4 of
        <xref target="RFC6749" />.</t>

        <section title="Registry Contents">
          <t>
            <list style="symbols">
              <t>Error name: <spanx style="verb">not_authorized</spanx> (note:
              this error is distinct from <spanx
              style="verb">unauthorized_client</spanx>; it refers to the
              authorization status of the requesting side)</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="uma-grant-type" /> in
              this document</t>

              <t>Error usage location: authorization server response, token
              endpoint</t>
            </list>
          </t>

          <t>
            <list style="symbols">
              <t>Error name: <spanx style="verb">request_submitted</spanx></t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="uma-grant-type" /> in
              this document</t>

              <t>Error usage location: authorization server response, token
              endpoint</t>
            </list>
          </t>

          <t>
            <list style="symbols">
              <t>Error name: <spanx style="verb">need_info</spanx> (and its
              subsidiary <spanx style="verb">ticket</spanx> and <spanx
              style="verb">error_details</spanx> structures)</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - staff@kantarainitiative.org</t>

              <t>Specification document: <xref target="uma-grant-type" /> in
              this document</t>

              <t>Error usage location: authorization server response, token
              endpoint</t>
            </list>
          </t>
        </section>
      </section>
    </section>

    <section anchor="Acknowledgments" title="Acknowledgments">
      <t>The following people made significant text contributions to the
      specification:<list style="symbols">
          <t>Paul C. Bryan, ForgeRock US, Inc. (former editor)</t>

          <t>Domenico Catalano, Oracle (former author)</t>

          <t>Mark Dobrinic, Cozmanova</t>

          <t>George Fletcher, AOL</t>

          <t>Thomas Hardjono, MIT (former editor)</t>

          <t>Lukasz Moren, Cloud Identity Ltd</t>

          <t>Christian Scholz, COMlounge GmbH (former editor)</t>

          <t>Mike Schwartz, Gluu</t>

          <t>Cigdem Sengul, Nominet UK</t>

          <t>Jacek Szpot, Newcastle University</t>
        </list></t>

      <t>Additional contributors to this specification include the Kantara UMA
      Work Group participants, a list of whom can be found at <xref
      target="UMAnitarians" />.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <reference anchor="BCP195" target="https://tools.ietf.org/html/bcp195">
        <front>
          <title>Recommendations for Secure Use of Transport Layer Security
          (TLS) and Datagram Transport Layer Security (DTLS)</title>

          <author initials="Y." surname="Sheffer">
            <organization />
          </author>

          <date day="" month="May" year="2015" />
        </front>
      </reference>

      <reference anchor="OAuth-resource-reg"
                 target="https://docs.kantarainitiative.org/uma/wg/oauth-resource-reg-2.0-07.html">
        <front>
          <title>OAuth 2.0 Resource Registration</title>

          <author initials="E." role="editor" surname="Maler">
            <organization>IETF</organization>
          </author>

          <date day="" month="March" year="2017" />
        </front>
      </reference>

      <reference anchor="OIDCCore"
                 target="http://openid.net/specs/openid-connect-core-1_0.html">
        <front>
          <title>OpenID Connect Core 1.0 incorporating errata set 1</title>

          <author initials="N." surname="Sakimura">
            <organization />
          </author>

          <date day="8" month="November" year="2014" />
        </front>
      </reference>

      <reference anchor="OIDCDynClientReg"
                 target="http://openid.net/specs/openid-connect-registration-1_0.html">
        <front>
          <title>OpenID Connect Dynamic Client Registration 1.0 incorporating
          errata set 1</title>

          <author initials="N." surname="Sakimura">
            <organization>OpenID Foundation</organization>
          </author>

          <date day="8" month="November" year="2014" />
        </front>
      </reference>

      &RFC2119;

      &RFC3986;

      &RFC5785;

      <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6415"?>

      <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6711"?>

      &RFC6749;

      &RFC6750;

      &RFC6819;

      &RFC7159;

      <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7519"?>

      &RFC7591;

      &RFC7662;

      &RFC2616;
    </references>

    <references title="Informative References">
      <reference anchor="UMA-casestudies"
                 target="https://kantarainitiative.org/confluence/display/uma/Case+Studies">
        <front>
          <title>UMA Case Studies</title>

          <author initials="E." surname="Maler">
            <organization />
          </author>

          <date day="" month="" year="2015" />
        </front>
      </reference>

      <reference anchor="UMA-Impl"
                 target="https://kantarainitiative.org/confluence/display/uma/UMA+Implementer%27s+Guide">
        <front>
          <title>UMA Implementer's Guide</title>

          <author initials="E." surname="Maler" />

          <date day="" month="" year="2017" />
        </front>
      </reference>

      <reference anchor="UMA-PbD"
                 target="https://kantarainitiative.org/confluence/display/uma/Privacy+by+Design+Implications+of+UMA">
        <front>
          <title>Privacy by Design Implications of UMA</title>

          <author initials="E." surname="Maler" />

          <date day="" month="" year="2013" />
        </front>
      </reference>

      <reference anchor="UMA-usecases"
                 target="https://kantarainitiative.org/confluence/display/uma/UMA+Scenarios+and+Use+Cases">
        <front>
          <title>UMA Scenarios and Use Cases</title>

          <author initials="E." surname="Maler">
            <organization>Kantara</organization>
          </author>

          <date day="" month="" year="2010" />
        </front>
      </reference>

      <reference anchor="UMAnitarians"
                 target="https://kantarainitiative.org/confluence/display/uma/Participant+Roster">
        <front>
          <title>UMA Participant Roster</title>

          <author initials="E." surname="Maler">
            <organization>Maler</organization>
          </author>

          <date day="" month="" year="2017" />
        </front>
      </reference>

      <reference anchor="UMA-legal"
                 target="http://kantarainitiative.org/confluence/display/uma/UMA+Legal">
        <front>
          <title>UMA Legal</title>

          <author initials="E." surname="Maler">
            <organization>Maler</organization>
          </author>

          <date day="" month="" year="2017" />
        </front>
      </reference>
    </references>
  </back>
</rfc>
