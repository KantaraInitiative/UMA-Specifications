<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='http://xml2rfc.tools.ietf.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml2rfc.tools.ietf.org/authoring/rfc2629.dtd">
<rfc category="std" docName="uma-core" id="kantara" ipr="kantara"
     target="draft" version="2.0">
  <?xml-stylesheet texttype='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc='yes' ?>

  <?rfc tocdepth='4' ?>

  <?rfc symrefs='yes' ?>

  <?rfc sortrefs='yes' ?>

  <?rfc compact='yes' ?>

  <?rfc subcompact='no' ?>

  <front>
    <title abbrev="UMA Core">User-Managed Access (UMA) 2.0</title>

    <author fullname="Eve Maler" initials="E." role="editor" surname="Maler">
      <organization>ForgeRock</organization>

      <address>
        <email>eve.maler@forgerock.com</email>
      </address>
    </author>

    <author fullname="Maciej Machulak" initials="M." surname="Machulak">
      <organization>iWelcome</organization>

      <address>
        <email>maciej.machulak@iwelcome.com</email>
      </address>
    </author>

    <author fullname="Justin Richer" initials="J." surname="Richer">
      <organization>Bespoke Engineering</organization>

      <address>
        <email>justin@bspk.io</email>
      </address>
    </author>

    <date day="17" month="January" year="2017" />

    <abstract>
      <t>User-Managed Access (UMA) 2.0 makes use of OAuth 2.0 and related
      standards to enable a resource owner to control protected resource
      access by requesting parties and their clients in an asynchronous
      fashion. Resources reside on any number of resource servers and a
      central authorization server manages the resource owner's access grants
      over time.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="introduction" title="Introduction">
      <t>User-Managed Access (UMA) 2.0 makes use of OAuth 2.0 <xref
      target="RFC6749" /> and related standards to enable additions to OAuth's
      abilities as follows:<list style="symbols">
          <t>The resource owner grants resource access to clients used by
          entities that are in a <spanx>requesting party</spanx> role (see
          <xref target="terminology" /> for a definition of this new role).
          This enables party-to-party authorization, rather than authorization
          of application access alone.</t>

          <t>This specification defines an OAuth extension grant called the
          UMA grant (see <xref target="seek-authorization" />). This grant
          defines the interface to the client and requesting party and is
          <spanx>asynchronous</spanx> with respect to resource owner
          interactions. It lets a resource owner configure an authorization
          server with access grant rules (policy conditions) at will, rather
          than authorizing access token issuance synchronously just after
          authenticating.</t>

          <t>The relationship between an authorization server and resource
          server is loosely coupled, or federated, in a resource owner context
          through the use of <xref target="OAuth-resource-reg" /> and an
          extension of <xref target="RFC7662" />. Multiple resource servers
          operating in different domains can communicate with a single
          authorization server operating in yet another domain that acts on
          behalf of a resource owner. This loose coupling enables a service
          ecosystem to automate resource protection, and lets the resource
          owner monitor, manage, and control access grant rules at a central
          service location over time. The token introspection extension lets
          the resource owner increase and decrease grants at a grain finer
          than a whole access token.</t>
        </list></t>

      <t>For example, a bank customer (resource owner) named Alice with a bank
      account service (resource server) can use a dedicated sharing management
      service (authorization server) to manage access by a spouse Bob, an
      accounting professional Charline, and a tax professional David
      (requesting parties), all using different client applications, to view
      account data and to give each of them differential access to payment and
      withdrawal functions. Alice can use the same sharing management service
      to give out "read", "edit", or "print" access to documents residing in a
      cloud file system (a different resource server) residing in a different
      domain to friends Erik and Frances, with whom she is working on a
      residential community project. (A variety of use cases can be found in
      <xref target="UMA-usecases" /> and <xref
      target="UMA-casestudies" />.)</t>

      <section anchor="terminology"
               title="Roles and High-Level Communications">
        <t>UMA uses the OAuth roles, defines enhanced versions of the roles in
        some cases, and also defines a new role, the requesting party:<list
            style="hanging">
            <t hangText="resource owner"><vspace />An entity capable of
            granting access to a protected resource, the "user" in
            User-Managed Access. This is typically an end-user (a natural
            person) but it can also be non-human entity that is treated as a
            person for limited legal purposes (a legal person), such as a
            corporation.</t>

            <t hangText="requesting party"><vspace />A natural or legal person
            that uses a client to seek access to a protected resource. The
            requesting party may or may not be the same party as the resource
            owner.</t>

            <t hangText="client"><vspace />An application that is capable of
            making requests for protected resources with the resource owner's
            authorization and on the requesting party's behalf.</t>

            <t hangText="resource server"><vspace />A server that hosts
            resources on a resource owner's behalf, registers resources for
            protection at an authorization server, and is capable of accepting
            and responding to requests for protected resources.</t>

            <t hangText="authorization server"><vspace />A server that
            protects resources managed at a resource server on a resource
            owner's behalf.</t>
          </list></t>

        <t><xref target="UMA-roles" /> shows the communications among the
        roles at a high level.</t>

        <figure align="center" anchor="UMA-roles">
          <preamble>Roles and Communications</preamble>

          <artwork><![CDATA[                                        +------------------+
                                        |     resource     |
       +- - manage (out of scope) - - - |       owner      |
       |                                +------------------+
       |                                          |
       |             protection                control
       |             API access            (out of scope)
       |             token (PAT)
       |                                          |
       v                                          v
+------------+               +----------+------------------+
|            |               |protection|                  |
|  resource  |               |   API    |   authorization  |
|   server   |<---protect----| (needs   |      server      |
|            |               |   PAT)   |                  |
+------------+               +----------+------------------+
| protected  |                          |        UMA       |
| resource   |                          |       grant      |
|(needs RPT) |                          |  (PCT optional)  |
+------------+                          +------------------+
       ^             requesting          ^  persisted   ^
       |             party token         |   claims     |
       |               (RPT)             |    token     |
       |                               push   (PCT)     |
       |                              claims       interact
       |                            +--------+        for
       +-------------access---------| client |      claims
                                    +--------+     gathering
                                           +---------------+
                                           |  requesting   |
                                           |     party     |
                                           +---------------+
]]></artwork>
        </figure>

        <t>The communications among the roles involve these concepts:<list
            hangIndent="6" style="hanging">
            <t hangText="resource">A digital resource available through an
            HTTP service. See <xref target="fed-authz" /> for information
            about UMA's relationship with HTTP, and <xref
            target="resource-scope-interpretation" /> for information about a
            resource server's responsibility for resource complexity.</t>

            <t hangText="protected resource">A resource to which a resource
            owner is able to control access grants through an authorization
            server.</t>

            <t hangText="scope">A bounded extent of access to a protected
            resource. Scopes are associated with particular resources.</t>

            <t hangText="policy conditions">Access grant rules configured at
            an authorization server that effect resource protection.</t>

            <t hangText="protection API access token (PAT)">An OAuth access
            token with the scope <spanx style="verb">uma_protection</spanx>,
            used by the resource server at the authorization server's
            protection API.</t>

            <t hangText="claim"><vspace />A statement of the value or values
            of one or more attributes of an entity. An authorization server
            typically needs to collect and assess one or more claims of a
            requesting party or client against the policy conditions of a
            resource owner as part of protecting a resource.</t>

            <t hangText="permission">Authorized access to a particular
            resource with one or more scopes. A resource server requests one
            or more permissions on behalf of a client at an authorization
            server, receiving a permission ticket representing the entire
            requested set in return. If an RPT is ultimately issued, it is
            associated with some number of granted permissions.</t>

            <t hangText="requesting party token (RPT)">An OAuth access token
            associated with a set of permissions, used by the client to gain
            access to protected resources at the resource server.</t>

            <t hangText="permission ticket">A correlation handle that is
            conveyed from an authorization server to a resource server, from a
            resource server to a client, and ultimately from a client back to
            an authorization server, to enable the authorization server to
            assess the correct policy conditions to apply to a request for
            permissions.</t>

            <t hangText="persisted claims token (PCT)">A correlation handle
            issued by an authorization server that represents a set of claims
            collected during one authorization process to be used during
            future authorization processes. An end-user requesting party MAY
            have provided authorization in some interactive fashion for the
            authorization server to persist this information across
            authorization processes.</t>
          </list></t>

        <t>A resource owner manages resources at any number of resource
        servers, and works with an authorization server to set policy
        conditions that control access grants.</t>

        <t>The authorization server presents a protection API (for more detail
        see <xref target="protection-api" />) to the resource server to enable
        resource protection. (Except for taking part in PAT issuance, the
        resource owner's interactions with each server are out of scope of
        this specification.)</t>

        <t>The authorization server supports the UMA grant type (for more
        detail see <xref target="authorization-api" />) to enable issuing
        grants to clients based on policy conditions in the form of a
        requesting party token (RPT).</t>

        <t>The resource server presents a protected resource interface to the
        client (for more detail see <xref
        target="resource-server-interface" />), which enables for handling
        both initial resource requests by a client with no RPT and subsequent
        resource requests with an RPT.</t>
      </section>

      <section title="Notational Conventions">
        <t>The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT',
        'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this
        document are to be interpreted as described in <xref
        target="RFC2119" />.</t>

        <t>Unless otherwise noted, all protocol properties and values are case
        sensitive. JSON <xref target="RFC7159" /> data structures defined by
        this specification MAY contain extension properties that are not
        defined in this specification. Any entity receiving or retrieving a
        JSON data structure SHOULD ignore extension properties it is unable to
        understand. Extension names that are unprotected from collisions are
        outside the scope of this specification.</t>
      </section>

      <section anchor="fed-authz" title="Federated Authorization">
        <t>The federation of authorization in UMA results in a conceptual
        separation of responsibilities: <list style="symbols">
            <t>The resource server defines the boundaries of a resource and
            its possible scopes of access by virtue of being the publisher of
            the API being protected.</t>

            <t>The resource owner configures the authorization server to
            express policy conditions that match up resources and scopes to a
            protection scheme.</t>

            <t>The authorization server executes centralized policy condition
            rules when clients attempt protected-resource access on behalf of
            the requesting party, with an ultimate result of RPT and
            permission issuance or denial.</t>
          </list></t>

        <t>Practical control of access among loosely coupled parties typically
        requires more than just messaging protocols. It is out of scope for
        this specification to define more than the "technical contract"
        between UMA-conforming entities. The legally responsible parties
        representing these entities may form contracts for, and laws and
        regulations may govern, access-granting relationships. Parties that
        are operating entities claiming to be UMA-conforming should provide
        documentation of any rights and obligations between and among them;
        see <xref target="trust-considerations" /> for more information.</t>

        <t>Implementers have the opportunity to develop extensions and
        profiles (see <xref target="profiles" />) that specify and restrict
        various options, according to deployment and usage conditions.</t>

        <section title="HTTP Usage">
          <t>This specification is designed for use with HTTP <xref
          target="RFC2616" />, and for interoperability and security in the
          context of loosely coupled services and applications operated by
          independent parties in multiple domains. Unless one or more of the
          profiles defined in <xref target="comms-profiles" /> are in use, the
          following are REQUIRED:<list style="symbols">
              <t>The authorization server MUST expose its endpoints over
              HTTP.</t>

              <t>The authorization server MUST use TLS protection over its
              endpoints, as governed by <xref target="BCP195" />, which
              discusses deployment and adoption characteristics of different
              TLS versions.</t>

              <t>The authorization server MUST use OAuth (or an OAuth-based
              authentication protocol) to secure its protection API endpoints.
              For those OAuth protection use cases where an identity token is
              desired in addition to an access token, it is RECOMMENDED that
              an OAuth-based authentication protocol such as OpenID Connect
              <xref target="OIDCCore" /> be used.</t>

              <t>The resource server MUST expose its protected resources
              through an HTTP service.</t>
            </list></t>
        </section>

        <section anchor="resource-scope-interpretation"
                 title="Resource and Scope Interpretation">
          <t>The resource server is privy to information about resource
          semantics and structure, only a limited subset of which is exposed
          through resource registration and API documentation. Thus, certain
          responsibilities for resource and scope interpretation fall to the
          resource server.</t>

          <t>The resource server MAY register for protection a single resource
          that, from its perspective, has multiple parts, or has dynamic
          elements such as the capacity for querying or filtering, or
          otherwise has internal complexity. The resource server alone is
          responsible for maintaining any required mappings between internal
          representations and the resource identifiers and scopes known to the
          authorization server. Because access attempts on resources by
          clients are resource identifier-unaware, the process of making a
          permission request may also require interpretation by the resource
          server in order to establish a suitable resource identifier,
          resource owner, and authorization server.</t>
        </section>
      </section>

      <section anchor="flow-summary-sec" title="Protocol Flow Summary">
        <t><xref target="protocol-flow" /> shows a sample high-level protocol
        flow that summarizes messaging options, illustrating success paths in
        a context of maximum variety. <xref
        target="protocol-flow-details-sec" /> provides detailed specifications
        of flows that correspond to all success and failure paths and provide
        all messaging options.</t>

        <figure anchor="protocol-flow">
          <preamble>Protocol Flow Summary</preamble>

          <artwork><![CDATA[resource resource        authorization             client requesting
 owner    server             server                   |      party
   |Redir...|1 for PAT issuance|                      |        |
   |<-------|*---------------->|                      |        |
   |        |2 Reg resources   |                      |        |
   |        |*---------------->|                      |        |
   |        |    Attempt resource access w/no token  3|        |
   |        |<---------------------------------------#|        |
   |        |4 Req permissions |                      |        |
   |        |*---------------->|                      |        |
   |        |Perm ticket      5|                      |        |
   |        |<----------------*|                      |        |
   |        |6 Return AS loc and permission ticket    |        |
   |        |#--------------------------------------->|        |
   |        |                  |  Req RPT, send perm 7|        |
   |        |                  |   ticket, push claims|        |
   |        |                  |<--------------------=|        |
   |        |   Authorization 8|= - - -+              |        |
   |        |        assessment|< - - -+              |        |
   |        |                  |9 Return need_info    |        |
   |        |                  |with redirect_user    |        |
   |        |                  |=-------------------->|        |
   |        |                  |                      |10      |
   |        |                  |       for interactive|Redir...|
   |        |                  |      claims gathering|        |
   |        |                  |<---------------------|=------>|
   |        |                  |  Request RPT, send 11|        |
   |        |                  |     permission ticket|        |
   |        |                  |<--------------------=|        |
   |        |   Authorization 8|= - - -+              |        |
   |        |        assessment|< - - -+              |        |
   |        |                  |12 Issue RPT with PCT |        |
   |        |                  |=-------------------->|        |
   |        |      Attempt resource access with RPT 13|        |
   |        |<---------------------------------------#|        |
   |        |14 Introspect RPT |                      |        |
   |        |*---------------->|                      |        |
   |        |  Return object 15|                      |        |
   |        |<----------------*|                      |        |
   |Token 16|# - - -+          |                      |        |
   | assess-|< - - -+          |                      |        |
   |    ment|17 Return resource representation        |        |
   |        |#--------------------------------------->|        |
]]></artwork>
        </figure>

        <t>Steps 1, 2, 4-5, and 13-14 (arrows with an asterisk (*)) summarize
        communications between the authorization server and resource server
        that constitute the protection API and related resource owner actions
        (<xref target="protection-api" /> provides a high-level
        definition).</t>

        <t>Steps 7-12 (arrows with an equal sign (=); note that steps 7 and 8
        are repeated) summarize communications between the authorization
        server and client that constitute the UMA grant and related
        authorization server and requesting party actions (<xref
        target="authorization-api" /> provides a high-level definition).</t>

        <t>Steps 3, 6, 12, 15, and 16 (arrows with a number sign (#))
        summarize communications between the resource server and client that
        constitute the protected resource interface and related resource
        server actions (<xref target="resource-server-interface" /> provides a
        high-level definition).</t>

        <t>The authorization server MUST declare all of its endpoints in its
        configuration document (see <xref target="am-endpoints" />).</t>

        <t>Note: In step 3, the client attempts access to a protected resource
        with no token, and in step 4, the resource server requests permissions
        on behalf of that client at the authorization server. In order for the
        resource server to know which authorization server to approach and
        which PAT (representing a resource owner) and resource identifier to
        supply in that request, the API being accessed by the client needs to
        be structured in such a way that the resource server can derive this
        information from the client's token-free access attempt. Commonly,
        this information can be passed through the URI, headers, or body of
        the client's request. Alternatively, the entire interface could be
        dedicated to the use of a single resource owner and protected by a
        single authorization server.</t>

        <section anchor="protection-api"
                 title="Protection API and Related Resource Owner Actions">
          <t>The authorization server's protection API consists of three
          endpoints:<list style="symbols">
              <t>Resource registration endpoint as defined by <xref
              target="OAuth-resource-reg" /></t>

              <t>Permission endpoint as defined by <xref
              target="register-permission" /></t>

              <t>Token introspection endpoint as defined by <xref
              target="RFC7662" /> and <xref
              target="token-introspection" /></t>
            </list></t>

          <t>The resource server is the client of this API. As noted in <xref
          target="fed-authz" />, the authorization server MUST apply TLS and
          OAuth protection to this API. The authorization server MUST require
          a PAT for API access. Thus, the resource server is an OAuth client;
          it MUST have OAuth client credentials from the authorization server
          and the ability to obtain an OAuth access token with at least the
          scope <spanx style="verb">uma_protection</spanx> (that is, a PAT).
          If a request to a protection API endpoint fails due to an invalid,
          missing, or expired PAT, or requires higher privileges at this
          endpoint than provided by the PAT, the authorization server responds
          with an OAuth error.</t>

          <t>The issuance of a PAT represents the authorization of the
          resource owner for the resource server to use the authorization
          server for protecting the resources that this resource server
          registers for protection. Any OAuth authorization grant type might
          be appropriate depending on circumstances; for example, the client
          credentials grant is useful in the case of an organization acting as
          a resource owner, whereas an interactive grant type is typically
          more appropriate for capturing the approval of an end-user resource
          owner.</t>

          <t>Note: Except for PAT issuance, the resource owner-authorization
          server and resource owner-resource server interfaces are out of
          scope of this specification. A variety of flows and user interfaces
          for policy condition setting involving user agents for both of these
          servers are possible, each with different privacy consequences for
          end-user resource owners if the experiences encourage or discourage
          different access granting behaviors. Some discretionary elements of
          the resource registration API are available for use in such user
          interfaces.</t>

          <t>The resource server MAY protect any subset of the resource
          owner's resources using different authorization servers or other
          means entirely, or to protect some resources and not others.
          Additionally, the choice of protection regimes MAY be made
          explicitly by the resource owner or implicitly by the resource
          server. Any such partitioning by the resource server or owner is out
          of scope for this specification.</t>

          <t>Note: Because the resource server is responsible for managing
          internal resource complexity and because the resource owner-resource
          server interface is out of scope for this specification, the
          resource server is fully responsible for managing the process and
          timing of registering resources, maintaining the registration of
          resources, and deregistering resources at the authorization
          server.</t>
        </section>

        <section anchor="authorization-api"
                 title="UMA Grant and Related Authorization Server and Requesting Party Actions">
          <t>The UMA grant consists of the following elements:<list
              style="symbols">
              <t>OAuth token endpoint as defined by <xref target="RFC6749" />
              and <xref target="seek-authorization" />. The token endpoint
              handles client requests for, and issues, RPTs. The UMA grant
              type is defined for use on the requesting party's behalf rather
              than the resource owner's behalf, as in the case of grants
              defined in <xref target="RFC6749" />. </t>

              <t>OPTIONAL claims interaction endpoint as defined by <xref
              target="claim-redirect" />. This endpoint plays a role in UMA
              somewhat similar to OAuth's authorization endpoint, but it is
              defined for use by the requesting party rather than the resource
              owner. For interactive claims-gathering, the client SHOULD
              register a <spanx style="verb">claims_redirect_uri</spanx> (as
              defined in <xref target="claim-redirect" />) with the
              authorization server, either using a static process or through
              <xref target="RFC7591" /> or <xref
              target="OIDCDynClientReg" />.</t>
            </list></t>

          <t>It is OPTIONAL for the authorization server to issue a persisted
          claims token (PCT) to the client when issuing an RPT in order to
          optimize future RPT requests. The PCT represents the set of claims
          collected by the authorization server during the authorization
          process. It is intended to be used when this client obtains a new
          RPT for this requesting party at this authorization server, for the
          same or a different resource at the same or a different resource
          server, available under the same or different policies, controlled
          by the same or a different resource owner.</t>

          <t>A client seeking access to a protected resource needs OAuth
          client credentials issued by the authorization server protecting
          that resource.</t>

          <t>The authorization server's function is to perform authorization
          on behalf of the resource owner. The authorization process is the
          process through which the client attempts to obtain an RPT from the
          authorization server in order to access a protected resource on
          behalf of a requesting party.</t>

          <t>The authorization server conducts the authorization process in
          three phases, with some variation possible in order and looping as
          follows:<list style="symbols">
              <t>A claims collection phase. Two kinds of claims collection are
              possible: claims pushing by a client and interactive claims
              gathering with an end-user requesting party. This phase MAY
              occur first in the authorization process in the following
              circumstances:<list style="symbols">
                  <t>When the client redirects an end-user requesting party to
                  the authorization server for interactive claims gathering as
                  a first step. In order for this to happen, the client needs
                  a permission ticket and for the authorization server to have
                  statically declared a claims redirection endpoint in its
                  configuration document.</t>

                  <t>When the client requests an RPT at the token endpoint
                  with pushed claims as a first step.</t>
                </list></t>

              <t>An authorization assessment phase. This phase involves
              assembling and calculating over policy conditions, scopes,
              claims, and other relevant information in evidence in order to
              mitigate access authorization risk. This phase MAY occur first
              in the authorization process when the client initially requests
              an RPT at the token endpoint without pushing claims.</t>

              <t>An authorization result phase. In this phase, the
              authorization server either returns a success code, an RPT, and
              an optional PCT, or an error code. If the error code is <spanx
              style="verb">need_info</spanx>, the client has the opportunity
              to loop within the same authorization process by requesting an
              RPT or redirecting the requesting party.</t>
            </list></t>

          <t>The following conceptual variables are used in the subsequent
          authorization assessment calculation:<list style="hanging">
              <t hangText="ClientRegistered">Scopes for which the client
              pre-registered with the authorization server, either dynamically
              or through some static process. Note that in typical OAuth scope
              registrations used today, such scopes are often not explicitly
              associated with particular resources and so the authorization
              server might need to apply a scope-to-resource interpretation
              process.</t>

              <t hangText="ClientRequested">Scopes the client most recently
              requested at the token endpoint.</t>

              <t hangText="PermissionTicket">Scopes associated with the most
              recent permission ticket presented by the client at the token
              endpoint.</t>

              <t hangText="RequestedScope">The working set of requested
              scopes.</t>

              <t hangText="AllowedScopes">Scopes allowed by all operative
              policy conditions, based on claims and any other relevant
              information collected in this authorization process so far.</t>

              <t hangText="GrantedScopes">Scopes to grant the client. </t>
            </list></t>

          <t>The authorization server MUST apply the following authorization
          assessment calculation:<list style="numbers">
              <t>Determine the set of requested resource scopes as
              follows:<spanx> RequestedScopes = union ( intersection
              (ClientRequested, ClientRegistered), PermissionTicket)</spanx>.
              Note that the client must have registered and requested at least
              one scope in common to have any effect at all on the result
              set.</t>

              <t>Determine all operative policy conditions for the resource
              identifiers associated with <spanx>PermissionTicket</spanx>.
              Note: Policy conditions are out of scope ("scope" in the
              ordinary English sense) for this specification.</t>

              <t>Evaluate the RPT request and any claims and any other
              relevant information collected in this authorization process so
              far against the policy conditions. Potential sources of claims
              include pushed claims, interactively gathered claims, and claims
              associated with a client-provided PCT in the RPT request.</t>

              <t>Determine the <spanx>AllowedScopes</spanx>.</t>

              <t>Determine the client&rsquo;s authorized state by calculating
              <spanx>GrantedScopes = intersection (RequestedScopes,
              AllowedScopes)</spanx>. If the value is null, the result is
              failure; if the value is non-null, the result is success and the
              authorization server MUST subsequently issue an RPT containing
              <spanx>GrantedScopes</spanx>.</t>
            </list></t>

          <t>The authorization server MUST use a default-deny authorization
          assessment model in adding permissions to RPTs, that is, "everything
          that is not expressly allowed is forbidden" for resources for which
          resource servers have requested access permission on behalf of
          clients. Exercise caution in implementing default-deny because
          corner cases can inadvertently result in default-permit behavior.
          For example, it is insufficient simply to assume that all resources
          have some non-zero set of claims required for access, and then
          accept an empty set of supplied claims as sufficient for access.</t>

          <t>Note: Since policy conditions are out of scope for this
          specification and the authorization server's policy expression and
          evaluation capabilities might take a simple or arbitrarily complex
          form, its corresponding abilities to combine or perform calculations
          over claim values might also vary.</t>
        </section>

        <section anchor="resource-server-interface"
                 title="Protected Resource Interface and Related Resource Server Actions">
          <t>As noted in <xref target="fed-authz" />, the resource server MUST
          expose its protected resources through an HTTP service unless the
          appropriate extensibility profile is in use. The digital resources
          MAY take any form (for example, API endpoints).</t>

          <t>Once a resource is registered for protection, and until it has
          been deregistered, the resource server MUST require the client to
          present a valid RPT with sufficient permissions before giving
          access.</t>

          <t>Note: The following aspects of the resource service-client
          relationship are out of scope for this specification:<list
              style="symbols">
              <t>How the client acquired knowledge of the resource server's
              interface and the specific endpoint of the desired protected
              resource. For example, the resource server might have a formally
              documented API or it might serve up a simple web page, and the
              resource owner might have advertised the endpoint publicly on a
              blog or other website, listed it in a discovery service, or
              emailed a link to a particular intended requesting party.</t>

              <t>The impetus for the client's access attempt. For example, an
              end-user requesting party might have clicked on a publicly
              available thumbnail representation of a graphics-based resource
              to retrieve a protected higher-resolution version.</t>
            </list></t>
        </section>
      </section>

      <section title="Time-to-Live Considerations">
        <t>The authorization server has the opportunity to manage the validity
        periods of access tokens that it issues, their corresponding refresh
        tokens where applicable, the individual permission components
        associated with RPTs where applicable, caching periods for responses,
        and even the OAuth client credentials that it issues. Different
        time-to-live strategies may be suitable for different resources and
        scopes of access, and the authorization server has the opportunity to
        give the resource owner control over lifetimes of tokens and
        permissions issued on their behalf through policy. These options are
        all outside the scope of this specification.</t>

        <t>Note: Because of the asynchronous nature of resource owner
        interactions (to authorize issuance of the PAT) and resource server
        requests to the authorization server that require use of the PAT
        spurred by requesting-side communications (requesting permissions and
        introspecting tokens), and potentially for other reasons, the resource
        owner can frequently expected to be offline when the resource server
        needs to use a PAT. Therefore, the authorization server needs to
        manage PAT issuance and expiration and any corresponding refresh token
        appropriately to ensure that the resource server has access as
        needed.</t>
      </section>
    </section>

    <section anchor="am-endpoints" title="Authorization Server Configuration">
      <t>The authorization server supplies configuration information in order
      to document its endpoints and the major conformance options it
      supports.</t>

      <t>Where this specification does not already require optional features
      to be documented, it is RECOMMENDED that authorization server deployers
      document any profiled or extended features explicitly, ideally by
      supplying the URI identifying each UMA profile and extension in its
      <spanx style="verb">uma_profiles_supported</spanx> and <spanx
      style="verb">claim_token_profiles_supported</spanx> configuration
      properties, and by using extension configuration properties to indicate
      specific usage details as necessary.</t>

      <section anchor="config-properties" title="Configuration Properties">
        <t>The authorization server has configuration properties as follows.
        <list hangIndent="6" style="hanging">
            <t hangText="issuer"><vspace />REQUIRED. A URI with no query or
            fragment component that the authorization server asserts as its
            issuer identifier. This value MUST be identical to the web
            location of the configuration document minus the <spanx
            style="verb">.well-known/uma2-configuration</spanx> path
            components.</t>

            <t hangText="claim_token_profiles_supported"><vspace />OPTIONAL.
            Claim token format profiles supported by this authorization
            server. The property value is an array of string values, where
            each string value MAY be a URI.</t>

            <t hangText="uma_profiles_supported"><vspace />OPTIONAL. UMA
            profiles supported by this authorization server. The property
            value is an array of string values, where each string value is a
            URI identifying an UMA profile. Examples of UMA profiles are the
            API extensibility profiles defined in <xref
            target="comms-profiles" />.</t>

            <t hangText="registration_endpoint"><vspace />OPTIONAL. The
            endpoint to use for performing dynamic client registration in the
            case of the use of <xref target="RFC7591" /> or<xref
            target="OIDCDynClientReg" />. The presence of this property
            indicates authorization server support for dynamic client
            registration feature; its absence indicates a lack of support. If
            the authorization server supports dynamic client registration, it
            MUST allow client applications to register a <spanx
            style="verb">claims_redirect_uri</spanx> metadata field, as
            defined in <xref target="claim-redirect" />.</t>

            <t hangText="token_endpoint"><vspace />REQUIRED. The endpoint URI
            at which the resource server asks the authorization server for a
            PAT on behalf of the resource owner (by requesting the OAuth scope
            <spanx style="verb">uma_protection</spanx>) and at which the
            client asks the authorization server for an RPT on behalf of the
            requesting party using the UMA grant.</t>

            <t hangText="authorization_endpoint"><vspace />REQUIRED. The
            endpoint URI at which the resource server gathers the
            authorization of an end-user resource owner for PAT issuance. Note
            that the UMA grant does not involve the client gathering the
            authorization of an end-user requesting party directly.</t>

            <t hangText="claims_interaction_endpoint"><vspace />OPTIONAL. A
            static endpoint URI at which the authorization server declares
            that it interacts with end-user requesting parties to gather
            claims. If the authorization server also provides a claims
            interaction endpoint URI as part of its <spanx
            style="verb">redirect_user</spanx> hint in a <spanx
            style="verb">need_info</spanx> response to a client on
            authorization failure (see <xref
            target="authorization-failure" />), that value overrides the one
            provided in this configuration property. Providing the static
            endpoint URI is useful for enabling interactive claims gathering
            prior to pushed-claims flows, so that, for example, it is possible
            to gather requesting party authorization for persisting all claims
            subsequently collected.</t>

            <t hangText="introspection_endpoint"><vspace />REQUIRED. The
            endpoint URI at which the resource server introspects an RPT
            presented to it by a client. Usage of this endpoint is defined by
            <xref target="RFC7662" /> and <xref
            target="token-introspection" />. A valid PAT MUST accompany
            requests to this protected endpoint.</t>

            <t hangText="resource_registration_endpoint"><vspace />REQUIRED.
            The endpoint URI at which the resource server registers resources
            to put them under authorization manager protection. Usage of this
            endpoint is defined by <xref target="OAuth-resource-reg" /> and
            <xref target="protecting-a-resource" />. A valid PAT MUST
            accompany requests to this protected endpoint.</t>

            <t hangText="permission_endpoint"><vspace />REQUIRED. The endpoint
            URI at which the resource server requests permissions on the
            client's behalf. Usage of this endpoint is defined by <xref
            target="register-permission" />. A valid PAT MUST accompany
            requests to this protected endpoint.</t>
          </list></t>
      </section>

      <section title="Configuration Document">
        <t>The authorization server MUST make its configuration properties
        available in a JSON document at the path formed by concatenating the
        string <spanx style="verb">/.well-known/uma2-configuration</spanx> to
        the <spanx style="verb">issuer</spanx> configuration property value as
        defined in <xref target="config-properties" />. The syntax and
        semantics of <spanx style="verb">/.well-known</spanx> are defined in
        <xref target="RFC5785" /> and apply to the <spanx
        style="verb">issuer</spanx> value when it contains no path
        component.</t>
      </section>

      <section title="Requests to Authorization Server for Configuration Document">
        <t>Any entity, such as a resource server or client, seeking an
        authorization server configuration document MUST query it using an
        HTTP GET request.</t>

        <figure>
          <preamble>Example:</preamble>

          <artwork><![CDATA[GET /.well-known/uma2-configuration HTTP/1.1
Host: example.com
}
]]></artwork>
        </figure>

        <t>If the <spanx style="verb">issuer</spanx> value contains a path
        component, the caller MUST remove any terminating slash before
        appending <spanx
        style="verb">/.well-known/uma2-configuration</spanx>.</t>

        <figure>
          <preamble>For example, the caller would make the following request
          to the issuer <spanx
          style="verb">https://example.com/issuer1</spanx>, since the <spanx
          style="verb">issuer</spanx> value contains a path
          component:</preamble>

          <artwork><![CDATA[GET /issuer1/.well-known/uma2-configuration HTTP/1.1
Host: example.com
}
]]></artwork>
        </figure>
      </section>

      <section title="Authorization Server Response Containing Configuration Document">
        <t>A successful authorization server response to a configuration
        document query MUST use the HTTP 200 (OK) status code and return a
        JSON object using the <spanx style="verb">application/json</spanx>
        content type containing the configuration properties as defined in
        <xref target="config-properties" />.</t>

        <figure>
          <preamble>Example (note the use of <spanx
          style="verb">https:</spanx> for endpoints throughout):</preamble>

          <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
...

{  
   "issuer":"https://example.com",
   "claim_token_profiles_supported":[  
      "https://example.com/claims/formats/token1"
   ],
   "registration_endpoint":"https://as.example.com/dyn_client_reg_uri",
   "token_endpoint":"https://as.example.com/token_uri",
   "authorization_endpoint":"https://as.example.com/authz_uri",
   "claims_interaction_endpoint":"https://as.example.com/claims_uri",
   "resource_registration_endpoint":"https://as.example.com/rs/rsrc_uri",
   "introspection_endpoint":"https://as.example.com/rs/status_uri",
   "permission_endpoint":"https://as.example.com/rs/perm_uri"
}
]]></artwork>
        </figure>
      </section>
    </section>

    <section anchor="protocol-flow-details-sec" title="Protocol Flow Details">
      <t>Throughout this section, non-normative correspondences to the steps
      in <xref target="protocol-flow" /> are noted where applicable.</t>

      <t>The recipient of each request message SHOULD respond unless it
      detects a security concern, such as a suspected denial of service attack
      that can be mitigated by rate limiting.</t>

      <section anchor="rs-gets-pat" title="Resource Server Obtains PAT">
        <t>In this process, the resource server obtains a PAT on the resource
        owner's behalf from the authorization server through an <xref
        target="RFC6749" /> grant flow.</t>

        <t>This process assumes that the authorization server has provided the
        resource server with OAuth client credentials, either dynamically
        through <xref target="RFC7591" /> or <xref
        target="OIDCDynClientReg" />, or alternatively through a static
        process. This process corresponds to step 1 in <xref
        target="protocol-flow" />.</t>
      </section>

      <section title="Resource Server Registers Resources for Protection">
        <t>In an ongoing fashion, the resource server registers any resources
        with the authorization server to put them under protection, using the
        resource registration endpoint of the protection API (as defined by
        <xref target="OAuth-resource-reg" />; see Section 7 in that
        specification for a worked example).</t>

        <t>This process assumes that the resource server has discovered the
        authorization server's configuration document and endpoints as needed.
        This process corresponds to step 2 in <xref
        target="protocol-flow" />.</t>
      </section>

      <section anchor="client-attempts-tokenless-access"
               title="Client Attempts Access to Protected Resource With No Token">
        <t>In this process, the client attempts access to a resource that the
        resource server considers protected, without having presented a token
        for authorized access.</t>

        <t>This process corresponds to step 3 in <xref
        target="protocol-flow" />. This process assumes that the resource
        server has already registered any relevant resources for protection
        prior to the client's tokenless access attempt.</t>

        <t>Note: This process does not assume that any policy conditions have
        already been defined at the authorization server. A variety of
        combinations of access attempt flows and resource owner policy
        condition-setting interfaces are possible.</t>

        <t>After the client's access attempt, the resource server's next
        option to act is defined in <xref target="register-permission" />
        (requesting permissions, which involves the authorization server), and
        its next option to respond to the client is defined in <xref
        target="rs-tokenless-response" />. Because the resource server is
        responsible for its own resource semantics and structure, it may need
        to map the client's access attempt to a suitable resource identifier
        (and thus resource owner and authorization server) before
        proceeding.</t>

        <figure>
          <preamble>Example of a client request at a protected resource
          carrying no token:</preamble>

          <artwork><![CDATA[GET /users/alice/album/photo.jpg HTTP/1.1
Host: photoz.example.com
...
]]></artwork>
        </figure>
      </section>

      <section anchor="register-permission"
               title="Resource Server Requests Permissions on Client's Behalf With Authorization Server">
        <t>In this process, the resource server requests one or more
        permissions on the client's behalf at the authorization server's
        permission endpoint.</t>

        <t>This process assumes that the client's request at the protected
        resource had no token (or had an invalid RPT or insufficient
        permissions associated with the RPT). The success path of this process
        corresponds to steps 4 and 5 in <xref target="protocol-flow" />.</t>

        <t>The extent of the set of requested permissions MUST suffice for the
        extent of the client's access attempt at that resource. For example,
        the resource server can request a single permission with multiple
        scopes where one of them includes the scope attempted, or multiple
        permissions where one of them is the resource attempted.</t>

        <t>The PAT provided in the API request enables the authorization
        server to map the resource server's request to the appropriate
        resource owner.</t>

        <t>In its response, the authorization server returns a permission
        ticket for the resource server to give to the client that represents
        the same permissions that the resource server requested.</t>

        <t>After this process, if the resource server was requesting
        permissions due to a tokenless access attempt, its next option is
        defined in <xref target="rs-tokenless-response" />. If it was
        requesting permissions due to an access attempt with an RPT, its next
        option is defined in <xref target="rs-rpt-response" />.</t>

        <section title="Resource Server Request to Permission Endpoint">
          <t>The resource server uses the POST method at the permission
          endpoint. The body of the HTTP request message contains a JSON
          object (for a request containing a single resource identifier) or
          array (for a request containing more than one resource identifier)
          providing the request, using a format derived from the resource
          description format specified in <xref
          target="OAuth-resource-reg" />, as follows. The object used in both
          forms has the following properties:<list style="hanging">
              <t hangText="resource_id">REQUIRED. The identifier for a
              resource to which the resource server is requesting permission
              on behalf of the client. The identifier MUST correspond to a
              resource that was previously registered.</t>

              <t hangText="resource_scopes">REQUIRED. An array referencing one
              or more identifiers of scopes to which the resource server is
              requesting access for this resource on behalf of the client.
              Each scope identifier MUST correspond to a scope that was
              previously registered by this resource server for the referenced
              resource.</t>
            </list></t>

          <figure>
            <preamble>Example of an HTTP request for a single permission at
            the authorization server's permission endpoint, with a PAT in the
            header:</preamble>

            <artwork><![CDATA[POST /host/rsrc_uri HTTP/1.1
Content-Type: application/json
Host: as.example.com
Authorization: Bearer 204c69636b6c69
...

{  
   "resource_id":"112210f47de98100",
   "resource_scopes":[  
      "view",
      "http://photoz.example.com/dev/actions/print"
   ]
}
]]></artwork>
          </figure>

          <figure>
            <preamble>Example of an HTTP request for multiple permissions at
            the authorization server's permission endpoint, with a PAT in the
            header:</preamble>

            <artwork><![CDATA[POST /host/rsrc_uri HTTP/1.1
Content-Type: application/json
Host: as.example.com
Authorization: Bearer 204c69636b6c69
...

[  
   {  
      "resource_id":"7b727369647d",
      "scopes":[  
         "view",
         "crop",
         "lightbox"
      ]
   },
   {  
      "resource_id":"7b72736964327d",
      "scopes":[  
         "view",
         "layout",
         "print"
      ]
   },
   {  
      "resource_id":"7b72736964337d",
      "scopes":[  
         "http://www.example.com/scopes/all"
      ]
   }
]
]]></artwork>
          </figure>
        </section>

        <section anchor="ticket-management"
                 title="Permission Ticket Creation and Management">
          <t>The authorization server uses a permission ticket to maintain the
          state of a set of requested permissions, initially conveyed on the
          client's behalf by the resource server at attempted resource access
          time, for the period of time that the client continues to seek
          authorization for that attempted access.</t>

          <t>The authorization server MUST make permission ticket values
          unguessable by resource servers and clients. Within these
          constraints, however, the authorization server MAY format the ticket
          however it chooses, for example either as a random string that
          references data held on the server or by including data within the
          ticket itself.</t>

          <t>Permission tickets MUST be single-use.</t>

          <t>The authorization server MUST invalidate a permission ticket when
          the client presents the permission ticket either to the token
          endpoint or interactive claims endpoint; or when the permission
          ticket expires, whichever occurs first.</t>
        </section>

        <section title="Authorization Server Response to Resource Server on Permission Request Success">
          <t>If the authorization server is successful in creating a
          permission ticket in response to the resource server's request, it
          responds with an HTTP 201 (Created) status code and includes the
          <spanx style="verb">ticket</spanx> property in the JSON-formatted
          body.</t>

          <figure>
            <preamble>For example:</preamble>

            <artwork><![CDATA[HTTP/1.1 201 Created
Content-Type: application/json
...

{  
   "ticket":"016f84e8-f9b9-11e0-bd6f-0021cc6004de"
}
]]></artwork>
          </figure>
        </section>

        <section title="Authorization Server Response to Resource Server on Permission Request Failure">
          <t>If the resource server's permission registration request is
          authenticated properly but fails due to other reasons, the
          authorization server responds with an HTTP 400 (Bad Request) status
          code and includes one of the following UMA error codes (see <xref
          target="uma-error-response" /> for more information about error
          codes and responses):<list style="hanging">
              <t hangText="invalid_resource_id">At least one of the provided
              resource identifiers was not found at the authorization
              server.</t>

              <t hangText="invalid_scope">At least one of the scopes included
              in the request was not registered previously by this resource
              server for the referenced resource.</t>
            </list></t>
        </section>
      </section>

      <section anchor="rs-tokenless-response"
               title="Resource Server Responds to Client's Tokenless Access Attempt">
        <t>In this process, the resource server responds to the client's
        tokenless access attempt on a protected resource.</t>

        <t>This process assumes that the resource server sought a permission
        ticket from the authorization server after a tokenless access attempt
        by the client. The success path of this process corresponds to step 6
        in <xref target="protocol-flow" />.</t>

        <t>After this process, assuming the client received a permission
        ticket, its next option is defined in <xref
        target="seek-authorization" />.</t>

        <section anchor="permission-success-to-client"
                 title="Resource Server Response to Client on Permission Request Success">
          <t>If the resource server successfully obtained a permission ticket
          from the authorization server, it responds to the client by
          providing a <spanx style="verb">WWW-Authenticate</spanx> header with
          the authentication scheme <spanx style="verb">UMA</spanx>, with the
          <spanx style="verb">issuer</spanx> URI from the authorization
          server's configuration document in an <spanx
          style="verb">as_uri</spanx> parameter and the just-received
          permission ticket in a <spanx style="verb">ticket</spanx>
          parameter.</t>

          <figure>
            <preamble>For example:</preamble>

            <artwork><![CDATA[HTTP/1.1 401 Unauthorized
WWW-Authenticate: UMA realm="example",
  as_uri="https://as.example.com",
  ticket="016f84e8-f9b9-11e0-bd6f-0021cc6004de"
...
]]></artwork>
          </figure>
        </section>

        <section anchor="permission-failure-to-client"
                 title="Resource Server Response to Client on Permission Request Failure">
          <t>If the resource server received an error of any kind when trying
          to request permissions such that it did not receive a permission
          ticket, then it is unable to create a <spanx
          style="verb">WWW-Authenticate: UMA</spanx> header and includes a
          header of the following form in its response to the client: <spanx
          style="verb">Warning: 199 - "UMA Authorization Server
          Unreachable"</spanx>.</t>

          <figure>
            <preamble>For example:</preamble>

            <artwork><![CDATA[HTTP/1.1 403 Forbidden
Warning: 199 - "UMA Authorization Server Unreachable"
...
]]></artwork>
          </figure>
        </section>
      </section>

      <section anchor="seek-authorization"
               title="Client Seeks Authorization on Requesting Party's Behalf (UMA Grant)">
        <t>This section defines the extension OAuth grant called the UMA
        grant. It defines forms of the client request (corresponding to steps
        7 and 11 in <xref target="protocol-flow" />), redirect mechanisms for
        requesting party interaction (step 10), and forms of the authorization
        server response to the client request (steps 9 and 11). See <xref
        target="authz-process" /> for a visual representation of the
        authorization process. Section <xref target="uma-grant-type" />
        defines the <spanx style="verb">grant_type</spanx> URI.</t>

        <t>The overall process assumes that:<list style="symbols">
            <t>The client has obtained a permission ticket and an
            authorization server location from the resource server.</t>

            <t>The client has discovered the authorization server's
            configuration document and endpoints as needed.</t>

            <t>The client has obtained OAuth client credentials from the
            authorization server, either dynamically through <xref
            target="RFC7591" /> or <xref target="OIDCDynClientReg" />, or
            alternatively through a static process, and is prepared to
            authenticate itself to the token endpoint.</t>
          </list></t>

        <t>The client seeks the authorization server's authorization for
        access to the protected resource on the requesting party's behalf, by
        requesting an RPT at the authorization server's token endpoint and
        possibly by redirecting an end-user requesting party to the
        authorization server's claims interaction endpoint. The authorization
        process thus begun potentially includes looping through the
        authorization seeking phase, and subsequent authorization server
        responses potentially include hints as to what further requests should
        contain. See <xref target="authorization-api" /> for information about
        the authorization process and the REQUIRED authorization assessment
        process (corresponding to step 8 in <xref
        target="protocol-flow" />).</t>

        <t>The client MAY redirect an end-user requesting party for
        interactive claims gathering prior to requesting an RPT at the token
        endpoint. An initial client redirect of an end-user requesting party
        to the claims interaction endpoint assumes, in addition to the
        assumptions above, that the authorization server has statically
        declared its claims interaction endpoint in its configuration
        document.</t>

        <t>Unless the authorization server responds with an error, the
        client's next option to respond is defined in <xref
        target="client-rpt-attempt" />.</t>

        <section anchor="uma-grant-type"
                 title="Client Request to Authorization Server for RPT">
          <t>The client makes a request to the token endpoint by sending the
          following parameters using the <spanx
          style="verb">"application/x-www-form-urlencoded"</spanx> format per
          <xref target="RFC6749" /> Appendix B with a character encoding of
          UTF-8 in the HTTP request entity-body:<list style="hanging">
              <t hangText="grant_type">REQUIRED. MUST be the value <spanx
              style="verb">urn:ietf:params:oauth:grant-type:uma-ticket</spanx>.</t>

              <t hangText="ticket">REQUIRED. The permission ticket.</t>

              <t hangText="rpt">OPTIONAL. If the client included an RPT in its
              failed access attempt to the resource, it MAY include the same
              RPT here. This gives the authorization server the option of
              updating the existing RPT instead of issuing a new one (see
              <xref target="give-rpt" /> for the basic form of that
              response).</t>

              <t hangText="scope">OPTIONAL. A string of space-separated values
              representing the scopes that the client is requesting. This
              allows the client to add dynamically to any scopes already under
              consideration for authorization.</t>

              <t hangText="claim_tokens">OPTIONAL. Claims pushed directly from
              the client to the authorization server. This allows the client
              to provide information already in its possession to the
              authorization server. It MAY provide this information a first or
              subsequent request to this endpoint. See <xref
              target="claim-push" /> for the form of a client request with
              pushed claims.</t>

              <t hangText="pct">OPTIONAL. If the authorization server
              previously returned a PCT along with an RPT, the client MAY
              include the PCT in order to optimize the process of seeking a
              new RPT. Given that some claims represented by a PCT are likely
              to contain identity information about a requesting party, a
              client supplying a PCT in its RPT request MUST make a best
              effort to ensure that the requesting party using the client now
              is the same as the requesting party that was associated with the
              PCT when it was issued. See <xref target="sec-consid-pct" /> for
              additional PCT security considerations. See <xref
              target="saved-consent-token" /> for the form of the
              authorization server's response with a PCT.</t>
            </list></t>

          <figure>
            <preamble>Example of a request message containing a permission
            ticket and no optional parts:</preamble>

            <artwork><![CDATA[POST /token HTTP/1.1
Host: as.example.com
Authorization: Basic jwfLG53^sad$#f
...
grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Auma-ticket&
ticket=016f84e8-f9b9-11e0-bd6f-0021cc6004de
&rpt=sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv
]]></artwork>
          </figure>
        </section>

        <section anchor="claim-push"
                 title="Client Request to Authorization Server for RPT With Pushed Claims">
          <t>The client supplies claim tokens in the body of the request
          message by providing the <spanx style="verb">claim_tokens</spanx>
          property as follows:<list style="hanging">
              <t hangText="claim_tokens">REQUIRED. An array of objects with
              the following properties:<list style="hanging">
                  <t hangText="format">REQUIRED. A string specifying the
                  format of the accompanying claim tokens. The string MAY be a
                  URI.</t>

                  <t hangText="token">REQUIRED. A string containing the claim
                  information in the indicated format, base64url encoded if it
                  is not already so encoded. If claim token format features
                  are included that require special interpretation, the client
                  and authorization server are assumed to have a prior
                  relationship that establishes how to interpret these
                  features. For example, if the referenced format equates to
                  SAML 2.0 assertions and the claim token contains audience
                  restrictions, it is the joint responsibility of the client
                  and authorization server to determine the proper audience
                  values that enable successful token consumption (see for
                  <xref target="trust-push" /> relevant security
                  considerations).</t>
                </list></t>
            </list></t>

          <figure>
            <preamble>Example:</preamble>

            <artwork><![CDATA[POST /token HTTP/1.1
Host: www.example.com
Authorization: Bearer jwfLG53^sad$#f
...

{  
   "rpt":"sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
   "ticket":"016f84e8-f9b9-11e0-bd6f-0021cc6004de",
   "claim_tokens":[  
      {  
         "format":"http://openid.net/specs/openid-connect-core-1_0.html#HybridIDToken",
         "token":"..."
      }
   ]
}
]]></artwork>
          </figure>

          <t>This specification provides a framework for extensibility through
          claim token format profiling (see <xref target="profiles" />). The
          authorization server MAY support any number of claim token profiles,
          and SHOULD document the claim token profiles it supports in its
          configuration document.</t>
        </section>

        <section anchor="claim-redirect"
                 title="Client Redirect of Requesting Party to Authorization Server for Interactive Claims-Gathering">
          <t>The client redirects an end-user requesting party' to the claims
          interaction endpoint for whatever interactive claims-gathering
          processes the authorization server requires, such as presenting a
          questionnaire or a local or federated login form.</t>

          <t>The client constructs the request URI by adding the following
          parameters to the query component of the claims interaction endpoint
          URI using the <spanx
          style="verb">application/x-www-form-urlencoded</spanx> format:<list
              style="hanging">
              <t hangText="client_id">REQUIRED. The client's identifier issued
              by the authorization server.</t>

              <t hangText="claims_redirect_uri">OPTIONAL. The URI to which the
              client wishes the authorization server to direct the requesting
              party's user agent after completing its interaction. The URI
              MUST be absolute, MAY contain an <spanx
              style="verb">application/x-www-form-urlencoded</spanx>-formatted
              query parameter component that MUST be retained when adding
              additional parameters, and MUST NOT contain a fragment
              component. The authorization server SHOULD require all clients
              to register their redirection endpoint prior to utilizing the
              authorization endpoint (either using a static process or through
              <xref target="RFC7591" /> or <xref
              target="OIDCDynClientReg" />). Claims redirection URIs are
              different from the redirection URIs defined in <xref
              target="RFC6749" /> in that they are intended for the exclusive
              use of requesting parties and not resource owners. Therefore,
              authorization servers MUST NOT redirect requesting parties to
              pre-registered redirection URIs defined in <xref
              target="RFC6749" /> unless such URIs are also pre-registered
              specifically as claims redirection URIs. If the URI is
              pre-registered, this URI MUST exactly match one of the
              pre-registered claims redirection URIs, with the matching
              performed as described in Section 6.2.1 of <xref
              target="RFC3986" /> (Simple String Comparison).</t>

              <t hangText="ticket">REQUIRED. The latest permission ticket
              associated with the client's current request for this requesting
              party.</t>

              <t hangText="state">RECOMMENDED. An opaque value used by the
              client to maintain state between the request and callback. The
              authorization server includes this value when redirecting the
              user agent back to the client. The use of this parameter is for
              preventing cross-site request forgery.</t>
            </list></t>

          <t>See <xref target="saved-consent-token" /> for authorization
          server options for collecting authorization from the requesting
          party while gathering claims interactively. See<xref
          target="redirect-back" /> for the authorization server's mechanism
          for redirecting the requesting party back to the client.</t>

          <figure>
            <preamble>Example of a request issued by a client application
            (line breaks are shown only for display convenience):</preamble>

            <artwork><![CDATA[GET /rqp_claims?client_id=some_client_id&state=abc
&ticket=016f84e8-f9b9-11e0-bd6f-0021cc6004de
&claims_redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fredirect_claims HTTP/1.1
Host: as.example.com
]]></artwork>
          </figure>
        </section>

        <section anchor="redirect-back"
                 title="Authorization Server Redirect of Requesting Party Back to Client After Interactive Claims-Gathering">
          <t>At the conclusion of its interaction with the requesting party,
          the authorization server returns the requesting party to the client,
          adding the following parameters to the query component of the claims
          redirection URI using the <spanx
          style="verb">application/x-www-form-urlencoded</spanx> format:<list
              style="hanging">
              <t hangText="authorization_state">REQUIRED. Indicates that the
              authorization server completed its claims-gathering interaction
              with the requesting party with the indicated state:<list
                  style="hanging">
                  <t hangText="claims_submitted">The client is free to return
                  to the token endpoint to seek permissions once again.</t>

                  <t hangText="not_authorized">The client is not authorized to
                  have the desired permissions added.</t>

                  <t hangText="need_info">The authorization server needs
                  additional information in order to determine whether the
                  client is authorized to have these permissions. This
                  response directs the client to return to the token endpoint,
                  where it might be provided with <spanx
                  style="verb">error_details</spanx> hints about additional
                  information needed.</t>

                  <t hangText="request_submitted">The authorization server
                  requires intervention by the resource owner to determine
                  whether permissions can be added. Further immediate
                  interaction between the client, requesting party, and
                  authorization server is out of scope of this
                  specification.</t>
                </list></t>

              <t hangText="ticket">OPTIONAL. A permission ticket that allows
              the client to make further requests to the authorization server
              during this attempted authorization. The value of this
              permission ticket MUST NOT be the same as the one the client
              used to make its request.</t>

              <t hangText="state">OPTIONAL. The same state value that the
              client provided in the request. It MUST be present if and only
              if the client provided it.</t>
            </list></t>

          <t>Note: The purpose of the interaction is for the authorization
          server to gather information for its own authorization assessment
          purposes. This redirection does not involve sending any of the
          information back to the client.</t>

          <t>The client MUST ignore unrecognized response parameters. If the
          request fails due to a missing, invalid, or mismatching claims
          redirection URI, or if the client identifier is missing or invalid,
          the authorization server SHOULD inform the resource owner of the
          error and MUST NOT automatically redirect the user agent to the
          invalid redirection URI. If the request fails for reasons other than
          a missing or invalid claims redirection URI, the authorization
          server informs the client by adding an <spanx
          style="verb">error</spanx> parameter to the query component of the
          claims redirection URI using the <spanx
          style="verb">application/x-www-form-urlencoded</spanx> format,
          containing one of the following ASCII error codes:<list
              style="hanging">
              <t hangText="invalid_request">The request is missing a required
              parameter, includes an invalid parameter value (such as an
              invalid or expired ticket), includes a parameter more than once,
              or is otherwise malformed.</t>

              <t hangText="server_error">The authorization server encountered
              an unexpected condition that prevented it from fulfilling the
              request. (This error code is needed because an HTTP 500
              (Internal Server Error) status code cannot be returned to the
              client via an HTTP redirect.)</t>

              <t hangText="temporarily_unavailable">The authorization server
              is currently unable to handle the request due to a temporary
              overloading or maintenance of the server. (This error code is
              needed because an HTTP 503 (Service Unavailable) status code
              cannot be returned to the client via an HTTP redirect.)</t>
            </list></t>

          <figure>
            <preamble>Example of a response issued by an authorization server
            (line breaks are shown only for display convenience):</preamble>

            <artwork><![CDATA[GET /redirect_claims?&state=abc
&authorization_state=claims_submitted HTTP/1.1
Host: client.example.com
]]></artwork>
          </figure>
        </section>

        <section anchor="give-rpt"
                 title="Authorization Server Response to Client on Authorization Success">
          <t>If the authorization server's assessment process results in
          issuance of permissions (see <xref
          target="authorization-assessment" />), it returns an HTTP 200 (OK)
          status code with a response body containing the RPT with which it
          has associated the requested permissions. The authorization server
          MAY return a refresh token. The authorization server MAY return a
          PCT. If the client included an existing RPT in its request and the
          authorization server issues a new RPT, the authorization server
          SHOULD revoke the existing RPT, if possible, and the client MUST
          discard its previous RPT.</t>

          <figure>
            <preamble>Example:</preamble>

            <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
... 

{  
   "access_token":"sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
   "token_type":"Bearer"
}
]]></artwork>
          </figure>
        </section>

        <section anchor="saved-consent-token"
                 title="Authorization Server Response to Client on Authorization Success With PCT">
          <t>The authorization server MAY return a PCT along with an RPT. The
          PCT represents claims collected during this authorization process,
          either directly or through the claims interaction endpoint. The PCT
          MUST be unguessable by an attacker. The PCT MUST NOT disclose claims
          from the requesting party directly to possessors of the PCT.
          Instead, such claims SHOULD be associated by reference to the PCT or
          expressed in an encrypted format that can be decrypted only by the
          authorization server that issued the PCT. See <xref
          target="interaction-consent" /> for more information about the
          end-user requesting party interaction option. See <xref
          target="sec-consid-pct" /> for additional PCT security
          considerations.</t>

          <t>The authorization server MAY choose to persist collected claims
          and issue a PCT in order to optimize future authorization processes
          on behalf of a requesting party. It MAY also gather authorization
          from an end-user requesting party for persisting these claims, one
          option being persisting this authorization in the form of an actual
          claim itself. The authorization server MAY combine
          authorization-gathering interaction with other interactions as
          necessary, and in any order. For example, the authorization server
          might present an opportunity for the requesting party to create or
          manage a login account for more persistent storage of gathered and
          pushed claims over time.</t>

          <t>The PCT MAY be included by the client in future requests to the
          token endpoint using the UMA grant type (see <xref
          target="uma-grant-type" />).</t>

          <figure>
            <preamble>Example:</preamble>

            <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
...

{  
   "access_token":"sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
   "token_type":"Bearer",
   "pct":"c2F2ZWRjb25zZW50"
}
]]></artwork>
          </figure>
        </section>

        <section anchor="authorization-failure"
                 title="Authorization Server Response to Client on Authorization Failure">
          <t>If the client's request to the token endpoint is not sufficient
          for granting an RPT, the authorization server responds using one of
          the following UMA error codes and corresponding HTTP status codes
          (see <xref target="uma-error-response" /> for more information about
          error codes and responses):<list style="hanging">
              <t hangText="invalid_ticket">The provided ticket was not found
              at the authorization server. The authorization server responds
              with the HTTP 400 (Bad Request) status code.</t>

              <t hangText="expired_ticket">The provided ticket has expired.
              The authorization server responds with the HTTP 400 (Bad
              Request) status code.</t>

              <t hangText="not_authorized">The client is not authorized to
              have these permissions added. The authorization server responds
              with the HTTP 403 (Forbidden) status code.</t>

              <t hangText="invalid_scope">At least one of the scopes included
              in the request does not match an available scope for any of the
              resources associated with requested permissions for the
              permission ticket provided by the client. The authorization
              server responds with the HTTP 400 (Bad Request) status code.</t>

              <t hangText="request_submitted">The authorization server
              requires intervention by the resource owner to determine whether
              the client is authorized to have these permissions. The
              authorization server responds with the HTTP 403 (Forbidden)
              status code.</t>

              <t hangText="need_info">The authorization server needs
              additional information in order to determine whether the client
              is authorized to have these permissions. The authorization
              server responds with the HTTP 403 (Forbidden) status code. It
              MAY also respond with an <spanx
              style="verb">error_details</spanx> object that contains one or
              more sub-properties with hints about the nature of further
              required information.</t>
            </list></t>

          <t>The first five error responses end the current authorization
          process; the client is free to attempt access to the protected
          resource another time. The sixth error response, <spanx
          style="verb">need_info</spanx>, begins or continues an authorization
          process loop that concludes only when the client receives one of the
          other five errors or a success condition (as described in <xref
          target="give-rpt" />).</t>

          <figure>
            <preamble>Example when the ticket has expired:</preamble>

            <artwork><![CDATA[HTTP/1.1 400 Bad Request
Content-Type: application/json
Cache-Control: no-store
...

{  
   "error":"expired_ticket"
}
]]></artwork>
          </figure>

          <figure>
            <preamble>Example of a <spanx style="verb">need_info</spanx>
            response with a full set of <spanx
            style="verb">error_details</spanx> hints:</preamble>

            <artwork><![CDATA[HTTP/1.1 403 Forbidden
Content-Type: application/json
Cache-Control: no-store
...

{  
   "error":"need_info",
   "error_details":{  
      "required_claims":[  
         {  
            "name":"email23423453ou453",
            "friendly_name":"email",
            "claim_type":"urn:oid:0.9.2342.19200300.100.1.3",
            "claim_token_format":[  
               "http://openid.net/specs/openid-connect-core-1_0.html#HybridIDToken"
            ],
            "issuer":[  
               "https://example.com/idp"
            ]
         }
      ],
      "redirect_user":"https://as.example.com/rqp_claims_uri?id=2346576421"
   }
}
]]></artwork>
          </figure>

          <t>The <spanx style="verb">error_details</spanx> object is OPTIONAL
          for the authorization server to provide. It provides hints about
          additional requirements regarding information the authorization
          server needs about the requesting party. On receiving such hints,
          the client has the opportunity to engage, or engage the requesting
          party, with the authorization server in claims collection flows of
          various types. The <spanx style="verb">error_details</spanx>
          sub-property MAY contain the following parameters, where at least
          one of <spanx style="verb">required_claims</spanx> or <spanx
          style="verb">redirect_user</spanx> MUST be supplied.<list
              style="hanging">
              <t hangText="required_claims">An array containing objects that
              describe characteristics of the required claims, with the
              following properties:<list style="hanging">
                  <t hangText="name">OPTIONAL. A string (which MAY be a URI)
                  representing the name of the claim; the "key" in a key-value
                  pair.</t>

                  <t hangText="friendly_name">OPTIONAL. A string that provides
                  a more human-readable form of the attribute's name, which
                  may be useful as a "display name" for use in user interfaces
                  in cases where the actual name is complex or opaque, such as
                  an OID or a UUID.</t>

                  <t hangText="claim_type">OPTIONAL. A string, indicating the
                  expected interpretation of the provided claim value. The
                  string MAY be a URI.</t>

                  <t hangText="claim_token_format">OPTIONAL. An array of
                  strings specifying a set of acceptable formats for a token
                  pushed by the client containing this claim (see <xref
                  target="claim-push" />). Any one of the referenced formats
                  would satisfy the authorization server's requirements. Each
                  string MAY be a URI.</t>

                  <t hangText="issuer">OPTIONAL. An array of strings
                  specifying a set of acceptable issuing authorities for the
                  claim. Any one of the referenced authorities would satisfy
                  the authorization server's requirements. Each string MAY be
                  a URI.</t>
                </list></t>

              <t hangText="redirect_user">OPTIONAL. The claims interaction
              endpoint URI to which to redirect the end-user requesting party
              at the authorization server to continue the process of
              interactive claims gathering. For example, the authorization
              server may require the requesting party to fill out a CAPTCHA to
              help prove humanness. If the requesting party is not an
              end-user, then no client action would be possible on receiving
              the hint. If a static claims interaction endpoint was also
              provided in the authorization server's configuration document,
              then this value overrides the static value. Providing a value in
              this response might be appropriate, for example, if the URI
              needs to be customized per requesting party.</t>

              <t hangText="ticket">A permission ticket that allows the client
              to make further requests to the authorization server during this
              attempted authorization. The value of this permission ticket
              MUST NOT be the same as the one the client used to make its
              request.</t>
            </list></t>
        </section>
      </section>

      <section anchor="client-rpt-attempt"
               title="Client Attempts Access to Protected Resource With RPT">
        <t>In this process, the client attempts to access the protected
        resource, now in possession of an RPT.</t>

        <t>This process assumes that the client has completed an authorization
        process. This process corresponds to step 12 in <xref
        target="protocol-flow" />.</t>

        <t>After the client attempts access, the resource server's next option
        to act is defined in <xref target="check-rpt-status" />, and its next
        option to respond to the client is defined in <xref
        target="rs-rpt-response" />.</t>

        <figure>
          <preamble>Example of a client request at a protected resource
          carrying an RPT:</preamble>

          <artwork><![CDATA[GET /users/alice/album/photo.jpg HTTP/1.1
Authorization: Bearer vF9dft4qmT
Host: photoz.example.com
...
]]></artwork>
        </figure>
      </section>

      <section anchor="check-rpt-status"
               title="Resource Server Determines RPT Status">
        <t>In this process, the resource server determines the status of the
        RPT brought to it by the client in an access attempt.</t>

        <t>This process assumes that the client's access attempt bore an RPT.
        One version of this process corresponds to steps 14-15 in <xref
        target="protocol-flow" />.</t>

        <t>The resource server determines whether the RPT is active and, if
        so, its associated permissions. Depending on the nature of the RPT and
        operative caching parameters, the resource server MAY take any of the
        following actions as appropriate to determine the RPT's status:<list
            style="symbols">
            <t>Validate the RPT locally if it is self-contained.</t>

            <t>Introspect the RPT at the authorization server using the OAuth
            token introspection endpoint (defined by <xref target="RFC7662" />
            and this section) that is part of the protection API. The
            authorization server's response contains an extended version of
            the OAuth introspection object. A number of security
            considerations around handling and interpreting the RPT can be
            found throughout <xref
            target="getting-authz-accessing-resource" />, and in <xref
            target="sec-consid" />.</t>

            <t>Use a cached copy of the token introspection response if
            allowed (see Section 4 of <xref target="RFC7662" />).</t>
          </list></t>

        <t>After determining the RPT status, the resource server's next option
        to respond is defined in <xref target="rs-rpt-response" />.</t>

        <section anchor="token-introspection"
                 title="Resource Server Request to Token Introspection Endpoint">
          <t>The resource server's request for introspection of an RPT MUST
          use the OAuth token introspection endpoint (defined by <xref
          target="RFC7662" />) declared by the authorization server in its
          configuration document. The authorization server MUST require
          requests to this endpoint to be accompanied by a PAT. The PAT
          provides resource-owner context to the authorization server as well
          as demonstrating authorized access.</t>

          <t>Note: The act of using the token introspection endpoint may
          require the resource server to interpret which authorization server
          to consult and in the context of which resource owner, in order to
          select which PAT to use to make the API call.</t>

          <figure>
            <preamble>Example of the resource server's request to the
            authorization server for introspection of an RPT, with a PAT in
            the header:</preamble>

            <artwork><![CDATA[POST /rs/status_uri HTTP/1.1
Host: as.example.com
Authorization: Bearer 204c69636b6c69
...
token=sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv
}
]]></artwork>
          </figure>
        </section>

        <section anchor="uma-bearer-token-profile"
                 title="Authorization Server Response to Resource Server on Token Introspection Success">
          <t>The authorization server's response to the resource server MUST
          use <xref target="RFC7662" />, responding with a JSON object with
          the structure dictated by that specification, extended as
          follows.</t>

          <t>If the <spanx style="verb">active</spanx> property has a Boolean
          value of <spanx style="verb">true</spanx>, then the introspection
          object MUST NOT contain a <spanx style="verb">scope</spanx> claim,
          and SHOULD contain an extension property with the name <spanx
          style="verb">permissions</spanx> that contains an array of one or
          more values, each of which is an object consisting of these
          properties:<list style="hanging">
              <t hangText="resource_id">REQUIRED. A string that uniquely
              identifies the protected resource, access to which has been
              granted to this client on behalf of this requesting party. The
              identifier MUST correspond to a resource that was previously
              registered as protected.</t>

              <t hangText="resource_scopes">REQUIRED. An array referencing one
              or more strings representing scopes to which access was granted
              for this resource. Each string MUST correspond to a scope that
              was registered by this resource server for the referenced
              resource.</t>

              <t hangText="exp">OPTIONAL. Integer timestamp, measured in the
              number of seconds since January 1 1970 UTC, indicating when this
              permission will expire. If the property is absent, the
              permission does not expire. If the token-level <spanx
              style="verb">exp</spanx> value pre-dates a permission-level
              <spanx style="verb">exp</spanx> value, the former overrides the
              latter.</t>

              <t hangText="iat">OPTIONAL. Integer timestamp, measured in the
              number of seconds since January 1 1970 UTC, indicating when this
              permission was originally issued. If the token-level <spanx
              style="verb">iat</spanx> value post-dates a permission-level
              <spanx style="verb">iat</spanx> value, the former overrides the
              latter.</t>

              <t hangText="nbf">OPTIONAL. Integer timestamp, measured in the
              number of seconds since January 1 1970 UTC, indicating the time
              before which this permission is not valid. If the token-level
              <spanx style="verb">nbf</spanx> value post-dates a
              permission-level <spanx style="verb">nbf</spanx> value, the
              former overrides the latter.</t>
            </list></t>

          <t>For interoperability, if the introspection object does not
          contain the <spanx style="verb">permissions</spanx> property, then
          an UMA extension SHOULD be defined as appropriate, with supporting
          authorization servers using the <spanx
          style="verb">uma_profiles_supported</spanx> configuration property
          to advertise their support of any alternative structures (see <xref
          target="profiles" /> for more information).</t>

          <figure>
            <preamble>Example of a response containing the introspection
            object with the <spanx style="verb">permissions</spanx>
            property:</preamble>

            <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store
...

{  
   "active":true,
   "exp":1256953732,
   "iat":1256912345,
   "permissions":[  
      {  
         "resource_id":"112210f47de98100",
         "resource_scopes":[  
            "view",
            "http://photoz.example.com/dev/actions/print"
         ],
         "exp":1256953732
      }
   ]
}
]]></artwork>
          </figure>
        </section>
      </section>

      <section anchor="rs-rpt-response"
               title="Resource Server Responds to Client&rsquo;s Access Attempt With RPT">
        <t>In this process, the resource server responds to the client's
        access attempt on a protected resource that bore an RPT.</t>

        <t>This process assumes that the resource server has determined the
        status of the RPT. The success path of this process corresponds to
        steps 16-17 in <xref target="protocol-flow" />.</t>

        <t>The first part of this process is an internal assessment. The
        second is a response to the client.</t>

        <t>This process concludes UMA's protocol flow.</t>

        <section title="Permissions Assessment">
          <t>The resource server assesses the permissions associated with the
          RPT, whether obtained through token introspection or otherwise, and
          compares them with the RPT-accompanied client's access attempt to a
          protected resource.</t>

          <t>Note: The act of assessment may require the resource server to
          interpret which resource, resource owner, authorization server, and
          scope to map to the client's access attempt.</t>

          <t>The purpose of this assessment is to determine sufficiency of
          authorization. The resource server MAY apply additional
          authorization controls when determining how to respond. For example,
          if the resource owner's policy conditions at the authorization
          server have led to issuance of an RPT with sufficient permissions
          for a particular case, the resource server deployer can choose to
          bar access to certain additional requesting parties.</t>

          <t>To ensure the integrity of the ecosystem in which the resource
          server, authorization server, and resource owner are participating,
          it is RECOMMENDED for the parties to establish agreements about
          access rules on a legal or contractual level. See <xref
          target="trust-considerations" /> for more information.</t>

          <t>The resource server MUST NOT give access in the case of an
          invalid RPT or an RPT associated with insufficient
          authorization.</t>
        </section>

        <section anchor="give-access"
                 title="Resource Server Response to Client on Sufficiency of Authorization">
          <t>The client's presentation of a valid RPT associated with
          sufficient permissions indicates that the policy conditions have
          been met for access to the protected resource.</t>

          <figure>
            <preamble>Example of the resource server's response to the client
            on sufficiency of authorization:</preamble>

            <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
...

{  
   "f_number":"f/5.6",
   "exposure":"1/320",
   "focal_length_mm":150,
   "iso":400,
   "flash":false
}
]]></artwork>
          </figure>
        </section>

        <section title="Resource Server Response to Client on Insufficiency of Authorization">
          <t>The client's presentation of an invalid RPT or an RPT associated
          with insufficient permissions for access indicates that the policy
          conditions have not been met for access to the protected
          resource.</t>

          <t>In this case, the resource server's next option to act is defined
          in <xref target="register-permission" /> (requesting permissions,
          which involves the authorization server), and its next option to
          respond to the client is defined in <xref
          target="rs-tokenless-response" />, exactly as if the client had
          attempted to access the protected resource with no RPT. Because the
          resource server is responsible for its own resource semantics and
          structure, it may need to map the client's access attempt to a
          suitable resource identifier (and thus resource owner and
          authorization server) before proceeding.</t>
        </section>
      </section>
    </section>

    <section anchor="errors" title="Error Messages">
      <t>Both OAuth and UMA errors can occur.</t>

      <section anchor="oauth-error-response" title="OAuth Error Responses">
        <t>As described in <xref target="protection-api" />, the protection
        API requires a PAT for access. PATs are simply OAuth access tokens
        with appropriate scope. If a request to an endpoint in this API fails
        due to an invalid, missing, or expired access token, or requires
        higher privileges at this endpoint than provided by the token
        supplied, the authorization server responds with an OAuth error.</t>
      </section>

      <section anchor="uma-error-response" title="UMA Error Responses">
        <t>If a request triggers no OAuth error, but is invalid for another
        reason as defined throughout this specification, the authorization
        server or resource server responds with an UMA error, sometimes along
        with a specified HTTP status code, by supplying the following
        properties in a JSON-encoded object in the body of the HTTP response:
        <list style="hanging">
            <t hangText="error">REQUIRED. A single error code. Values for this
            property are defined throughout this specification.</t>

            <t hangText="error_description">OPTIONAL. Human-readable text
            providing additional information.</t>

            <t hangText="error_uri">OPTIONAL. A URI identifying a
            human-readable web page with information about the error.</t>
          </list></t>

        <t>The following is a common error code that applies to several
        UMA-specified request messages: <list style="hanging">
            <t hangText="invalid_request">The request is missing a required
            parameter, includes an invalid parameter value, includes a
            parameter more than once, or is otherwise malformed. The
            authorization server MUST respond with the HTTP 400 (Bad Request)
            status code.</t>
          </list></t>

        <figure>
          <preamble>For example:</preamble>

          <artwork><![CDATA[HTTP/1.1 400 Bad Request
Content-Type: application/json
Cache-Control: no-store
...

{  
   "error":"invalid_request",
   "error_description":"Request is missing a required parameter.",
   "error_uri":"https://as.example.com/errors/bad_uma_request"
}
]]></artwork>
        </figure>
      </section>
    </section>

    <section anchor="comms-profiles" title="Profiles for API Extensibility">
      <t>In some circumstances, it may be desirable to couple UMA software
      entity roles tightly. For example, an authorization server application
      might also need to act as a client application in order to retrieve
      protected resources so that it can present to resource owners a
      dashboard-like user interface that accurately guides the setting of
      policy; it might need to access itself-as-authorization server for that
      purpose. For another example, the same organization might operate both
      an authorization server and a resource server that communicate only with
      each other behind a firewall, and it might seek more efficient
      communication methods between them.</t>

      <t>In other circumstances, it may be desirable to bind UMA flows to
      transport mechanisms other than HTTP even if entities remain loosely
      coupled. For example, in Internet of Things scenarios, Constrained
      Application Protocol (CoAP) may be preferred over HTTP.</t>

      <t>This section defines profiles that allow inter-role communications
      channels and methods to vary in these circumstances. This specification
      still REQUIRES authorization servers to issue PATs, and RPTs and
      associate permissions with RPTs, and REQUIRES resource servers not to
      give access in the case of an invalid RPT or an RPT associated with
      insufficient authorization. This is because, although tokens might not
      always appear on the wire in the normal fashion, the tokens may
      represent sets of expected behaviors of additional parties unable to
      take part in these optimization opportunities.</t>

      <t>Where alternate communications channels are being used between
      independently implemented system entities, it is RECOMMENDED, for
      reasons of implementation interoperability, to define concrete extension
      profiles that build on these extensibility profiles (see <xref
      target="uma-profiles" />).</t>

      <section anchor="alt-prot-profile"
               title="Protection API Extensibility Profile">
        <t>This section defines a profile for UMA where the authorization
        server and resource server roles either reside in the same system
        entity or otherwise have a privileged or specialized communications
        channel between them. Following is a summary:<list style="symbols">
            <t>Identifying URI:
            https://docs.kantarainitiative.org/uma/profiles/prot-ext-1.0</t>

            <t>Profile author and contact information: Mark Dobrinic
            (mdobrinic@cozmanova.com)</t>

            <t>Updates or obsoletes: None; this profile is new.</t>

            <t>Security considerations: See below.</t>

            <t>Privacy considerations: See below.</t>

            <t>Error states: None additional.</t>
          </list></t>

        <t>Using this profile, the resource server MAY use means other than
        the HTTP-based protection API that is protected by TLS and OAuth (or
        an OAuth-based authentication protocol) to communicate with the
        authorization server in all respects, including using software
        interfaces and methods rather than network interfaces and APIs. The
        authorization server MUST still issue PATs and RPTs and associate
        permissions with RPTs, and the resource server still MUST NOT give
        clients access in the case of invalid RPTs or RPTs that are associated
        with insufficient permissions. Interactions with entities other than
        the authorization server or resource server MUST be preserved exactly
        as they would have if either of them were using standardized UMA APIs,
        unless other extensibility profiles are also in use.</t>

        <t>An authorization server using any of the opportunities afforded by
        this profile MUST declare use of this profile by supplying its
        identifying URI for one of its <spanx
        style="verb">uma_profiles_supported</spanx> values in its
        configuration document (see <xref target="am-endpoints" />).</t>

        <t>Same-entity communication or a tight integration of entities has
        the opportunity to make deployments more secure by reducing possible
        attack vectors. However, if the entities do not use TLS but
        communicate across a transport layer, it is RECOMMENDED to use an
        alternate means of transport-layer security, for example, using DTLS
        in the case of a CoAP-based UMA profile.</t>

        <t>Same-entity communication or a tight integration of entities has
        the potential to compromise privacy by promoting the freer exchange of
        personal information within a deployment ecosystem. It is RECOMMENDED
        to account for privacy impacts in each deployment scenario.</t>
      </section>

      <section anchor="alt-authz-profile"
               title="Authorization API Extensibility Profile">
        <t>This section defines a profile for UMA where the authorization
        server and client roles either reside in the same system entity or
        otherwise have a privileged or specialized communications channel
        between them. Following is a summary:<list style="symbols">
            <t>Identifying URI:
            https://docs.kantarainitiative.org/uma/profiles/authz-ext-1.0</t>

            <t>Profile author and contact information: Mark Dobrinic
            (mdobrinic@cozmanova.com)</t>

            <t>Updates or obsoletes: None; this profile is new.</t>

            <t>Security considerations: See below.</t>

            <t>Privacy considerations: See below.</t>

            <t>Error states: None additional.</t>
          </list></t>

        <t>Using this profile, the client MAY use means other than the
        HTTP-based authorization API that is protected by TLS and OAuth (or an
        OAuth-based authentication protocol) to communicate with the
        authorization server in all respects, including using software
        interfaces and methods rather than network interfaces and APIs. The
        authorization server MUST still issue PATs and RPTs and associate
        permissions with RPTs, and the resource server still MUST NOT give
        clients access in the case of invalid RPTs or RPTs that are associated
        with insufficient permissions. Interactions with entities other than
        the authorization server or client MUST be preserved exactly as they
        would have if either of them were using standardized UMA APIs, unless
        other extensibility profiles are also in use.</t>

        <t>An authorization server using any of the opportunities afforded by
        this profile MUST declare use of this profile by supplying its
        identifying URI for one of its <spanx
        style="verb">uma_profiles_supported</spanx> values in its
        configuration document (see <xref target="am-endpoints" />).</t>

        <t>Same-entity communication or a tight integration of entities has
        the opportunity to make deployments more secure by reducing possible
        attack vectors. However, if the entities do not use TLS but
        communicate across a transport layer, it is RECOMMENDED to use an
        alternate means of transport-layer security, for example, using DTLS
        in the case of a CoAP-based UMA profile.</t>

        <t>Same-entity communication or a tight integration of entities has
        the potential to compromise privacy by promoting the freer exchange of
        personal information within a deployment ecosystem. It is RECOMMENDED
        to account for privacy impacts in each deployment scenario.</t>
      </section>

      <section anchor="alt-resource-profile"
               title="Resource Interface Extensibility Profile">
        <t>This section defines a profile for UMA where the resource server
        and client roles either reside in the same system entity or otherwise
        have a privileged or specialized communications channel between them.
        Following is a summary:<list style="symbols">
            <t>Identifying URI:
            https://docs.kantarainitiative.org/uma/profiles/rsrc-ext-1.0</t>

            <t>Profile author and contact information: Mark Dobrinic
            (mdobrinic@cozmanova.com)</t>

            <t>Updates or obsoletes: None; this profile is new.</t>

            <t>Security considerations: See below.</t>

            <t>Privacy considerations: See below.</t>

            <t>Error states: None additional.</t>
          </list></t>

        <t>Using this profile, the resource server MAY use means other than an
        HTTP-based resource interface to communicate with the authorization
        server in all respects, including using software interfaces and
        methods rather than network interfaces and APIs. The resource server
        still MUST NOT give clients access in the case of invalid RPTs or RPTs
        that are associated with insufficient permissions. Interactions with
        entities other than the resource server or client MUST be preserved
        exactly as they would have if either of them were using standardized
        UMA APIs, unless other extensibility profiles are also in use.</t>

        <t>An authorization server involved in deployments where resource
        servers and clients are known to be using opportunities afforded by
        the resource interface extensibility profile MAY declare use of this
        profile by supplying its identifying URI for one of its <spanx
        style="verb">uma_profiles_supported</spanx> values in its
        configuration document (see <xref target="am-endpoints" />).</t>

        <t>Same-entity communication or a tight integration of entities has
        the opportunity to make deployments more secure by reducing possible
        attack vectors. However, if the entities do not use TLS but
        communicate across a transport layer, it is RECOMMENDED to use an
        alternate means of transport-layer security, for example, using DTLS
        in the case of a CoAP-based UMA profile.</t>

        <t>Same-entity communication or a tight integration of entities has
        the potential to compromise privacy by promoting the freer exchange of
        personal information within a deployment ecosystem. It is RECOMMENDED
        to account for privacy impacts in each deployment scenario.</t>
      </section>
    </section>

    <section anchor="profiles"
             title="Specifying Additional Profiles and Extensions">
      <t>This specification defines a protocol that has a variety of optional
      features. For implementation interoperability and to serve particular
      deployment scenarios, including sector-specific ones such as healthcare
      or e-government, third parties may want to define profiles of UMA that
      restrict these options.</t>

      <t>Further, this specification builds in specific extensibility points
      so that third parties can define profiles of companion technologies to
      fit interoperably within the UMA framework. For example, third parties
      can define claim token profiles (see <xref target="claim-push" />) using
      whatever identity assertion or claim token technology is appropriate for
      their ecosystems. Third parties can also build on the API extensibility
      profiles (see <xref target="comms-profiles" />) to define their own "API
      extension profiles".</t>

      <t>Finally, this specification uses the natural extensibility within its
      messaging formats, <spanx
      style="verb">"application/x-www-form-urlencoded"</spanx> and JSON, to
      enable third parties to define extensions that serve adjacent use cases.
      For example, if necessary, it is possible to substitute a different
      token introspection object structure to change the dividing line between
      authorization server and resource server responsibilities in controlling
      access.</t>

      <t>It is not practical for this specification to standardize all such
      variations of UMA. However, to serve overall interoperability goals,
      this section provides guidelines for third parties that wish to specify
      UMA-related profiles and extensions.</t>

      <t>It is RECOMMENDED that authorization server deployers document any
      profiled or extended features explicitly (see <xref
      target="am-endpoints" /> for details).</t>

      <t>In all cases, it is RECOMMENDED that profiles and extensions document
      the following information:<list style="symbols">
          <t>Specify a uniquely identifying URI.</t>

          <t>Identify the responsible author and provide postal or electronic
          contact information.</t>

          <t>Supply references to any previous version that this version
          updates or obsoletes.</t>

          <t>Define any additional or changed error states, including, for for
          claim token profiles, whether <spanx
          style="verb">error_details</spanx> hints are modified.</t>

          <t>Specify any modified or new interactions between endpoint
          entities involved in the profile and any extension properties used
          in messages.</t>

          <t>For any new access token types, specify the keyword to be used in
          HTTP Authorization headers.</t>

          <t>Specify any conformance and interoperability considerations.</t>

          <t>Specify any security and privacy considerations additional to
          <xref target="sec-consid" /> and <xref target="priv-consid" />.</t>
        </list></t>
    </section>

    <section anchor="sec-consid" title="Security Considerations">
      <t>This specification relies mainly on OAuth 2.0 security mechanisms as
      well as transport-level encryption. Thus, implementers are strongly
      advised to read <xref target="BCP195" /> and the security considerations
      in <xref target="RFC6749" /> (Section 10) and <xref target="RFC6750" />
      (Section 5) along with the security considerations of any other OAuth
      token-defining specifications in use, along with the entire <xref
      target="RFC6819" /> specification, and apply the countermeasures
      described therein. As well, implementers should take into account the
      security considerations in all other normatively referenced
      specifications.</t>

      <t>The following sections describe additional security
      considerations.</t>

      <section anchor="rqp-threats" title="Requesting Party Threats">
        <t>This section discusses threats related to UMA's nature as a
        protocol enabling party-to-party sharing of protected resource access;
        that is, enabling requesting parties who are not the resource owner to
        gain authorized access to protected resources.</t>

        <t>For privacy considerations related to requesting parties, see <xref
        target="rqp-privacy" />.</t>

        <section anchor="redirect-threats"
                 title="Requesting Party Redirection and Impersonation">
          <t>Like ordinary OAuth redirection, UMA redirection for the purpose
          of gathering claims from an end-user requesting party (described in
          <xref target="claim-redirect" />) creates the potential for
          cross-site request forgery (CSRF) through an open redirect if the
          authorization server does not force the client to pre-register its
          claims redirection endpoint, and server-side artifact tampering if
          the client does not avail itself of the state parameter. The client
          SHOULD check that the ticket value returned by an authorization
          server after a claims redirect is completed has not been maliciously
          changed, for example by a man in the browser, by using the state
          parameter. (See <xref target="UMA-Impl" /> for advice on ways to
          accomplish this.) Sections 4.4.1.8, 4.4.2.5, and 5.3.5 of <xref
          target="RFC6819" /> are apropos for the UMA claims-gathering
          redirection flow as well.</t>

          <t>When a client redirects an end-user requesting party to the
          claims interaction endpoint, the client provides no a priori context
          to the authorization server about which user is appearing at the
          endpoint, other than implicitly through the permission ticket. Since
          the authorization server is free to gather any claims it wishes, the
          effect is to "late-bind" them to the permission ticket and the state
          string provided by the client, with the effect of enabling the
          authorization server not to trust client-asserted claims. This is a
          desirable result and reflects one reason why the authorization
          server might choose to demand use of the redirect flow over the push
          flow. However, the client has the opportunity to switch end-users --
          say, enabling malicious end-user Carlos to impersonate the original
          end-user Bob, who might be represented by a PCT already in that
          client's possession and might even have authorized the issuance of
          that PCT -- after the redirect completes and before it returns to
          the token endpoint to seek permissions.</t>

          <t>Another issue concerns the exposure of an RPT to a requesting
          party, which could maliciously pass the token to an unauthorized
          party.</t>

          <t>To mitigate requesting-party switching and RPT exposure threats,
          consider the following strategies.<list style="symbols">
              <t>Require that the requesting party legitimately represent the
              wielder of the bearer token on a legal or contractual level.
              This solution does not reduce the risk from a technical
              perspective.</t>

              <t>The authorization server, possibly with input from the
              resource owner, can implement tighter time-to-live strategies
              around the permissions in RPTs. This is a classic approach with
              bearer tokens that helps to limit a malicious party's ability to
              intercept and use the bearer token. In the same vein, the
              authorization server could require claims to have a reasonable
              degree of freshness (which would require a custom claims
              profile).</t>

              <t>A stronger strategy is to gather claims interactively from an
              end-user requesting party that demonstrate that some
              sufficiently strong level authentication was performed.</t>

              <t>The strongest strategy is to disallow <spanx
              style="verb">Bearer</spanx>-type RPTs within the UMA profile
              being deployed, by providing or requiring an RPT profile that
              requires use of a holder-of-key approach. In this way, the
              wielder of the token must engage in a live session for
              proof-of-possession.</t>
            </list></t>
        </section>

        <section anchor="sec-consid-pct"
                 title="Requesting Party Claims and Persisted Claims Tokens">
          <t>A PCT is similar to a refresh token in that it carries extra
          power over the usage of an RPT. The authorization server and client
          MUST keep PCTs confidential in transit and storage, and MUST NOT
          share any PCT with any other entity other than the issuer or issued
          client, respectively. The authorization server MUST maintain the
          binding between a PCT and the client to which it was issued.</t>

          <t>Given that a PCT represents a set of requesting party claims, a
          client supplying a PCT in its RPT request MUST make a best effort to
          ensure that the requesting party using the client now is the same as
          the requesting party that was associated with the PCT when it was
          issued. Different clients will have different capabilities in this
          respect; for example, some applications are single-user and perform
          no local authentication, associating all PCTs with the "current
          user", while others might have more sophisticated authentication and
          user mapping capabilities.</t>
        </section>
      </section>

      <section anchor="sec-consid-oauth-oidc"
               title="OAuth- and OpenID Connect-Related Security Considerations">
        <t>This section discusses security considerations related to UMA's use
        of OAuth and OpenID Connect.</t>

        <section title="Strengthening Client Authentication Using OpenID Connect">
          <t>Along with requiring TLS, UMA requires OAuth, or any OAuth-based
          authentication protocol, as the security mechanism for its
          protection API. The resource server thus acts in the role of an
          OAuth client at the authorization server's protection API. While it
          is possible to use any profile of OAuth for this protection, it is
          RECOMMENDED for the authorization server to use OpenID Connect, and
          to use its mechanisms for stronger client authentication at the
          token endpoint, in order to strengthen the authentication of OAuth
          clients. Section 16 of <xref target="OIDCCore" /> provides more
          information on OpenID Connect security considerations.</t>
        </section>

        <section title="Interacting with Resource Owners and Requesting Parties Using OAuth's Implicit Grant Type">
          <t>Clients using the OAuth implicit grant type carry particular
          vulnerabilities in OAuth, and using OpenID Connect is of no help in
          this circumstance. This is true where a resource server is used as
          an OAuth client for obtaining a PAT on a resource owner's behalf,
          and also where an authorization server is gathering claims from a
          requesting party through OAuth.</t>

          <t>For example, an "implicit client" might require the retrieval of
          PATs more frequently, for each browser on each platform. An attacker
          can initiate a spear phishing attack on the resource owner with a
          link to a malicious website, relying on the resource owner to
          authenticate to the authorization server through an email-based
          identity provider in order to receive the PAT. The site can
          impersonate the resource owner using the browser client's client ID
          in an OpenID Connect implicit request to the authorization server.
          If the resource owner had previously authorized a PAT to be issued,
          this attempt will likely succeed. The subsequently issued PAT could
          be used for resource registration and other protection API
          tasks.</t>

          <t>A number of mitigation strategies are possible.<list
              style="symbols">
              <t>The authorization server could penalize or disallow use of
              the implicit grant flow. This could be done at a variety of
              levels:<list style="symbols">
                  <t>Enabling resource owners to define policies controlling
                  the use of such clients</t>

                  <t>Setting system-default policies controlling their use</t>

                  <t>Participating in mutual agreements with other parties,
                  for example, through the definition and mandated use of
                  profiles, that admit only suitably secure client
                  applications to interact with service operators</t>
                </list></t>

              <t>The authorization server could support dynamic client
              registration at the client instance level, such that each
              instance receives a unique client_id and secret. The client can
              then use the authorization code flow and have at least some form
              of client authentication. However, this is easier for a mobile
              app than for a browser-based HTML app.</t>
            </list></t>
        </section>
      </section>

      <section anchor="cred-guessing" title="Credentials-Guessing">
        <t>The authorization server MUST prevent attackers from guessing
        permission tickets and PCTs.</t>
      </section>

      <section title="JSON Usage">
        <t>This specification defines a number of data formats based on <xref
        target="RFC7159" />. As a subset of the JavaScript scripting language,
        JSON data SHOULD be consumed through a process that does not
        dynamically execute it as code, to avoid malicious code execution. One
        way to achieve this is to use a JSON parser rather than the built-in
        JavaScript eval() function.</t>
      </section>

      <section anchor="trust-considerations"
               title="Profiles and Trust Establishment">
        <t>Parties that are operating and using UMA software entities have
        opportunities to establish agreements about the parties' rights and
        responsibilities on a legal or contractual level, along with common
        interpretations of UMA constructs for consistent and expected software
        behavior. These agreements can be used to improve the parties'
        respective security postures, and written profiles are a key mechanism
        for conveying and enforcing these agreements. <xref
        target="profiles" /> discusses profiling. <xref
        target="comms-profiles" /> discusses profiling for extensibility.
        Finally, see <xref target="UMA-legal" /> to learn about tools to
        assist in the legal and contractual elements of deploying UMA-enabled
        services.</t>

        <section anchor="trust-push"
                 title="Requirements for Trust When Clients Push Claim Tokens">
          <t>This section discusses the threats surrounding client claim
          pushing (see <xref target="claim-push" />).</t>

          <t>Because claim tokens of any format typically contain audience
          restrictions and an authorization server would typically not be in
          the primary audience for a claim token held or generated by a
          client, it is RECOMMENDED to document how the client, authorization
          server, and any additional ecosystem entities and parties will
          establish a trust relationship and communicate any required keying
          material in a claim token format profile, as described in <xref
          target="profiles" /> and <xref target="claim-profiles" />.
          Authorization servers are RECOMMENDED not to accept claim tokens
          pushed by untrusted clients and not to ignore audience restrictions
          found in claim tokens pushed by clients.</t>

          <t>In the special circumstance when an authorization server is
          colocated with an OpenID Provider for the requesting parties within
          a deployment ecosystem, then it is able to act as an OpenID Relying
          Party for itself. This circumstance presents an opportunity for a
          technical optimization of the requirement for trust because the
          authorization server itself issued the OAuth client credentials for
          the client in question, and could reasonably be the singular <spanx
          style="verb">aud</spanx> value target in an OpenID Connect ID Token
          pushed by the client to the token endpoint.</t>
        </section>
      </section>
    </section>

    <section anchor="priv-consid" title="Privacy Considerations">
      <t>UMA has the following privacy considerations.</t>

      <section title="Resource Information at the Authorization Server">
        <t>The authorization server comes to be in possession of resource
        information that may reveal information about the resource owner,
        which the authorization server's trust relationship with the resource
        server is assumed to accommodate. However, the client is a
        less-trusted party -- in fact, entirely untrustworthy until
        permissions are associated with its RPT. The more information about a
        resource that is registered, the more risk of privacy compromise there
        is through a less-trusted authorization server.</t>
      </section>

      <section anchor="rqp-privacy"
               title="Requesting Party Information at the Authorization Server">
        <t>The primary privacy duty of UMA's design is to the resource owner.
        However, privacy considerations affect the requesting party as well,
        having to do with the nature of claims. Claims are likely to contain
        personal, personally identifiable, and sensitive information,
        particularly in the case of requesting parties who are end-users.</t>

        <t>If the authorization server supports persisting claims for any
        length of time (for example, to support issuance of PCTs), then it
        SHOULD provide a secure and privacy-protected means of storing claim
        data. It is also RECOMMENDED for the authorization server to use an
        interactive claims-gathering flow to ask an end-user requesting party
        for authorization to persist their claims before issuing a PCT. A
        requesting party who provides claims to an authorization server once
        having been redirected there is less susceptible to privacy-destroying
        behavior. Otherwise, certain flows such as claim pushing and
        interactive federated sign-in with automatic login will tend to be
        invisible to the user if they have not consciously authorized the
        possibility.</t>
      </section>

      <section title="Profiles and Trust Establishment">
        <t>Parties that are operating and using UMA software entities have
        opportunities to establish agreements about mutual rights,
        responsibilities, and common interpretations of UMA constructs for
        consistent and expected software behavior. These agreements can be
        used to improve the parties' respective privacy postures. See <xref
        target="trust-considerations" /> for more information. Additional
        considerations related to Privacy by Design concepts are discussed in
        <xref target="UMA-PbD" />.</t>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document makes the following requests of IANA.</t>

      <section title="JSON Web Token Claims Registration">
        <t>This specification registers the claim defined in <xref
        target="uma-bearer-token-profile" />.</t>

        <section title="Registry Contents">
          <t>
            <list style="symbols">
              <t>Claim name: permissions</t>

              <t>Claim description: Array of objects, each describing a set of
              scoped, time-limitable entitlements to a resource</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - wg-uma@kantarainitiative.org</t>

              <t>Specification document: <xref
              target="uma-bearer-token-profile" /> in this document</t>
            </list>
          </t>
        </section>
      </section>

      <section title="OAuth Token Introspection Response Registration">
        <t>This specification registers the claim defined in <xref
        target="uma-bearer-token-profile" />.</t>

        <section title="Registry Contents">
          <t>
            <list style="symbols">
              <t>Name: permissions</t>

              <t>Description: Array of objects, each describing a set of
              scoped, time-limitable entitlements to a resource</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - wg-uma@kantarainitiative.org</t>

              <t>Specification document: <xref
              target="uma-bearer-token-profile" /> in this document</t>
            </list>
          </t>
        </section>
      </section>

      <section title="Well-Known URI Registration">
        <t>This specification registers the well-known URI defined in <xref
        target="am-endpoints" />.</t>

        <section title="Registry Contents">
          <t>
            <list style="symbols">
              <t>URI suffix: uma2-configuration</t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - wg-uma@kantarainitiative.org</t>

              <t>Specification document: <xref target="am-endpoints" /> in
              this document</t>
            </list>
          </t>
        </section>
      </section>

      <section title="OAuth 2.0 Extension Grant Parameters Registration">
        <t>This specification registers the parameters defined in <xref
        target="uma-grant-type" />.</t>

        <section title="Registry Contents">
          <t>
            <list style="symbols">
              <t>Grant type: <spanx
              style="verb">urn:ietf:params:oauth:grant-type:uma-ticket</spanx></t>

              <t>Change controller: Kantara Initiative User-Managed Access
              Work Group - wg-uma@kantarainitiative.org</t>

              <t>Specification document: <xref target="uma-grant-type" /> in
              this document</t>

              <t>Parameters (usage locations are all on the token
              endpoint):<list style="symbols">
                  <t hangText="ticket">
                    <spanx style="verb">ticket</spanx>
                  </t>

                  <t hangText="ticket">
                    <spanx style="verb">rpt</spanx>

                    
                  </t>

                  <t hangText="ticket">
                    <spanx style="verb">claim_tokens</spanx>
                  </t>

                  <t hangText="ticket">
                    <spanx style="verb">rpt</spanx>

                    
                  </t>
                </list></t>
            </list>
          </t>
        </section>
      </section>
    </section>

    <section anchor="Acknowledgments" title="Acknowledgments">
      <t>The following people made significant text contributions to the
      specification:<list style="symbols">
          <t>Paul C. Bryan, ForgeRock US, Inc. (former editor)</t>

          <t>Domenico Catalano, Oracle (former author)</t>

          <t>Mark Dobrinic, Cozmanova</t>

          <t>George Fletcher, AOL</t>

          <t>Thomas Hardjono, MIT (former editor)</t>

          <t>Lukasz Moren, Cloud Identity Ltd</t>

          <t>Christian Scholz, COMlounge GmbH (former editor)</t>

          <t>Mike Schwartz, Gluu</t>

          <t>Jacek Szpot, Newcastle University</t>
        </list></t>

      <t>Additional contributors to this specification include the Kantara UMA
      Work Group participants, a list of whom can be found at <xref
      target="UMAnitarians" />.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <reference anchor="BCP195" target="https://tools.ietf.org/html/bcp195">
        <front>
          <title>Recommendations for Secure Use of Transport Layer Security
          (TLS) and Datagram Transport Layer Security (DTLS)</title>

          <author initials="Y." surname="Sheffer">
            <organization />
          </author>

          <date day="" month="May" year="2015" />
        </front>
      </reference>

      <reference anchor="OAuth-resource-reg"
                 target="https://docs.kantarainitiative.org/uma/rec-oauth-resource-reg-v1_0_1.html">
        <front>
          <title>OAuth 2.0 Resource Registration</title>

          <author initials="T." surname="Hardjono">
            <organization>IETF</organization>
          </author>

          <date day="28" month="December" year="2015" />
        </front>
      </reference>

      <reference anchor="OIDCCore"
                 target="http://openid.net/specs/openid-connect-core-1_0.html">
        <front>
          <title>OpenID Connect Core 1.0 incorporating errata set 1</title>

          <author initials="N." surname="Sakimura">
            <organization />
          </author>

          <date day="8" month="November" year="2014" />
        </front>
      </reference>

      <reference anchor="OIDCDynClientReg"
                 target="http://openid.net/specs/openid-connect-registration-1_0.html">
        <front>
          <title>OpenID Connect Dynamic Client Registration 1.0 incorporating
          errata set 1</title>

          <author initials="N." surname="Sakimura">
            <organization>OpenID Foundation</organization>
          </author>

          <date day="8" month="November" year="2014" />
        </front>
      </reference>

      <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119"?>

      <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986"?>

      <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5785"?>

      <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6415"?>

      <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6711"?>

      <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749"?>

      <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6750"?>

      <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819"?>

      <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7159"?>

      <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7519"?>

      <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7591"?>

      <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7662"?>

      <?rfc include="http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2616"?>
    </references>

    <references title="Informative References">
      <reference anchor="UMA-casestudies"
                 target="https://kantarainitiative.org/confluence/display/uma/Case+Studies">
        <front>
          <title>UMA Case Studies</title>

          <author initials="E." surname="Maler">
            <organization />
          </author>

          <date day="" month="" year="2016" />
        </front>
      </reference>

      <reference anchor="UMA-Impl"
                 target="https://kantarainitiative.org/confluence/display/uma/UMA+Implementer%27s+Guide">
        <front>
          <title>UMA Implementer's Guide</title>

          <author initials="E." surname="Maler" />

          <date day="" month="" year="2016" />
        </front>
      </reference>

      <reference anchor="UMA-PbD"
                 target="https://kantarainitiative.org/confluence/display/uma/Privacy+by+Design+Implications+of+UMA">
        <front>
          <title>Privacy by Design Implications of UMA</title>

          <author initials="E." surname="Maler" />

          <date day="9" month="December" year="2013" />
        </front>
      </reference>

      <reference anchor="UMA-usecases"
                 target="https://kantarainitiative.org/confluence/display/uma/UMA+Scenarios+and+Use+Cases">
        <front>
          <title>UMA Scenarios and Use Cases</title>

          <author initials="E." surname="Maler">
            <organization>Kantara</organization>
          </author>

          <date day="5" month="October" year="2010" />
        </front>
      </reference>

      <reference anchor="UMAnitarians"
                 target="https://kantarainitiative.org/confluence/display/uma/Participant+Roster">
        <front>
          <title>UMA Participant Roster</title>

          <author initials="E." surname="Maler">
            <organization>Maler</organization>
          </author>

          <date day="" month="" year="2016" />
        </front>
      </reference>

      <reference anchor="UMA-legal"
                 target="http://kantarainitiative.org/confluence/display/uma/UMA+Legal">
        <front>
          <title>UMA Legal</title>

          <author initials="E." surname="Maler">
            <organization>Maler</organization>
          </author>

          <date day="4" month="November" year="2016" />
        </front>
      </reference>
    </references>
  </back>
</rfc>
